;
; Это восстановленный из исполнимого файла код на MACRO-11 для игры,
; которая называлась "Зона" или "Сталкер", файл игры назывался
; STALK.SAV, PIKNIK.SAV или ZONA.SAV и предназначался для советских PDP11-
; совместимых машин - таких как ДВК и УКНЦ.
; Это игра в жанре рогалик (Rogue-like), бродилка по подземельям, по мотивам
; повести Стругацких "Пикник на обочине".
; Игра, по-видимому, создана в конце 1980-х, автор игры - неизвестный
; программист из Ульяновска - первоначально программа писала копирайт:
; *** (С)УЛЬЯНОВСК УЛПИ "ГОЛОГРАФИЯ"***
; Авторская версия предназначалась для терминала с поддержкой КОИ-7.
; Здесь дизассемблирована "поправленная" версия, с поддержкой КОИ-8.
; Этот исходник компилируется в точную побайтовую копию игры командами:
;     MACRO STALK.MAC
;     LINK/STACK:1000 STALK
;
	.TITLE	STALK

	.ASECT
	.=000100
	.ASCII	/****************/
	.ASCII	/                /
	.ASCII	/    Hacked by   /
	.ASCII	/   O l e g  H.  /
	.ASCII	/   25. 10. 91.  /
	.ASCII	/                /
	.ASCII	/****************/
	.=000300
	.ASCII	/Corrected by LDN/
	.ASCII	/August 1993/
	.=000400
	.ASCII	/Внимание !!!    /
	.ASCII	/Программа выводит текстовые сообщения в коде КОИ-8, /
	.ASCII	/поэтому вы должны иметь драйвер, обслуживающий терминал в КОИ-8./
	.ASCII	/ (например, мой TS.SYS для УКНЦ).                /
	.ASCII	/Олег Ховайко, (UB5AJV).   /<000>
	.ASCII	<000><000><033><110><033><112><052>
	.ASCII	/BASED ON '/<016>/PIKNIK NA OBO^INE/<017>/'* /

	.ASECT
	.=001000

; Обёртка для вызова функции из библиотеки Фортрана:
; FUNCTION RANDU:REAL; FORTRAN;
L01000:	JSR	R0, L54316		; SVREG
L01004:	CALL	L54422			; SUPFOR $B126
L01010:	CALL	RANDU
L01014:	MOV	R1, 000024(SP)
L01020:	MOV	R0, 000022(SP)
L01024:	MOV	$RESR5, R5		; = 060016 - базовый адрес для переменных
L01030:	JSR	R0, L54346		; UNREG
L01034:	MOV	(SP), 000006(SP)
L01040:	ADD	#000006, SP
L01044:	RETURN
;
; Продедура: генерация случайного числа
; на стеке - место под возвращаемое значение,
; и два параметра - диапазон значений
L01046:	JSR	R0, L54316		; SVREG
L01052:	MOV	000014(SP), R0
L01056:	SUB	000016(SP), R0
L01062:	MOV	R0, -(SP)		; длина диапазона значений
L01064:	CALL	L52750			; $FLOAT
L01070:	CMP	-(SP), -(SP)
L01072:	MOV	R5, R0
L01074:	ADD	#000042, R0
L01100:	MOV	R0, -(SP)
L01102:	MOV	R5, R0			; адрес для 000042(R5)
L01104:	ADD	#000044, R0
L01110:	MOV	R0, -(SP)		; адрес для 000044(R5)
L01112:	MOV	#000002, -(SP)
L01116:	MOV	SP, R4
L01120:	CALL	L01000
L01124:	.WORD	075026			; FMUL SP
L01126:	MOV	000022(SP), -(SP)
L01132:	CALL	L52750			; $FLOAT
L01136:	.WORD	075006			; FADD SP
L01140:	CALL	L53056			; $B108; ROUND
L01144:	MOV	(SP)+, 000020(SP)
L01150:	JSR	R0, L54346		; $B76; UNREG
L01154:	MOV	(SP), 000004(SP)
L01160:	ADD	#000004, SP
L01164:	RETURN
;
; Процедура ввода символа, на стеке адрес куда сохранить введённый символ
L01166:	BIS	#010000, @#000044
L01174:	EMT	340			; .TTYIN
L01176:	BLO	L01174			; C=1, операцию надо повторить
L01200:	MOVB	R0, @000002(SP)		; Сохраняем введённый символ
L01204:	MOV	(SP), 000002(SP)
L01210:	ADD	#000002, SP
L01214:	RETURN
;
; Процедура: Поставить курсор на позицию (X*2,Y)
; два параметра на стеке: Y, X
L01216:	MOV	#000033, -(SP)		; ESC
L01222:	CLR	-(SP)			;
L01224:	CALL	L52224			; вывод символа
L01230:	MOV	#000131, -(SP)
L01234:	CLR	-(SP)			;
L01236:	CALL	L52224			; вывод символа
L01242:	MOV	000004(SP), R0
L01246:	ADD	#000040, R0
L01252:	MOV	R0, -(SP)
L01254:	CLR	-(SP)
L01256:	CALL	L52224			; вывод символа
L01262:	MOV	000002(SP), R0
L01266:	ADD	000002(SP), R0
L01272:	ADD	#000040, R0
L01276:	MOV	R0, -(SP)
L01300:	CLR	-(SP)
L01302:	CALL	L52224			; вывод символа
L01306:	MOV	(SP), 000004(SP)
L01312:	ADD	#000004, SP
L01316:	RETURN
;
; Процедура: очистить строки под сообщения
L01320:	MOV	#000020, -(SP)		; Y = 16.
L01324:	CLR	-(SP)			; X = 0
L01326:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
; FOR 000016(R5):=1 TO 7
L01332:	MOV	R5, R0
L01334:	ADD	#000016, R0		; адрес для 000016(R5)
L01340:	MOV	R0, -(SP)
L01342:	MOV	#000001, -(SP)
L01346:	MOV	#000007, -(SP)
L01352:	MOV	000002(SP), @000004(SP)
L01360:	CMP	@000004(SP), (SP)
L01364:	BLE	L01372
L01366:	JMP	L01440
L01372:	MOV	#000012, -(SP)		; символ ВК
L01376:	CLR	-(SP)			;
L01400:	CALL	L52224			; вывод символа
L01404:	MOV	#000033, -(SP)		; ESC
L01410:	CLR	-(SP)			;
L01412:	CALL	L52224			; вывод символа
L01416:	MOV	#000113, -(SP)
L01422:	CLR	-(SP)			;
L01424:	CALL	L52224			; вывод символа
L01430:	INC	@000004(SP)
L01434:	JMP	L01360			; продолжение цикла
L01440:	ADD	#000006, SP		; завершение цикла по 000016(R5)
L01444:	MOV	#000021, -(SP)		; Y = 17.
L01450:	CLR	-(SP)			; X = 0
L01452:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L01456:	RETURN
;
; Процедура, три параметра на стеке
L01460:	CMP	-(SP), -(SP)
L01462:	MOV	SP, R0
; FOR (R0):=-1 TO 1
L01464:	MOV	R0, -(SP)
L01466:	MOV	#177777, -(SP)		; -1
L01472:	MOV	#000001, -(SP)		; 1
L01476:	MOV	000002(SP), @000004(SP)
L01504:	CMP	@000004(SP), (SP)
L01510:	BLE	L01516
L01512:	JMP	L02312
; FOR 000010(R0):=-1 TO 1
L01516:	MOV	SP, R0
L01520:	ADD	#000010, R0
L01524:	MOV	R0, -(SP)
L01526:	MOV	#177777, -(SP)
L01532:	MOV	#000001, -(SP)
L01536:	MOV	000002(SP), @000004(SP)
L01544:	CMP	@000004(SP), (SP)
L01550:	BLE	L01556
L01552:	JMP	L02276
;
L01556:	MOV	000024(SP), R0
L01562:	ADD	000014(SP), R0
L01566:	MOV	R0, 000022(R5)
L01572:	MOV	000022(SP), R0
L01576:	ADD	000016(SP), R0
L01602:	MOV	R0, 000024(R5)
; IF
L01606:	MOV	000026(SP), R0
L01612:	SWAB	R0
L01614:	BIC	#000377, R0
L01620:	ASL	R0
L01622:	ADD	R5, R0
L01624:	MOV	000022(R5), R1
L01630:	ASL	R1
L01632:	ASL	R1
L01634:	ASL	R1
L01636:	ASL	R1
L01640:	ASL	R1
L01642:	ADD	R0, R1
L01644:	ADD	000024(R5), R1
L01650:	CMPB	000027(R1), #000136	; = '^' ?
L01656:	BEQ	L01664
L01660:	CLR	R0
L01662:	BR	L01670
L01664:	MOV	#000001, R0
L01670:	MOV	000026(SP), R1
L01674:	SWAB	R1
L01676:	BIC	#000377, R1
L01702:	ASL	R1
L01704:	ASL	R1
L01706:	ADD	R5, R1
L01710:	MOV	000022(R5), R2
L01714:	ASL	R2
L01716:	ASL	R2
L01720:	ASL	R2
L01722:	ASL	R2
L01724:	ASL	R2
L01726:	ASL	R2
L01730:	ADD	R1, R2
L01732:	MOV	000024(R5), R1
L01736:	ASL	R1
L01740:	ADD	R2, R1
L01742:	MOV	010772(R1), R1
L01746:	BIC	#177771, R1
L01752:	CMP	R1, #000004
L01756:	BNE	L01764
L01760:	CLR	R1
L01762:	BR	L01770
L01764:	MOV	#000001, R1
L01770:	COMB	R1
L01772:	BICB	R1, R0
L01774:	BNE	L02002
L01776:	JMP	L02034
; THEN
L02002:	MOV	000022(R5), -(SP)
L02006:	MOV	000024(R5), -(SP)
L02012:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L02016:	MOV	#000056, -(SP)		; '.'
L02022:	CLR	-(SP)
L02024:	CALL	L52224			; вывод символа
L02030:	JMP	L02266
; ELSE
L02034:	MOV	000026(SP), R0
L02040:	SWAB	R0
L02042:	BIC	#000377, R0
L02046:	ASL	R0
L02050:	ASL	R0
L02052:	ADD	R5, R0
L02054:	MOV	000022(R5), R1
L02060:	ASL	R1
L02062:	ASL	R1
L02064:	ASL	R1
L02066:	ASL	R1
L02070:	ASL	R1
L02072:	ASL	R1
L02074:	ADD	R0, R1
L02076:	MOV	000024(R5), R0
L02102:	ASL	R0
L02104:	ADD	R1, R0
L02106:	MOV	000026(SP), R1
L02112:	SWAB	R1
L02114:	BIC	#000377, R1
L02120:	ASL	R1
L02122:	ASL	R1
L02124:	ADD	R5, R1
L02126:	MOV	000022(R5), R2
L02132:	ASL	R2
L02134:	ASL	R2
L02136:	ASL	R2
L02140:	ASL	R2
L02142:	ASL	R2
L02144:	ASL	R2
L02146:	ADD	R1, R2
L02150:	MOV	000024(R5), R1
L02154:	ASL	R1
L02156:	ADD	R2, R1
L02160:	MOV	010772(R1), R1
L02164:	BIS	#000100, R1
L02170:	MOV	R1, 010772(R0)
;
L02174:	MOV	000022(R5), -(SP)
L02200:	MOV	000024(R5), -(SP)
L02204:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
;
L02210:	MOV	000026(SP), R0
L02214:	SWAB	R0
L02216:	BIC	#000377, R0
L02222:	ASL	R0
L02224:	ADD	R5, R0
L02226:	MOV	000022(R5), R1
L02232:	ASL	R1
L02234:	ASL	R1
L02236:	ASL	R1
L02240:	ASL	R1
L02242:	ASL	R1
L02244:	ADD	R0, R1
L02246:	ADD	000024(R5), R1
L02252:	CLR	-(SP)
L02254:	MOVB	000027(R1), (SP)
L02260:	CLR	-(SP)			;
L02262:	CALL	L52224			; вывод символа
; END IF
L02266:	INC	@000004(SP)
L02272:	JMP	L01544
L02276:	ADD	#000006, SP		; завершение FOR
L02302:	INC	@000004(SP)
L02306:	JMP	L01504
L02312:	ADD	#000006, SP		; завершение цикла
L02316:	MOV	000004(SP), 000012(SP)
L02324:	ADD	#000012, SP
L02330:	RETURN
;
; Процедура, два параметра на стеке
L02332:	CLR	-(SP)
L02334:	JSR	R0, L54316		; SVREG
L02340:	MOV	#000001, 000012(SP)
; WHILE
L02346:	MOV	R5, R0
L02350:	ADD	000012(SP), R0
L02354:	CMPB	033077(R0), 000020(SP)
L02362:	BNE	L02370
L02364:	CLR	R0
L02366:	BR	L02374
L02370:	MOV	#000001, R0
L02374:	MOV	R5, R1
L02376:	ADD	000012(SP), R1
L02402:	CMPB	033077(R1), 000016(SP)
L02410:	BNE	L02416
L02412:	CLR	R1
L02414:	BR	L02422
L02416:	MOV	#000001, R1
L02422:	COMB	R1
L02424:	BICB	R1, R0
L02426:	CMP	000012(SP), #000007
L02434:	BLT	L02442
L02436:	CLR	R1
L02440:	BR	L02446
L02442:	MOV	#000001, R1
L02446:	COMB	R1
L02450:	BICB	R1, R0
L02452:	BNE	L02460
L02454:	JMP	L02470
; продолжаем цикл
L02460:	INC	000012(SP)
L02464:	JMP	L02346
; END WHILE
L02470:	MOV	000012(SP), 000022(SP)
L02476:	MOVB	#000001, 033156(R5)
L02504:	JSR	R0, L54346		; UNREG
L02510:	MOV	000002(SP), 000006(SP)
L02516:	ADD	#000006, SP
L02522:	RETURN
;
; Печатаем "Нельзя!" CR LF
L02524:	MOV	#L02550, -(SP)		; строка "Нельзя!"
	MOV	#000022, -(SP)		; 18. символов
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L02542:	CALL	$B36			; CR LF
L02546:	RETURN
L02550:	.ASCII	/ Н е л ь з я ! ! !/<000><000>
	.EVEN
;
; Процедура, три параметра на стеке: этаж, Y, X
L02574:	CMP	-(SP), -(SP)
L02576:	MOV	000012(SP), R0		; этаж
L02602:	SWAB	R0
L02604:	BIC	#000377, R0
L02610:	ASL	R0
L02612:	ADD	R5, R0
L02614:	MOV	000010(SP), R1		; Y
L02620:	ASL	R1
L02622:	ASL	R1
L02624:	ASL	R1
L02626:	ASL	R1
L02630:	ASL	R1			; * 32.
L02632:	ADD	R0, R1
L02634:	ADD	000006(SP), R1		; + X
L02640:	MOVB	000027(R1), (SP)
L02644:	MOV	000012(SP), R0
L02650:	SWAB	R0
L02652:	BIC	#000377, R0
L02656:	ASL	R0
L02660:	ASL	R0
L02662:	ADD	R5, R0
L02664:	MOV	000010(SP), R1
L02670:	ASL	R1
L02672:	ASL	R1
L02674:	ASL	R1
L02676:	ASL	R1
L02700:	ASL	R1
L02702:	ASL	R1
L02704:	ADD	R0, R1
L02706:	MOV	000006(SP), R0
L02712:	ASL	R0
L02714:	ADD	R1, R0
L02716:	MOV	010772(R0), 000002(SP)
;
L02724:	MOV	#L03272, -(SP)		; строка "З в е р ь !"
	MOV	#000013, -(SP)		; 11. символов
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L02742:	CALL	$B36			; CR LF
; IF
L02746:	MOV	000002(SP), R0
L02752:	BIC	#177773, R0
L02756:	BNE	L02764
L02760:	JMP	L03256
; THEN, IF
L02764:	CMPB	(SP), 033122(R5)
L02770:	BNE	L02776
L02772:	CLR	R0
L02774:	BR	L03002
L02776:	MOV	#000001, R0
L03002:	CMPB	(SP), 033123(R5)
L03006:	BNE	L03014
L03010:	CLR	R1
L03012:	BR	L03020
L03014:	MOV	#000001, R1
L03020:	COMB	R1
L03022:	BICB	R1, R0
L03024:	CMPB	(SP), 033124(R5)
L03030:	BNE	L03036
L03032:	CLR	R1
L03034:	BR	L03042
L03036:	MOV	#000001, R1
L03042:	COMB	R1
L03044:	BICB	R1, R0
L03046:	BNE	L03054
L03050:	JMP	L03256
; THEN
L03054:	CLR	000016(R5)
; FOR 000020(R5):=1 TO 3
L03060:	MOV	R5, R0
L03062:	ADD	#000020, R0
L03066:	MOV	R0, -(SP)
L03070:	MOV	#000001, -(SP)
L03074:	MOV	#000003, -(SP)
L03100:	MOV	000002(SP), @000004(SP)
L03106:	CMP	@000004(SP), (SP)
L03112:	BLE	L03120
L03114:	JMP	L03166
;
L03120:	INC	000016(R5)
; IF
L03124:	MOV	R5, R0
L03126:	ADD	000016(R5), R0
L03132:	CMPB	033121(R0), #000040	; = ' ' ?
L03140:	BEQ	L03146
L03142:	JMP	L03156
; THEN
L03146:	ADD	#000006, SP
L03152:	JMP	L03172		; EXIT
; END IF
L03156:	INC	@000004(SP)	; инкремент переменной цикла
L03162:	JMP	L03106
L03166:	ADD	#000006, SP	; завершение цикла FOR
;
L03172:	MOV	R5, R0
L03174:	ADD	000016(R5), R0
L03200:	MOVB	(SP), 033121(R0)
L03204:	MOV	000016(R5), R0
L03210:	ASL	R0
L03212:	ADD	R5, R0
L03214:	MOV	000002(SP), 033124(R0)
L03222:	MOV	000016(R5), R0
L03226:	ASL	R0
L03230:	ADD	R5, R0
L03232:	MOV	000010(SP), 033134(R0)
L03240:	MOV	000016(R5), R0
L03244:	ASL	R0
L03246:	ADD	R5, R0
L03250:	MOV	000006(SP), 033144(R0)
;
L03256:	MOV	000004(SP), 000012(SP)
L03264:	ADD	#000012, SP
L03270:	RETURN
;
L03272:	.ASCIZ	/З в е р ь !/
	.EVEN
;
; Печатаем "На этой штуке заклятие" CR LF
L03306:	MOV	#L03332, -(SP)		; строка "На этой штуке заклятие"
	MOV	#000026, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L03324:	CALL	$B36			; CR LF
L03330:	RETURN
L03332:	.ASCIZ	/На этой штуке заклятие/
	.EVEN
;
; Процедура; один параметр на стеке:
; 'J' - обновить экран; '.' - вверх; '5' - вниз
L03362:	MOVB	#000001, 033156(R5)
L03370:	CMPB	000002(SP), #000112	; <> 'J'
L03376:	BNE	L03404			; да
L03400:	JMP	L04166			; нет
; Мы стоим на лестнице?
L03404:	CMPB	@011070(R5), #000045	; = '%' ?
L03412:	BEQ	L03420			; да
L03414:	JMP	L04140			; нет
; FOR 000016(R5):=1 TO 4
L03420:	MOV	R5, R0
L03422:	ADD	#000016, R0
L03426:	MOV	R0, -(SP)
L03430:	MOV	#000001, -(SP)
L03434:	MOV	#000004, -(SP)
L03440:	MOV	000002(SP), @000004(SP)
L03446:	CMP	@000004(SP), (SP)
L03452:	BLE	L03460
L03454:	JMP	L03504
;
L03460:	MOV	R5, R0
L03462:	ADD	000016(R5), R0
L03466:	MOVB	#000040, 033121(R0)	; ' '
L03474:	INC	@000004(SP)
L03500:	JMP	L03446
L03504:	ADD	#000006, SP		; завершение FOR
; IF
L03510:	CMPB	000002(SP), #000056	; '.' ?
L03516:	BEQ	L03524			; да
L03520:	CLR	R0
L03522:	BR	L03530
L03524:	MOV	#000001, R0
L03530:	TST	000004(R5)		; Этаж
L03534:	BNE	L03542
L03536:	CLR	R1
L03540:	BR	L03546
L03542:	MOV	#000001, R1
L03546:	COMB	R1
L03550:	BICB	R1, R0
L03552:	BNE	L03560
L03554:	JMP	L03610
; THEN
L03560:	DEC	000004(R5)		; Этаж вниз
L03564:	ADD	#177776, 000060(R5)	; Энергия минус 2
L03572:	INC	000056(R5)
L03576:	CLR	R4			; ??
L03600:	JMP	L04170
L03604:	JMP	L03644			; ??
; ELSE IF
L03610:	CMP	000004(R5), #000010	; Этаж = 8. ?
L03616:	BNE	L03624
L03620:	JMP	L03644
L03624:	INC	000004(R5)		; Этаж вверх
L03630:	ADD	#000003, 000056(R5)
L03636:	CLR	R4			; ??
L03640:	JMP	L04170
; ELSE
L03644:	MOV	000004(R5), R0		; Этаж
L03650:	SWAB	R0
L03652:	BIC	#000377, R0
L03656:	ASL	R0			; R0 = этаж * 512
L03660:	ADD	R5, R0
L03662:	MOV	000012(R5), R1
L03666:	ASL	R1
L03670:	ASL	R1
L03672:	ASL	R1
L03674:	ASL	R1
L03676:	ASL	R1
L03700:	ADD	R0, R1
L03702:	ADD	000014(R5), R1
L03706:	ADD	#000027, R1		; + 23.
L03712:	MOV	R1, 011070(R5)
;
L03716:	MOV	000004(R5), R0		; Этаж
L03722:	SWAB	R0
L03724:	BIC	#000377, R0
L03730:	ASL	R0
L03732:	ASL	R0			; R0 = этаж * 1024
L03734:	ADD	R5, R0
L03736:	MOV	000012(R5), R1
L03742:	ASL	R1
L03744:	ASL	R1
L03746:	ASL	R1
L03750:	ASL	R1
L03752:	ASL	R1
L03754:	ASL	R1
L03756:	ADD	R0, R1
L03760:	MOV	000014(R5), R0
L03764:	ASL	R0
L03766:	ADD	R1, R0
L03770:	ADD	#010772, R0
L03774:	MOV	R0, 033074(R5)
;
L04000:	MOV	000004(R5), R0		; Этаж
L04004:	SWAB	R0
L04006:	BIC	#000377, R0
L04012:	ASL	R0
L04014:	ADD	R5, R0
L04016:	MOV	000006(R5), R1		; Новый Y игрока
L04022:	ASL	R1
L04024:	ASL	R1
L04026:	ASL	R1
L04030:	ASL	R1
L04032:	ASL	R1
L04034:	ADD	R0, R1
L04036:	ADD	000010(R5), R1		; Новый X игрока
L04042:	ADD	#000027, R1
L04046:	MOV	R1, 011072(R5)
;
L04052:	MOV	000004(R5), R0		; Этаж
L04056:	SWAB	R0
L04060:	BIC	#000377, R0
L04064:	ASL	R0
L04066:	ASL	R0
L04070:	ADD	R5, R0
L04072:	MOV	000006(R5), R1		; Новый Y игрока
L04076:	ASL	R1
L04100:	ASL	R1
L04102:	ASL	R1
L04104:	ASL	R1
L04106:	ASL	R1
L04110:	ASL	R1
L04112:	ADD	R0, R1
L04114:	MOV	000010(R5), R0		; Новый X игрока
L04120:	ASL	R0
L04122:	ADD	R1, R0
L04124:	ADD	#010772, R0
L04130:	MOV	R0, 033076(R5)
L04134:	JMP	L04162
; END IF
; Попытка перейти вверх/вниз не на лестнице
L04140:	MOV	#L05126, -(SP)		; строка " Без лестницы?"
	MOV	#000016, -(SP)		; 14. символов
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L04156:	CALL	$B36			; CR LF
L04162:	JMP	L05114
L04166:	BR	L04172
;
L04170:	ADD	R4, SP			; ??
L04172:	MOV	#000033, -(SP)		; ESC
L04176:	CLR	-(SP)
L04200:	CALL	L52224			; вывод символа
L04204:	MOV	#000110, -(SP)
L04210:	CLR	-(SP)
L04212:	CALL	L52224			; вывод символа
L04216:	MOV	#000033, -(SP)		; ESC
L04222:	CLR	-(SP)
L04224:	CALL	L52224			; вывод символа
L04230:	MOV	#L05146, -(SP)		; строка "Подземелье"
	MOV	#000015, -(SP)		; 13. символов
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L04246:	MOV	(R5), -(SP)		; Номер подземелья
L04250:	CLR	-(SP)			;
L04252:	CALL	L52306			; вывод числа
L04256:	MOV	#L05164, -(SP)		; строка - индикаторы справа
	MOV	#000203, -(SP)		; длина строки = 131.
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
; FOR 000016(R5):=1 TO 5 -- выводим значения индикаторов
L04274:	MOV	R5, R0
L04276:	ADD	#000016, R0		; R0 = адрес для 000016(R5)
L04302:	MOV	R0, -(SP)
L04304:	MOV	#000001, -(SP)		; начальное значение FOR
L04310:	MOV	#000005, -(SP)		; конечное значение FOR
L04314:	MOV	000002(SP), @000004(SP)
L04322:	CMP	@000004(SP), (SP)	; Начало тела FOR
L04326:	BLE	L04334
L04330:	JMP	L04416
L04334:	MOV	000016(R5), -(SP)	; Y
L04340:	MOV	#000045, -(SP)		; X = 37.
L04344:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L04350:	MOV	000016(R5), R0
L04354:	ASL	R0
L04356:	ADD	R5, R0
L04360:	MOV	000054(R0), -(SP)	; берём число из массива индикаторов
L04364:	MOV	#000003, -(SP)
L04370:	CALL	L52306			; вывод числа
L04374:	MOV	#000040, -(SP)
L04400:	CLR	-(SP)
L04402:	CALL	L52224			; вывод символа
L04406:	INC	@000004(SP)		; инкремент FOR
L04412:	JMP	L04322			; продолжение цикла
L04416:	ADD	#000006, SP		; завершение FOR
; CURSORTO(7,37.)
L04422:	MOV	#000007, -(SP)		; Y = 7
L04426:	MOV	#000045, -(SP)		; X = 37.
L04432:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
; WRITE(000030(R5):3)
L04436:	MOV	000030(R5), -(SP)	; Вредность
L04442:	MOV	#000003, -(SP)		; в 3 позиции
L04446:	CALL	L52306			; вывод числа
; CURSORTO(10.,33.)
L04452:	MOV	#000012, -(SP)		; Y = 10.
L04456:	MOV	#000041, -(SP)		; X = 33.
L04462:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
; FOR 00016(R5):=1 TO 6 -- выводим содержимое рюкзака
L04466:	MOV	R5, R0
L04470:	ADD	#000016, R0
L04474:	MOV	R0, -(SP)
L04476:	MOV	#000001, -(SP)		; начальное значение FOR
L04502:	MOV	#000006, -(SP)		; конечное значение FOR
L04506:	MOV	000002(SP), @000004(SP)
L04514:	CMP	@000004(SP), (SP)
L04520:	BLE	L04526
L04522:	JMP	L04562
; WRITE(RUKSAK[00016(R5)]:2)
L04526:	MOV	R5, R0
L04530:	ADD	000016(R5), R0
L04534:	CLR	-(SP)
L04536:	MOVB	033077(R0), (SP)	; 060016 + 033077 = 113115 -- базовый адрес рюкзака
L04542:	MOV	#000002, -(SP)		; в 2 позиции
L04546:	CALL	L52224			; вывод символа
L04552:	INC	@000004(SP)
L04556:	JMP	L04514
L04562:	ADD	#000006, SP		; завершение FOR
; CURSORTO(0,0)
L04566:	CLR	-(SP)			; Y = 0
L04570:	CLR	-(SP)			; X = 0
L04572:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
; FOR 00016(R5):=1 TO 16
L04576:	MOV	R5, R0
L04600:	ADD	#000016, R0
L04604:	MOV	R0, -(SP)
L04606:	MOV	#000001, -(SP)		; начальное значение FOR
L04612:	MOV	#000020, -(SP)		; конечное значение FOR = 16.
L04616:	MOV	000002(SP), @000004(SP)
L04624:	CMP	@000004(SP), (SP)
L04630:	BLE	L04636
L04632:	JMP	L05104
; FOR 00020(R5):=1 TO 32
L04636:	MOV	R5, R0
L04640:	ADD	#000020, R0
L04644:	MOV	R0, -(SP)
L04646:	MOV	#000001, -(SP)		; начальное значение FOR
L04652:	MOV	#000040, -(SP)		; конечное значение FOR = 32.
L04656:	MOV	000002(SP), @000004(SP)
L04664:	CMP	@000004(SP), (SP)
L04670:	BLE	L04676
L04672:	JMP	L05070
L04676:	MOV	000004(R5), R0		; Этаж
L04702:	SWAB	R0
L04704:	BIC	#000377, R0
L04710:	ASL	R0
L04712:	ASL	R0
L04714:	ADD	R5, R0
L04716:	MOV	000016(R5), R1
L04722:	ASL	R1
L04724:	ASL	R1
L04726:	ASL	R1
L04730:	ASL	R1
L04732:	ASL	R1
L04734:	ASL	R1			; * 64.
L04736:	ADD	R0, R1
L04740:	MOV	000020(R5), R0
L04744:	ASL	R0
L04746:	ADD	R1, R0
L04750:	MOV	010772(R0), R0		; 060016 + 010772 = 71010 -- базовый адрес массива
L04754:	BIC	#177677, R0
L04760:	BNE	L04766
L04762:	JMP	L05060
L04766:	MOV	000016(R5), -(SP)	; Y
L04772:	MOV	000020(R5), -(SP)	; X
L04776:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L05002:	MOV	000004(R5), R0		; Этаж
L05006:	SWAB	R0
L05010:	BIC	#000377, R0
L05014:	ASL	R0
L05016:	ADD	R5, R0
L05020:	MOV	000016(R5), R1
L05024:	ASL	R1
L05026:	ASL	R1
L05030:	ASL	R1
L05032:	ASL	R1
L05034:	ASL	R1			; * 32
L05036:	ADD	R0, R1
L05040:	ADD	000020(R5), R1
L05044:	CLR	-(SP)
L05046:	MOVB	000027(R1), (SP)	; берём символ
L05052:	CLR	-(SP)
L05054:	CALL	L52224			; вывод символа
L05060:	INC	@000004(SP)		; инкремент цикла по X
L05064:	JMP	L04664			; продолжение FOR
L05070:	ADD	#000006, SP		; завершение FOR по X
L05074:	INC	@000004(SP)		; инкремент цикла по строкам
L05100:	JMP	L04624			; продолжение FOR
L05104:	ADD	#000006, SP		; завершение FOR по строкам
; здесь оба цикла закончились
L05110:	CALL	L01320			; очистить строки под сообщения
L05114:	MOV	(SP), 000002(SP)
L05120:	ADD	#000002, SP
L05124:	RETURN
;
L05126:	.ASCIZ	/ Без лестницы?/
	.EVEN
L05146:	.ASCIZ	<112><011>/Подземелье /
L05164:	.ASCII	<015><012><011><011><011><011><011><011><011><011><000>
L05177:	.ASCII	/ Рейтинг/<012><011><011><011><011><033><131><042><140>
	.ASCII	/ Энергия/<015><012><011><011><011><011><011><011><011><011>
	.ASCII	/ Оружие/<015><012><011><011><011><011><011><011><011><011>
	.ASCII	/ Защита/<015><012><011><011><011><011><011><011><011><011>
	.ASCII	/ В банке/<015><012><015><012><011><011><011><011><011><011><011><011>
	.ASCII	/ Вредность/<015><012><015><012><011><011><011><011><011><011><011><011>
	.ASCIZ	/  Рюкзак:/
;
; Процедура, два параметра на стеке: DY, DX
; IF клетка с новыми координатами это не стенка
L05370:	MOV	000004(R5), R0		; Этаж
L05374:	SWAB	R0
L05376:	BIC	#000377, R0
L05402:	ASL	R0
L05404:	ADD	R5, R0
L05406:	MOV	000012(R5), R1		; Позиция Y игрока
L05412:	ADD	000004(SP), R1
L05416:	ASL	R1
L05420:	ASL	R1
L05422:	ASL	R1
L05424:	ASL	R1
L05426:	ASL	R1			; * 32.
L05430:	ADD	R0, R1
L05432:	MOV	000014(R5), R0		; Позиция X игрока
L05436:	ADD	000002(SP), R0
L05442:	ADD	R1, R0
L05444:	MOV	#L05672, -(SP)		; множество ['!','-']
L05450:	CALL	L53634			; $B52; PSHSET
L05454:	CLR	-(SP)
L05456:	MOVB	000027(R0), (SP)
L05462:	SUB	#000040, (SP)
L05466:	CALL	L53452			; DOIN - входит?
L05472:	BEQ	L05500			; нет
L05474:	JMP	L05654			; да
;
L05500:	ADD	000004(SP), 000012(R5)	; -> Позиция Y игрока
L05506:	ADD	000002(SP), 000014(R5)	; -> Позиция X игрока
;
L05514:	MOV	000004(R5), R0		; Этаж
L05520:	SWAB	R0
L05522:	BIC	#000377, R0
L05526:	ASL	R0
L05530:	ADD	R5, R0
L05532:	MOV	000012(R5), R1		; Позиция Y игрока
L05536:	ASL	R1
L05540:	ASL	R1
L05542:	ASL	R1
L05544:	ASL	R1
L05546:	ASL	R1
L05550:	ADD	R0, R1
L05552:	ADD	000014(R5), R1		; Позиция X игрока
L05556:	ADD	#000027, R1		; +23.
L05562:	MOV	R1, 011070(R5)
;
L05566:	MOV	000004(R5), R0		; Этаж
L05572:	SWAB	R0
L05574:	BIC	#000377, R0
L05600:	ASL	R0
L05602:	ASL	R0
L05604:	ADD	R5, R0
L05606:	MOV	000012(R5), R1		; Позиция Y игрока
L05612:	ASL	R1
L05614:	ASL	R1
L05616:	ASL	R1
L05620:	ASL	R1
L05622:	ASL	R1
L05624:	ASL	R1			; * 64.
L05626:	ADD	R0, R1
L05630:	MOV	000014(R5), R0		; Позиция X игрока
L05634:	ASL	R0			; * 2
L05636:	ADD	R1, R0
L05640:	ADD	#010772, R0
L05644:	MOV	R0, 033074(R5)
;
L05650:	JMP	L05660
L05654:	CALL	L02524			; печатаем "Нельзя!" CR LF
L05660:	MOV	(SP), 000004(SP)
L05664:	ADD	#000004, SP
L05670:	RETURN
L05672:	.WORD	020002, 000000, 000000, 000000
;
; Процедура, один параметр на стеке
L05702:	CLR	-(SP)
L05704:	MOV	#000002, -(SP)
L05710:	MOV	#000017, -(SP)
L05714:	CALL	L01046
L05720:	MOV	(SP)+, R0
L05722:	MOV	R0, 000012(R5)		; Позиция Y игрока ??
L05726:	CLR	-(SP)
L05730:	MOV	#000002, -(SP)
L05734:	MOV	#000037, -(SP)		; 31.
L05740:	CALL	L01046
L05744:	MOV	(SP)+, R0
L05746:	MOV	R0, 000014(R5)		; Позиция X игрока
;
L05752:	MOV	000004(R5), R0		; Этаж
L05756:	SWAB	R0
L05760:	BIC	#000377, R0
L05764:	ASL	R0
L05766:	ADD	R5, R0
L05770:	MOV	000012(R5), R1		; Позиция Y игрока ??
L05774:	ASL	R1
L05776:	ASL	R1
L06000:	ASL	R1
L06002:	ASL	R1
L06004:	ASL	R1			; * 32.
L06006:	ADD	R0, R1
L06010:	ADD	000014(R5), R1		; Позиция X игрока
L06014:	MOVB	000002(SP), 000027(R1)
;
L06022:	MOV	000004(R5), R0		; Этаж
L06026:	SWAB	R0
L06030:	BIC	#000377, R0
L06034:	ASL	R0
L06036:	ASL	R0
L06040:	ADD	R5, R0
L06042:	MOV	000012(R5), R1		; Позиция Y игрока ??
L06046:	ASL	R1
L06050:	ASL	R1
L06052:	ASL	R1
L06054:	ASL	R1
L06056:	ASL	R1
L06060:	ASL	R1			; * 64
L06062:	ADD	R0, R1
L06064:	MOV	000014(R5), R0		; Позиция X игрока
L06070:	ASL	R0
L06072:	ADD	R1, R0
L06074:	CLR	-(SP)
L06076:	CLR	-(SP)
L06100:	MOV	#077777, -(SP)
L06104:	CALL	L01046
L06110:	MOV	(SP)+, R1
L06112:	BIC	#000100, R1
L06116:	MOV	R1, 010772(R0)
L06122:	MOV	(SP), 000002(SP)
L06126:	ADD	#000002, SP
L06132:	RETURN
;
; $BEGIN: Сюда переходим из START; R5 = 060016
$BEGIN:
L06134:	ADD	#033216, L50400		; +13966. - $KORE меняется с 060016 до 113234
; Готовим начальную строку
L06142:	MOVB	#000050, 033160(R5)	; '(' -> (113176)
L06150:	MOVB	#000110, 033161(R5)	; 'H' -> (113177)
L06156:	MOVB	#000051, 033162(R5)	; ')' -> (113200)
L06164:	MOVB	#000040, 033163(R5)	; ' ' -> (113201)
L06172:	MOVB	#000110, 033164(R5)	; 'H' -> (113202)
L06200:	MOVB	#000141, 033165(R5)	; 'a' -> (113203)
L06206:	MOVB	#000143, 033166(R5)	; 'c' -> (113204)
L06214:	MOVB	#000153, 033167(R5)	; 'k' -> (113205)
L06222:	MOVB	#000145, 033170(R5)	; 'e' -> (113206)
L06230:	MOVB	#000144, 033171(R5)	; 'd' -> (113207)
L06236:	MOVB	#000040, 033172(R5)	; ' ' -> (113210)
L06244:	MOVB	#000142, 033173(R5)	; 'b' -> (113211)
L06252:	MOVB	#000171, 033174(R5)	; 'y' -> (113212)
L06260:	MOVB	#000040, 033175(R5)	; ' ' -> (113213)
L06266:	MOVB	#000117, 033176(R5)	; 'O' -> (113214)
L06274:	MOVB	#000154, 033177(R5)	; 'l' -> (113215)
L06302:	MOVB	#000145, 033200(R5)	; 'e' -> (113216)
L06310:	MOVB	#000147, 033201(R5)	; 'g' -> (113217)
L06316:	MOVB	#000040, 033202(R5)	; ' ' -> (113220)
L06324:	MOVB	#000110, 033203(R5)	; 'H' -> (113221)
L06332:	MOVB	#000056, 033204(R5)	; '.' -> (113222)
L06340:	MOVB	#000040, 033205(R5)	; ' ' -> (113223)
L06346:	MOVB	#000040, 033206(R5)	; ' ' -> (113224)
L06354:	MOVB	#000040, 033207(R5)	; ' ' -> (113225)
L06362:	MOVB	#000040, 033210(R5)	; ' ' -> (113226)
L06370:	MOVB	#000040, 033211(R5)	; ' ' -> (113227)
L06376:	MOVB	#000040, 033212(R5)	; ' ' -> (113230)
L06404:	MOVB	#000040, 033213(R5)	; ' ' -> (113231)
L06412:	MOVB	#000040, 033214(R5)	; ' ' -> (113232)
L06420:	MOVB	#000040, 033215(R5)	; ' ' -> (113233)
L06426:	MOV	#L40234, -(SP)		; адрес строки "*** "
L06432:	MOV	#000004, -(SP)		; длина строки
L06436:	CLR	-(SP)			;
L06440:	CALL	$B32			; вывод строки
L06444:	MOV	R5, R0			; берём базовый адрес
L06446:	ADD	#033160, R0		; получаем в R0 адрес начальной строки
L06452:	MOV	R0, -(SP)		; сохраняем как параметр
L06454:	MOV	#000036, -(SP)		; длина строки = 30.
L06460:	CLR	-(SP)			;
L06462:	CALL	$B32			; вывод строки
L06466:	MOV	#L40242, -(SP)		; адрес строки "***"
L06472:	MOV	#000003, -(SP)		; длина строки
L06476:	CLR	-(SP)			;
L06500:	CALL	$B32			; вывод строки
L06504:	CALL	$B36			; CR LF
L06510:	MOV	#L40246, -(SP)		; адрес строки-заголовка "С Т А Л К Е Р"
L06514:	MOV	#000044, -(SP)		; длина строки = 36.
L06520:	CLR	-(SP)			;
L06522:	CALL	$B32			; вывод строки
L06526:	CALL	$B36			; CR LF
L06532:	MOV	#L40314, -(SP)		; адрес строки "загадайте число...
L06536:	MOV	#000072, -(SP)		; длина строки = 58.
L06542:	CLR	-(SP)			;
L06544:	CALL	$B32			; вывод строки
; Начало ввода числа, которое "может быть пригодится там"
L06550:	CLR	000044(R5)
L06554:	BIS	#010100, @#000044
; Ввод первого символа - почему-то его просто проглатываем
L06562:	EMT	340			; .TTYIN
L06564:	BHIS	L06562
; Цикл ввода
L06566:	EMT	340			; .TTYIN
L06570:	BHIS	L06614			; получили символ? => переход
L06572:	INC	000044(R5)		; крутим значение
L06576:	CMP	000044(R5), #004704	; >= 2500. ?
L06604:	BLE	L06566			; нет, продолжаем
L06606:	CLR	000044(R5)		; обнуляем значение
L06612:	BR	L06566			; продолжаем цикл
L06614:	BIC	#010100, @#000044
L06622:	CALL	L51742			; RDNM
L06626:	MOV	(SP)+, 000042(R5)
L06632:	CALL	L51664			; RDLN
L06636:	MOV	#000001, (R5)		; Подземелье = 1
L06642:	BIS	#010000, @#000044
; Начало игры, или рестарт на следующем подземелье
L06650:	MOV	#000033, -(SP)		; ESC
L06654:	CLR	-(SP)			;
L06656:	CALL	L52224			; вывод символа
L06662:	MOV	#000110, -(SP)
L06666:	CLR	-(SP)			;
L06670:	CALL	L52224			; вывод символа
L06674:	MOV	#000033, -(SP)		; ESC
L06700:	CLR	-(SP)			;
L06702:	CALL	L52224			; вывод символа
L06706:	MOV	#000112, -(SP)
L06712:	CLR	-(SP)			;
L06714:	CALL	L52224			; вывод символа
L06720:	MOV	#000012, -(SP)		; Y = 10.
L06724:	MOV	#000001, -(SP)		; X = 1
L06730:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
; FOR 000004(R5):=0 TO 8. -- цикл по этажам
L06734:	MOV	R5, R0
L06736:	ADD	#000004, R0		; R0 = адрес переменной 000004(R5) - этаж
L06742:	MOV	R0, -(SP)
L06744:	CLR	-(SP)			; начальное значение = 0
L06746:	MOV	#000010, -(SP)		; конечное значение = 8.
L06752:	MOV	000002(SP), @000004(SP)
L06760:	CMP	@000004(SP), (SP)	; проверяем условие цикла: 000004(R5) <= 8.
L06764:	BLE	L06772			; да, продолжаем цикл
L06766:	JMP	L07624			; нет, выход из цикла
; тело цикла по этажам
L06772:	CLR	-(SP)
L06774:	CLR	-(SP)
L06776:	MOV	#000130, -(SP)		; 88.
L07002:	CALL	L01046
L07006:	MOV	(SP)+, R0
L07010:	MOV	R0, 000022(R5)
; FOR 000020(R5):=1 TO 32.
L07014:	MOV	R5, R0
L07016:	ADD	#000020, R0
L07022:	MOV	R0, -(SP)
L07024:	MOV	#000001, -(SP)		; начальное значение = 1
L07030:	MOV	#000040, -(SP)		; конечное значение = 32.
L07034:	MOV	000002(SP), @000004(SP)
L07042:	CMP	@000004(SP), (SP)
L07046:	BLE	L07054
L07050:	JMP	L07114			; выход из цикла
;
L07054:	MOV	000004(R5), R0		; Этаж
L07060:	SWAB	R0
L07062:	BIC	#000377, R0
L07066:	ASL	R0			; R0 = этаж * 512.
L07070:	ADD	R5, R0
L07072:	ADD	000020(R5), R0
L07076:	MOVB	#000055, 000067(R0)	; '-' -- стенка вверху
L07104:	INC	@000004(SP)
L07110:	JMP	L07042
L07114:	ADD	#000006, SP		; завершение цикла по 000020(R5)
; FOR 000016(R5):=2 TO 15.
L07120:	MOV	R5, R0
L07122:	ADD	#000016, R0
L07126:	MOV	R0, -(SP)
L07130:	MOV	#000002, -(SP)		; начальное значение = 2
L07134:	MOV	#000017, -(SP)		; конечное значение = 15.
L07140:	MOV	000002(SP), @000004(SP)
L07146:	CMP	@000004(SP), (SP)
L07152:	BLE	L07160
L07154:	JMP	L07504
L07160:	MOV	000004(R5), R0		; Этаж
L07164:	SWAB	R0
L07166:	BIC	#000377, R0
L07172:	ASL	R0
L07174:	ADD	R5, R0
L07176:	MOV	000016(R5), R1
L07202:	ASL	R1
L07204:	ASL	R1
L07206:	ASL	R1
L07210:	ASL	R1
L07212:	ASL	R1			; * 32.
L07214:	ADD	R0, R1
L07216:	MOVB	#000041, 000030(R1)	; '!'
; FOR 000020(R5):=2 TO 31.
L07224:	MOV	R5, R0
L07226:	ADD	#000020, R0
L07232:	MOV	R0, -(SP)
L07234:	MOV	#000002, -(SP)
L07240:	MOV	#000037, -(SP)
L07244:	MOV	000002(SP), @000004(SP)
L07252:	CMP	@000004(SP), (SP)
L07256:	BLE	L07264
L07260:	JMP	L07424
L07264:	MOV	000004(R5), R0		; Этаж
L07270:	SWAB	R0
L07272:	BIC	#000377, R0
L07276:	ASL	R0
L07300:	ADD	R5, R0
L07302:	MOV	000016(R5), R1
L07306:	ASL	R1
L07310:	ASL	R1
L07312:	ASL	R1
L07314:	ASL	R1
L07316:	ASL	R1
L07320:	ADD	R0, R1
L07322:	ADD	000020(R5), R1
L07326:	MOVB	#000056, 000027(R1)	; '.'
L07334:	MOV	000004(R5), R0		; Этаж
L07340:	SWAB	R0
L07342:	BIC	#000377, R0
L07346:	ASL	R0
L07350:	ASL	R0
L07352:	ADD	R5, R0
L07354:	MOV	000016(R5), R1
L07360:	ASL	R1
L07362:	ASL	R1
L07364:	ASL	R1
L07366:	ASL	R1
L07370:	ASL	R1
L07372:	ASL	R1
L07374:	ADD	R0, R1
L07376:	MOV	000020(R5), R0
L07402:	ASL	R0
L07404:	ADD	R1, R0
L07406:	MOV	000022(R5), 010772(R0)
L07414:	INC	@000004(SP)
L07420:	JMP	L07252
L07424:	ADD	#000006, SP		; завершение цикла по 000020(R5)
;
L07430:	MOV	000004(R5), R0		; Этаж
L07434:	SWAB	R0
L07436:	BIC	#000377, R0
L07442:	ASL	R0
L07444:	ADD	R5, R0
L07446:	MOV	000016(R5), R1
L07452:	ASL	R1
L07454:	ASL	R1
L07456:	ASL	R1
L07460:	ASL	R1
L07462:	ASL	R1
L07464:	ADD	R0, R1
L07466:	MOVB	#000041, 000067(R1)	; '!'
L07474:	INC	@000004(SP)
L07500:	JMP	L07146			; продолжение цикла
L07504:	ADD	#000006, SP		; завершение цикла
; FOR 000020(R5):=1 TO 32.
L07510:	MOV	R5, R0
L07512:	ADD	#000020, R0
L07516:	MOV	R0, -(SP)
L07520:	MOV	#000001, -(SP)
L07524:	MOV	#000040, -(SP)
L07530:	MOV	000002(SP), @000004(SP)
L07536:	CMP	@000004(SP), (SP)
L07542:	BLE	L07550
L07544:	JMP	L07610
L07550:	MOV	000004(R5), R0		; Этаж
L07554:	SWAB	R0
L07556:	BIC	#000377, R0
L07562:	ASL	R0
L07564:	ADD	R5, R0
L07566:	ADD	000020(R5), R0
L07572:	MOVB	#000055, 001027(R0)	; '-' стенка снизу
L07600:	INC	@000004(SP)
L07604:	JMP	L07536
L07610:	ADD	#000006, SP		; завершение цикла
L07614:	INC	@000004(SP)
L07620:	JMP	L06760			; продолжение цикла по этажам
L07624:	ADD	#000006, SP		; завершение цикла по этажам
; закончили заполнять поле
L07630:	MOV	#L40410, -(SP)		; строка "Для подсказки нажимайте "H""
	MOV	#000037, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L07646:	CALL	$B36			; CR LF
; FOR 000004(R5):=1 TO 8.
L07652:	MOV	R5, R0
L07654:	ADD	#000004, R0
L07660:	MOV	R0, -(SP)
L07662:	MOV	#000001, -(SP)
L07666:	MOV	#000010, -(SP)
L07672:	MOV	000002(SP), @000004(SP)
L07700:	CMP	@000004(SP), (SP)
L07704:	BLE	L07712
L07706:	JMP	L10272
; 000016(R5):=L01046(2,7)
L07712:	CLR	-(SP)
L07714:	MOV	#000002, -(SP)
L07720:	MOV	#000007, -(SP)
L07724:	CALL	L01046
L07730:	MOV	(SP)+, R0
L07732:	MOV	R0, 000016(R5)
; WHILE 000016(R5) < 16.
L07736:	CMP	000016(R5), #000020	; < 16. ?
L07744:	BLT	L07752			; да
L07746:	JMP	L10262			; нет
; 000022(R5):=2
L07752:	MOV	#000002, 000022(R5)
; 000024(R5):=L01046(1,7)
L07760:	CLR	-(SP)
L07762:	MOV	#000001, -(SP)
L07766:	MOV	#000007, -(SP)
L07772:	CALL	L01046
L07776:	MOV	(SP)+, R0
L10000:	MOV	R0, 000024(R5)
; WHILE 000024(R5) < 32.
L10004:	CMP	000024(R5), #000040	; < 32. ?
L10012:	BLT	L10020			; да
L10014:	JMP	L10230			; нет, завершение цикла
; FOR 000020(R5):=000022(R5) TO 000024(R5)
L10020:	MOV	R5, R0
L10022:	ADD	#000020, R0
L10026:	MOV	R0, -(SP)
L10030:	MOV	000022(R5), -(SP)
L10034:	MOV	000024(R5), -(SP)
L10040:	MOV	000002(SP), @000004(SP)
L10046:	CMP	@000004(SP), (SP)
L10052:	BLE	L10060
L10054:	JMP	L10140
; ПОЛЕ[000020(R5),000016(R5),000004(R5)]:='-'
L10060:	MOV	000004(R5), R0		; Этаж
L10064:	SWAB	R0
L10066:	BIC	#000377, R0
L10072:	ASL	R0
L10074:	ADD	R5, R0
L10076:	MOV	000016(R5), R1
L10102:	ASL	R1
L10104:	ASL	R1
L10106:	ASL	R1
L10110:	ASL	R1
L10112:	ASL	R1
L10114:	ADD	R0, R1
L10116:	ADD	000020(R5), R1
L10122:	MOVB	#000055, 000027(R1)	; '-'
L10130:	INC	@000004(SP)
L10134:	JMP	L10046
L10140:	ADD	#000006, SP		; завершение цикла FOR
; 000022(R5):=L01046(1,5)+000024(R5)
L10144:	CLR	-(SP)
L10146:	MOV	#000001, -(SP)
L10152:	MOV	#000005, -(SP)
L10156:	CALL	L01046
L10162:	MOV	(SP)+, R0
L10164:	ADD	000024(R5), R0
L10170:	MOV	R0, 000022(R5)
; 000024(R5):=L01046(3,10.)+000024(R5)
L10174:	CLR	-(SP)
L10176:	MOV	#000003, -(SP)
L10202:	MOV	#000012, -(SP)
L10206:	CALL	L01046
L10212:	MOV	(SP)+, R0
L10214:	ADD	000024(R5), R0
L10220:	MOV	R0, 000024(R5)
L10224:	JMP	L10004			; продолжение цикла WHILE
; 000016(R5):=L01046(0,7)+000016(R5)
L10230:	CLR	-(SP)
L10232:	CLR	-(SP)
L10234:	MOV	#000007, -(SP)
L10240:	CALL	L01046
L10244:	MOV	(SP)+, R0
L10246:	ADD	000016(R5), R0
L10252:	MOV	R0, 000016(R5)
L10256:	JMP	L07736			; продолжение цикла WHILE
; конец тела цикла FOR
L10262:	INC	@000004(SP)
L10266:	JMP	L07700
L10272:	ADD	#000006, SP		; завершение цикла FOR
;
L10276:	MOV	#000015, -(SP)		; ПС
L10302:	CLR	-(SP)			;
L10304:	CALL	L52224			; вывод символа
L10310:	MOV	#L40450, -(SP)		; строка "Темный  коридор ..."
	MOV	#000032, -(SP)		; длина строки = 26.
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
; FOR 000004(R5):= 1 TO 8.
L10326:	MOV	R5, R0
L10330:	ADD	#000004, R0
L10334:	MOV	R0, -(SP)
L10336:	MOV	#000001, -(SP)
L10342:	MOV	#000010, -(SP)
L10346:	MOV	000002(SP), @000004(SP)
L10354:	CMP	@000004(SP), (SP)
L10360:	BLE	L10366
L10362:	JMP	L11102			; завершение цикла
; 000020(R5):=L01046(2,7)
L10366:	CLR	-(SP)
L10370:	MOV	#000002, -(SP)
L10374:	MOV	#000007, -(SP)
L10400:	CALL	L01046
L10404:	MOV	(SP)+, R0
L10406:	MOV	R0, 000020(R5)
;
L10412:	CMP	000020(R5), #000040	; < 32. ?
L10420:	BLT	L10426			; да
L10422:	JMP	L11072			; нет
; 000022(R5):=2
L10426:	MOV	#000002, 000022(R5)
; 000024(R5):=L01046(1,7)
L10434:	CLR	-(SP)
L10436:	MOV	#000001, -(SP)
L10442:	MOV	#000007, -(SP)
L10446:	CALL	L01046
L10452:	MOV	(SP)+, R0
L10454:	MOV	R0, 000024(R5)
; WHILE 000024(R5) < 16.
L10460:	CMP	000024(R5), #000020	; < 16. ?
L10466:	BLT	L10474			; да
L10470:	JMP	L11036			; нет, завершение WHILE
; FOR 000016(R5):=000022(R5) TO 000024(R5)
L10474:	MOV	R5, R0
L10476:	ADD	#000016, R0
L10502:	MOV	R0, -(SP)
L10504:	MOV	000022(R5), -(SP)
L10510:	MOV	000024(R5), -(SP)
L10514:	MOV	000002(SP), @000004(SP)
L10522:	CMP	@000004(SP), (SP)
L10526:	BLE	L10534
L10530:	JMP	L10746
L10534:	MOV	000004(R5), R0		; Этаж
L10540:	SWAB	R0
L10542:	BIC	#000377, R0
L10546:	ASL	R0
L10550:	ADD	R5, R0
L10552:	MOV	000016(R5), R1
L10556:	ASL	R1
L10560:	ASL	R1
L10562:	ASL	R1
L10564:	ASL	R1
L10566:	ASL	R1
L10570:	ADD	R0, R1
L10572:	ADD	000020(R5), R1
L10576:	CMPB	000027(R1), #000056	; = '.' ?
L10604:	BEQ	L10612			; да
L10606:	JMP	L10666			; нет
L10612:	MOV	000004(R5), R0		; Этаж
L10616:	SWAB	R0
L10620:	BIC	#000377, R0
L10624:	ASL	R0
L10626:	ADD	R5, R0
L10630:	MOV	000016(R5), R1
L10634:	ASL	R1
L10636:	ASL	R1
L10640:	ASL	R1
L10642:	ASL	R1
L10644:	ASL	R1
L10646:	ADD	R0, R1
L10650:	ADD	000020(R5), R1
L10654:	MOVB	#000041, 000027(R1)	; '!'
L10662:	JMP	L10736
L10666:	MOV	000004(R5), R0		; Этаж
L10672:	SWAB	R0
L10674:	BIC	#000377, R0
L10700:	ASL	R0
L10702:	ADD	R5, R0
L10704:	MOV	000016(R5), R1
L10710:	ASL	R1
L10712:	ASL	R1
L10714:	ASL	R1
L10716:	ASL	R1
L10720:	ASL	R1
L10722:	ADD	R0, R1
L10724:	ADD	000020(R5), R1
L10730:	MOVB	#000043, 000027(R1)	; '#'
; Здесь закончился IF
L10736:	INC	@000004(SP)
L10742:	JMP	L10522
L10746:	ADD	#000006, SP		; завершение цикла FOR
; 000022(R5):=L01046(1,5)+000024(R5)
L10752:	CLR	-(SP)
L10754:	MOV	#000001, -(SP)
L10760:	MOV	#000005, -(SP)
L10764:	CALL	L01046
L10770:	MOV	(SP)+, R0
L10772:	ADD	000024(R5), R0
L10776:	MOV	R0, 000022(R5)
; 000024(R5):=L01046(2,7)+000024(R5)
L11002:	CLR	-(SP)
L11004:	MOV	#000002, -(SP)
L11010:	MOV	#000007, -(SP)
L11014:	CALL	L01046
L11020:	MOV	(SP)+, R0
L11022:	ADD	000024(R5), R0
L11026:	MOV	R0, 000024(R5)
L11032:	JMP	L10460			; продолжение WHILE
; 000020(R5):=L01046(2,5)+000020(R5)
L11036:	CLR	-(SP)
L11040:	MOV	#000002, -(SP)
L11044:	MOV	#000005, -(SP)
L11050:	CALL	L01046
L11054:	MOV	(SP)+, R0
L11056:	ADD	000020(R5), R0
L11062:	MOV	R0, 000020(R5)
L11066:	JMP	L10412			; продолжение WHILE
;
L11072:	INC	@000004(SP)
L11076:	JMP	L10354
L11102:	ADD	#000006, SP		; завершение цикла FOR
;
L11106:	MOV	#000015, -(SP)		; ПС
L11112:	CLR	-(SP)			;
L11114:	CALL	L52224			; вывод символа
L11120:	MOV	#L40504, -(SP)		; строка "С к е л е т ы . . ."
	MOV	#000030, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
; FOR 000020(R5):=1 TO (R5)
L11136:	MOV	R5, R0
L11140:	ADD	#000020, R0
L11144:	MOV	R0, -(SP)
L11146:	MOV	#000001, -(SP)
L11152:	MOV	(R5), -(SP)
L11154:	MOV	000002(SP), @000004(SP)
L11162:	CMP	@000004(SP), (SP)
L11166:	BLE	L11174
L11170:	JMP	L11314
; FOR 000016(R5):=32. TO 127.
L11174:	MOV	R5, R0
L11176:	ADD	#000016, R0
L11202:	MOV	R0, -(SP)
L11204:	MOV	#000040, -(SP)
L11210:	MOV	#000177, -(SP)
L11214:	MOV	000002(SP), @000004(SP)
L11222:	CMP	@000004(SP), (SP)
L11226:	BLE	L11234
L11230:	JMP	L11300
; 000004(R5):=L01046(0,8.)
L11234:	CLR	-(SP)
L11236:	CLR	-(SP)
L11240:	MOV	#000010, -(SP)
L11244:	CALL	L01046
L11250:	MOV	(SP)+, R0
L11252:	MOV	R0, 000004(R5)		; Этаж
;
L11256:	CLR	-(SP)
L11260:	MOVB	000016(R5), (SP)
L11264:	CALL	L05702
L11270:	INC	@000004(SP)
L11274:	JMP	L11222
L11300:	ADD	#000006, SP		; завершение FOR
L11304:	INC	@000004(SP)
L11310:	JMP	L11162
L11314:	ADD	#000006, SP		; завершение цикла
;
L11320:	MOV	#000015, -(SP)		; ПС
L11324:	CLR	-(SP)			;
L11326:	CALL	L52224			; вывод символа
L11332:	MOV	#L40536, -(SP)		; строка "a-a-a-a-a-a-a-a-a-a-a-a-a . . . . . . ."
	MOV	#000050, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
; FOR 000004(R4):=0 TO 8.
L11350:	MOV	R5, R0
L11352:	ADD	#000004, R0
L11356:	MOV	R0, -(SP)
L11360:	CLR	-(SP)
L11362:	MOV	#000010, -(SP)
L11366:	MOV	000002(SP), @000004(SP)
L11374:	CMP	@000004(SP), (SP)
L11400:	BLE	L11406
L11402:	JMP	L11446
;
L11406:	MOV	#000136, -(SP)		; 94.
L11412:	CALL	L05702
L11416:	MOV	#000052, -(SP)		; 42.
L11422:	CALL	L05702
L11426:	MOV	#000045, -(SP)		; 37.
L11432:	CALL	L05702
L11436:	INC	@000004(SP)
L11442:	JMP	L11374
L11446:	ADD	#000006, SP		; завершение цикла FOR
;
L11452:	MOV	#000010, 000004(R5)	; Этаж = 8.
L11460:	MOV	#000045, -(SP)		; .37
L11464:	CALL	L05702
L11470:	MOV	#000054, -(SP)		; 44.
L11474:	CALL	L05702
; IF (R5) = 1
L11500:	CMP	(R5), #000001		; первое подземелье?
L11504:	BEQ	L11512			; да
L11506:	JMP	L11762			; нет
; FOR 000016(R5):=1 TO 6
L11512:	MOV	R5, R0
L11514:	ADD	#000016, R0
L11520:	MOV	R0, -(SP)
L11522:	MOV	#000001, -(SP)
L11526:	MOV	#000006, -(SP)
L11532:	MOV	000002(SP), @000004(SP)
L11540:	CMP	@000004(SP), (SP)
L11544:	BLE	L11552
L11546:	JMP	L11576
; RUKSAK[000016(R5)]:='.'
L11552:	MOV	R5, R0
L11554:	ADD	000016(R5), R0
L11560:	MOVB	#000056, 033077(R0)	; '.'
L11566:	INC	@000004(SP)
L11572:	JMP	L11540
L11576:	ADD	#000006, SP		; завершение FOR
; Начальное заполнение рюкзака
L11602:	MOVB	#000135, 033100(R5)	; ']'
L11610:	MOVB	#000050, 033101(R5)	; '('
L11616:	MOVB	#000074, 033102(R5)	; '<'
; FOR 000016(R5):=1 TO 5
L11624:	MOV	R5, R0
L11626:	ADD	#000016, R0
L11632:	MOV	R0, -(SP)
L11634:	MOV	#000001, -(SP)
L11640:	MOV	#000005, -(SP)
L11644:	MOV	000002(SP), @000004(SP)
L11652:	CMP	@000004(SP), (SP)
L11656:	BLE	L11664
L11660:	JMP	L11710
; 000054(R5)[000016(R5)]:=0 -- очищаем индикаторы
L11664:	MOV	000016(R5), R0
L11670:	ASL	R0
L11672:	ADD	R5, R0
L11674:	CLR	000054(R0)
L11700:	INC	@000004(SP)
L11704:	JMP	L11652
L11710:	ADD	#000006, SP		; завершение FOR
; Инициализация переменных
L11714:	MOV	#25., 000060(R5)	; Энергия = 25.
L11722:	CLRB	000047(R5)
L11726:	CLRB	000051(R5)
L11732:	CLRB	000050(R5)
L11736:	CLR	000040(R5)
L11742:	MOV	#400., 000032(R5)	; 400.
L11750:	CLR	000026(R5)		; Усталость = 0
L11754:	MOVB	#000001, 033156(R5)	; -> (113174)
; END IF
; FOR 000016(R5):=1 TO 6
L11762:	MOV	R5, R0
L11764:	ADD	#000016, R0		; адрес для 000016(R5)
L11770:	MOV	R0, -(SP)
L11772:	MOV	#000001, -(SP)
L11776:	MOV	#000006, -(SP)
L12002:	MOV	000002(SP), @000004(SP)
L12010:	CMP	@000004(SP), (SP)
L12014:	BLE	L12022
L12016:	JMP	L12070
; 033104(R0) := L01046(0,8191) & ~002000;
L12022:	MOV	000016(R5), R0
L12026:	ASL	R0
L12030:	ADD	R5, R0
L12032:	CLR	-(SP)
L12034:	CLR	-(SP)
L12036:	MOV	#017777, -(SP)
L12042:	CALL	L01046
L12046:	MOV	(SP)+, R1
L12050:	BIC	#002000, R1
L12054:	MOV	R1, 033104(R0)
L12060:	INC	@000004(SP)
L12064:	JMP	L12010
L12070:	ADD	#000006, SP		; завершение FOR
;
L12074:	CLRB	000046(R5)
; FOR 000016(R5):=1 TO 4
L12100:	MOV	R5, R0
L12102:	ADD	#000016, R0
L12106:	MOV	R0, -(SP)
L12110:	MOV	#000001, -(SP)
L12114:	MOV	#000004, -(SP)
L12120:	MOV	000002(SP), @000004(SP)
L12126:	CMP	@000004(SP), (SP)
L12132:	BLE	L12140
L12134:	JMP	L12164
;
L12140:	MOV	R5, R0
L12142:	ADD	000016(R5), R0
L12146:	MOVB	#000040, 033121(R0)	; ' '
L12154:	INC	@000004(SP)
L12160:	JMP	L12126
L12164:	ADD	#000006, SP		; завершение FOR
;
L12170:	CLR	000004(R5)		; Этаж = 0
;
L12174:	MOV	#000112, -(SP)		; 'J'
L12200:	CALL	L03362			; обновить экран
L12204:	CALL	L01320			; очистить строки под сообщения
L12210:	MOV	#L40610, -(SP)		; строка "Прогнивший пол провалился..."
	MOV	#000034, -(SP)		; длина строки = 28.
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L12226:	CLR	000002(R5)
L12232:	MOV	#000002, 000012(R5)	; Позиция Y игрока = 2
L12240:	MOV	#000002, 000014(R5)	; Позиция X игрока = 2
L12246:	MOV	#000001, 000030(R5)	; Вредность = 1
; WHILE TRUE DO -- начало игрового цикла
L12254:	TSTB	#000001
L12260:	BNE	L12266
L12262:	JMP	L40120			; (никогда не выполняется) на конец игрового цикла
;
L12266:	MOV	000004(R5), R0		; Этаж
L12272:	SWAB	R0
L12274:	BIC	#000377, R0
L12300:	ASL	R0
L12302:	ADD	R5, R0
L12304:	MOV	000012(R5), R1		; Позиция Y игрока
L12310:	ASL	R1
L12312:	ASL	R1
L12314:	ASL	R1
L12316:	ASL	R1
L12320:	ASL	R1
L12322:	ADD	R0, R1
L12324:	ADD	000014(R5), R1		; Позиция X игрока
L12330:	ADD	#000027, R1
L12334:	MOV	R1, 011070(R5)		; сохраняем адрес
;
L12340:	MOV	000004(R5), R0		; Этаж
L12344:	SWAB	R0
L12346:	BIC	#000377, R0
L12352:	ASL	R0
L12354:	ASL	R0
L12356:	ADD	R5, R0
L12360:	MOV	000012(R5), R1		; Позиция Y игрока
L12364:	ASL	R1
L12366:	ASL	R1
L12370:	ASL	R1
L12372:	ASL	R1
L12374:	ASL	R1
L12376:	ASL	R1
L12400:	ADD	R0, R1
L12402:	MOV	000014(R5), R0		; Позиция X игрока
L12406:	ASL	R0
L12410:	ADD	R1, R0
L12412:	ADD	#010772, R0
L12416:	MOV	R0, 033074(R5)
; FOR 000016(R5):=-1 TO 1
L12422:	MOV	R5, R0
L12424:	ADD	#000016, R0
L12430:	MOV	R0, -(SP)
L12432:	MOV	#177777, -(SP)
L12436:	MOV	#000001, -(SP)
L12442:	MOV	000002(SP), @000004(SP)
L12450:	CMP	@000004(SP), (SP)
L12454:	BLE	L12462
L12456:	JMP	L17774
; FOR 000020(R5):=-1 TO 1
L12462:	MOV	R5, R0
L12464:	ADD	#000020, R0
L12470:	MOV	R0, -(SP)
L12472:	MOV	#177777, -(SP)
L12476:	MOV	#000001, -(SP)
L12502:	MOV	000002(SP), @000004(SP)
L12510:	CMP	@000004(SP), (SP)
L12514:	BLE	L12522
L12516:	JMP	L17760
;
L12522:	MOV	000012(R5), R0		; Позиция Y игрока
L12526:	ADD	000016(R5), R0
L12532:	MOV	R0, 000006(R5)		; -> новый Y
L12536:	MOV	000014(R5), R0		; Позиция X игрока
L12542:	ADD	000020(R5), R0
L12546:	MOV	R0, 000010(R5)		; -> новый X
;
L12552:	MOV	000004(R5), R0		; номер этажа
L12556:	SWAB	R0			; нижний байт в верхний
L12560:	BIC	#000377, R0		; оставляем верхний байт
L12564:	ASL	R0			; получили R0 = значение 000004(R5) * 512
L12566:	ADD	R5, R0
L12570:	MOV	000006(R5), R1		; берём новый Y
L12574:	ASL	R1
L12576:	ASL	R1
L12600:	ASL	R1
L12602:	ASL	R1
L12604:	ASL	R1			; * 32.
L12606:	ADD	R0, R1
L12610:	ADD	000010(R5), R1		; + новый X
L12614:	ADD	#000027, R1
L12620:	MOV	R1, 011072(R5)
;
L12624:	MOV	000004(R5), R0		; Этаж
L12630:	SWAB	R0
L12632:	BIC	#000377, R0
L12636:	ASL	R0
L12640:	ASL	R0
L12642:	ADD	R5, R0
L12644:	MOV	000006(R5), R1		; Новый Y игрока
L12650:	ASL	R1
L12652:	ASL	R1
L12654:	ASL	R1
L12656:	ASL	R1
L12660:	ASL	R1
L12662:	ASL	R1			; * 64
L12664:	ADD	R0, R1
L12666:	MOV	000010(R5), R0		; Новый X игрока
L12672:	ASL	R0
L12674:	ADD	R1, R0
L12676:	ADD	#010772, R0
L12702:	MOV	R0, 033076(R5)
; Начало CASE
L12706:	MOVB	@011072(R5), R0
L12712:	SUB	#000040, R0		; вычитаем основание CASE = 32. = ' '
L12716:	BGE	L12724			; результат больше или равен 0?
L12720:	JMP	L17302			; вне диапазона => на CASE ELSE
L12724:	CMP	#000136, R0		; <= 94. ? // 126. - 32. = 94.
L12730:	BGE	L12736			; да => переход
L12732:	JMP	L17302			; вне диапазона => на CASE ELSE
L12736:	ASL	R0			; удваиваем
L12740:	JMP	@L17452(R0)		; переходим по таблице
; Case '%' - лестница
L12744:	MOV	#L40646, -(SP)		; строка "Лестница."
	MOV	#000011, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L12762:	JMP	L17750
; Case '*' - золото
L12766:	MOV	#L40660, -(SP)		; строка "Золото."
	MOV	#000007, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L13004:	JMP	L17750
; Case ',' - Волшебная кирка либо Золотой шар
L13010:	CMP	000004(R5), #000010	; этаж = 8. ?
L13016:	BEQ	L13024
L13020:	JMP	L13054
; THEN
L13024:	MOV	#L40670, -(SP)		; строка "Золотой шар!!!"
	MOV	#000016, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L13042:	MOVB	#000001, 000046(R5)
L13050:	JMP	L13072
; ELSE
L13054:	MOV	#L40710, -(SP)		; строка "Волшебная кирка."
	MOV	#000020, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L13072:	JMP	L17750
; Case '$','+'
L13076:	MOV	#L40732, -(SP)		; строка "Бутылка с надписью "Drink me!"
	MOV	#000036, -(SP)		; длина строки
	CLR	-(SP)
	CALL	$B32			; вывод строки
L13114:	CALL	$B36			; CR LF
L13120:	JMP	L17750
; Case ' '
L13124:	MOV	#L40772, -(SP)		; строка "Черная дыра"
	MOV	#000013, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L13142:	CALL	$B36			; CR LF
; IF
L13146:	TST	000016(R5)
L13152:	BEQ	L13160
L13154:	CLR	R0
L13156:	BR	L13164
L13160:	MOV	#000001, R0
L13164:	TST	000020(R5)
L13170:	BEQ	L13176
L13172:	CLR	R1
L13174:	BR	L13202
L13176:	MOV	#000001, R1
L13202:	COMB	R1
L13204:	BICB	R1, R0
L13206:	BNE	L13214
L13210:	JMP	L13336
; THEN; IF
L13214:	TSTB	000046(R5)
L13220:	BNE	L13226
L13222:	JMP	L13250
; IF
L13226:	TST	000004(R5)		; Этаж
L13232:	BGT	L13240
L13234:	JMP	L13244
L13240:	DEC	000004(R5)		; Этаж вниз
L13244:	JMP	L13270
; ELSE
L13250:	CMP	000004(R5), #000010	; Этаж < 8. ?
L13256:	BLT	L13264
L13260:	JMP	L13270
L13264:	INC	000004(R5)		; Этаж вверх
; END IF
L13270:	ADD	#177775, 000060(R5)	; Энергия минус 3
L13276:	ADD	#000007, 000030(R5)	; Вредность увеличиваем на 7
L13304:	MOV	#000112, -(SP)		; 'J'
L13310:	CALL	L03362			; обновить экран
L13314:	MOV	#L41006, -(SP)		; строка "Ой, как больно!..."
	MOV	#000022, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L13332:	CALL	$B36			; CR LF
L13336:	JMP	L17750
; Case '='
L13342:	MOV	#L41032, -(SP)		; строка "Кольцо."
	MOV	#000007, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L13360:	JMP	L17750
; Case '^'; IF
L13364:	TST	000016(R5)
L13370:	BEQ	L13376
L13372:	CLR	R0
L13374:	BR	L13402
L13376:	MOV	#000001, R0
L13402:	TST	000020(R5)
L13406:	BEQ	L13414
L13410:	CLR	R1
L13412:	BR	L13420
L13414:	MOV	#000001, R1
L13420:	COMB	R1
L13422:	BICB	R1, R0
L13424:	BNE	L13432
L13426:	JMP	L13534
; THEN
L13432:	MOV	#L41042, -(SP)		; строка "Ведьмин студень!"
	MOV	#000020, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L13450:	CALL	$B36			; CR LF
L13454:	CLR	-(SP)
L13456:	MOV	#000003, -(SP)
L13462:	MOV	#000017, -(SP)		; 15.
L13466:	CALL	L01046
L13472:	MOV	(SP)+, R0
L13474:	SUB	R0, 000060(R5)		; Энергия уменьшается
L13500:	CLR	-(SP)
L13502:	CLR	-(SP)
L13504:	MOV	#000005, -(SP)
L13510:	CALL	L01046
L13514:	MOV	(SP)+, R0
L13516:	ADD	000030(R5), R0
L13522:	MOV	R0, 000030(R5)
L13526:	MOV	#000004, @033076(R5)
L13534:	JMP	L17750
; Case '#' - зарастающий проход
L13540:	TST	000016(R5)
L13544:	BEQ	L13552
L13546:	CLR	R0
L13550:	BR	L13556
L13552:	MOV	#000001, R0
L13556:	TST	000020(R5)
L13562:	BEQ	L13570
L13564:	CLR	R1
L13566:	BR	L13574
L13570:	MOV	#000001, R1
L13574:	COMB	R1
L13576:	BICB	R1, R0
L13600:	BNE	L13606
L13602:	JMP	L13660
; THEN; IF
L13606:	CLR	-(SP)
L13610:	MOV	#000001, -(SP)
L13614:	MOV	#000002, -(SP)
L13620:	CALL	L01046
L13624:	MOV	(SP)+, R0
L13626:	CMP	R0, #000001
L13632:	BEQ	L13640
L13634:	JMP	L13652
; THEN
L13640:	MOVB	#000041, @011070(R5)	; '!'
L13646:	JMP	L13660
L13652:	MOVB	#000055, @011070(R5)	; '-'
L13660:	JMP	L17750
; Case '(',')'
L13664:	MOV	#L41064, -(SP)		; строка "Доспехи."
	MOV	#000010, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L13702:	JMP	L17750
; Case '[',']'
L13706:	MOV	#L41076, -(SP)		; строка "Оружие."
	MOV	#000007, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L13724:	JMP	L17750
; Case '?'
L13730:	MOV	#L41106, -(SP)		; строка "Свисток."
	MOV	#000010, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L13746:	JMP	L17750
; Case ':',';'
L13752:	MOV	#L41120, -(SP)		; строка "Еда!!!"
	MOV	#000006, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L13770:	JMP	L17750
; Case '\'
L13774:	MOV	#L41130, -(SP)		; строка ""ВП"."
	MOV	#000005, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L14012:	JMP	L17750
; Case '<','>'
L14016:	MOV	#L41136, -(SP)		; строка "Батареи."
	MOV	#000010, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L14034:	JMP	L17750
; Case '\"','\'' - кавычки и апостроф
L14040:	MOV	#L41150, -(SP)		; строка "Комариная плешь"
	MOV	#000017, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L14056:	CALL	$B36			; CR LF
L14062:	MOV	000006(R5), 000012(R5)
L14070:	MOV	000010(R5), 000014(R5)
L14076:	MOV	000004(R5), R0		; Этаж
L14102:	SWAB	R0
L14104:	BIC	#000377, R0
L14110:	ASL	R0
L14112:	ADD	R5, R0
L14114:	MOV	000012(R5), R1
L14120:	ASL	R1
L14122:	ASL	R1
L14124:	ASL	R1
L14126:	ASL	R1
L14130:	ASL	R1
L14132:	ADD	R0, R1
L14134:	ADD	000014(R5), R1
L14140:	ADD	#000027, R1
L14144:	MOV	R1, 011070(R5)
L14150:	MOV	000004(R5), R0		; Этаж
L14154:	SWAB	R0
L14156:	BIC	#000377, R0
L14162:	ASL	R0
L14164:	ASL	R0
L14166:	ADD	R5, R0
L14170:	MOV	000012(R5), R1
L14174:	ASL	R1
L14176:	ASL	R1
L14200:	ASL	R1
L14202:	ASL	R1
L14204:	ASL	R1
L14206:	ASL	R1
L14210:	ADD	R0, R1
L14212:	MOV	000014(R5), R0
L14216:	ASL	R0
L14220:	ADD	R1, R0
L14222:	ADD	#010772, R0
L14226:	MOV	R0, 033074(R5)
;
L14232:	TSTB	000046(R5)
L14236:	BNE	L14244
L14240:	JMP	L14252
L14244:	MOVB	#000056, @011070(R5)	; '.'
L14252:	JMP	L17750
; Case '&'
L14256:	MOV	#L41170, -(SP)		; строка "Папирус."
	MOV	#000010, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L14274:	JMP	L17750
; Case 'C','H','J','T'
L14300:	MOV	#000007, -(SP)		; bell
L14304:	CLR	-(SP)
L14306:	CALL	L52224			; вывод символа
L14312:	MOV	#L41202, -(SP)		; строка "Холодная, скользкая рука схватила вас за ногу ..."
	MOV	#000061, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L14330:	CALL	$B36			; CR LF
L14334:	CLR	-(SP)
L14336:	MOV	#000002, -(SP)
L14342:	MOV	#000010, -(SP)
L14346:	CALL	L01046
L14352:	MOV	(SP)+, R0
L14354:	SUB	R0, 000060(R5)		; Энергия уменьшается
L14360:	MOVB	#000056, @011072(R5)	; '.'
L14366:	JMP	L17750
; Case 'D','E','F','G','I','K','L','M','N','O','P','Q','R','S','U','V','W','X','Y','Z'
L14372:	TST	000016(R5)
L14376:	BEQ	L14404
L14400:	CLR	R0
L14402:	BR	L14410
L14404:	MOV	#000001, R0
L14410:	TST	000020(R5)
L14414:	BEQ	L14422
L14416:	CLR	R1
L14420:	BR	L14426
L14422:	MOV	#000001, R1
L14426:	COMB	R1
L14430:	BICB	R1, R0
L14432:	BNE	L14440
L14434:	JMP	L15572
; THEN; IF
L14440:	MOV	@033074(R5), R0
L14444:	BIC	#177771, R0
L14450:	BEQ	L14456
L14452:	JMP	L14520
; THEN
L14456:	MOV	@033076(R5), R0
L14462:	BIS	#000006, R0
L14466:	MOV	R0, @033076(R5)
L14472:	MOV	#L41264, -(SP)		; строка "Ну, сейчас он вам покажет..."
	MOV	#000034, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L14510:	CALL	$B36			; CR LF
L14514:	JMP	L15566
; ELSE IF
L14520:	MOV	@033076(R5), R0
L14524:	BIC	#177771, R0
L14530:	CMP	R0, #000002
L14534:	BEQ	L14542
L14536:	JMP	L15100
; THEN
L14542:	CLR	-(SP)
L14544:	MOV	#000001, -(SP)
L14550:	MOV	#000003, -(SP)
L14554:	CALL	L01046
L14560:	MOV	(SP)+, R0
L14562:	ADD	#177776, R0
L14566:	ADD	000012(R5), R0		; Позиция Y игрока
L14572:	MOV	R0, 000022(R5)
L14576:	CLR	-(SP)
L14600:	MOV	#000001, -(SP)
L14604:	MOV	#000003, -(SP)
L14610:	CALL	L01046
L14614:	MOV	(SP)+, R0
L14616:	ADD	#177776, R0
L14622:	ADD	000014(R5), R0
L14626:	MOV	R0, 000024(R5)
;
L14632:	MOV	000004(R5), R0		; Этаж
L14636:	SWAB	R0
L14640:	BIC	#000377, R0
L14644:	ASL	R0
L14646:	ADD	R5, R0
L14650:	MOV	000022(R5), R1
L14654:	ASL	R1
L14656:	ASL	R1
L14660:	ASL	R1
L14662:	ASL	R1
L14664:	ASL	R1
L14666:	ADD	R0, R1
L14670:	ADD	000024(R5), R1
L14674:	MOV	#L50222, -(SP)		; множество ['!','-']
L14700:	CALL	L53634			; PSHSET
L14704:	CLR	-(SP)
L14706:	MOVB	000027(R1), (SP)
L14712:	SUB	#000040, (SP)
L14716:	CALL	L53452			; DOIN
L14722:	BEQ	L14730
L14724:	JMP	L15074
;
L14730:	MOVB	@011070(R5), 000053(R5)
L14736:	MOVB	#000056, @011070(R5)	; '.'
L14744:	MOV	000004(R5), R0		; Этаж
L14750:	SWAB	R0
L14752:	BIC	#000377, R0
L14756:	ASL	R0
L14760:	ADD	R5, R0
L14762:	MOV	000022(R5), R1
L14766:	ASL	R1
L14770:	ASL	R1
L14772:	ASL	R1
L14774:	ASL	R1
L14776:	ASL	R1
L15000:	ADD	R0, R1
L15002:	ADD	000024(R5), R1
L15006:	MOVB	000053(R5), 000027(R1)
L15014:	MOV	000004(R5), R0		; Этаж
L15020:	SWAB	R0
L15022:	BIC	#000377, R0
L15026:	ASL	R0
L15030:	ASL	R0
L15032:	ADD	R5, R0
L15034:	MOV	000022(R5), R1
L15040:	ASL	R1
L15042:	ASL	R1
L15044:	ASL	R1
L15046:	ASL	R1
L15050:	ASL	R1
L15052:	ASL	R1
L15054:	ADD	R0, R1
L15056:	MOV	000024(R5), R0
L15062:	ASL	R0
L15064:	ADD	R1, R0
L15066:	MOV	@033074(R5), 010772(R0)
L15074:	JMP	L15566
; ELSE IF NOT 000051(R5)
L15100:	MOVB	000051(R5), R0
L15104:	COMB	R0
L15106:	BICB	#177776, R0
L15112:	BNE	L15120
L15114:	JMP	L15566
; THEN; IF NOT 000050(R5)
L15120:	MOVB	000050(R5), R0
L15124:	COMB	R0
L15126:	BICB	#177776, R0
L15132:	BNE	L15140
L15134:	JMP	L15270
; THEN; IF 000064(R5) > 1
L15140:	CMP	000064(R5), #000001
L15146:	BGT	L15154
L15150:	JMP	L15204
; THEN
L15154:	CLR	-(SP)
L15156:	MOV	#000002, -(SP)
L15162:	MOV	#000017, -(SP)
L15166:	CALL	L01046
L15172:	MOV	(SP)+, R0
L15174:	SUB	R0, 000064(R5)
L15200:	JMP	L15230
; ELSE
L15204:	CLR	-(SP)
L15206:	MOV	#000002, -(SP)
L15212:	MOV	#000017, -(SP)
L15216:	CALL	L01046
L15222:	MOV	(SP)+, R0
L15224:	SUB	R0, 000060(R5)		; Энергия уменьшается
; END IF
L15230:	MOV	#000007, -(SP)		; bell
L15234:	CLR	-(SP)
L15236:	CALL	L52224			; вывод символа
L15242:	MOV	#L41322, -(SP)		; строка "Защищайтесь же!!!"
	MOV	#000021, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L15260:	CALL	$B36			; CR LF
L15264:	JMP	L15566
; ELSE
L15270:	CLR	-(SP)
L15272:	MOV	#000002, -(SP)
L15276:	MOV	#000013, -(SP)
L15302:	CALL	L01046
L15306:	MOV	(SP)+, R0
L15310:	SUB	R0, 000062(R5)
L15314:	ADD	#177776, 000064(R5)
L15322:	CLRB	000050(R5)
L15326:	MOVB	#000056, 000054(R5)
L15334:	MOV	#000007, -(SP)
L15340:	CLR	-(SP)
L15342:	CALL	L52224			; вывод символа
L15346:	MOV	#L41344, -(SP)		; строка "Готов!"
	MOV	#000006, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L15364:	CALL	$B36			; CR LF
L15370:	ADD	#000012, 000056(R5)
; IF 000064(R5) < 0
L15376:	TST	000064(R5)
L15402:	BLT	L15410
L15404:	JMP	L15422
; THEN
L15410:	ADD	000064(R5), 000060(R5)	; Энергия плюс
L15416:	CLR	000064(R5)
; END IF; IF
L15422:	TST	000062(R5)
L15426:	BLT	L15434
L15430:	JMP	L15446
; THEN
L15434:	ADD	000062(R5), 000056(R5)
L15442:	CLR	000062(R5)
; END IF
L15446:	MOV	#000001, 000016(R5)
; WHILE
L15454:	MOV	R5, R0
L15456:	ADD	000016(R5), R0
L15462:	CMPB	033121(R0), @011070(R5)
L15470:	BNE	L15476
L15472:	CLR	R0
L15474:	BR	L15502
L15476:	MOV	#000001, R0
L15502:	CMP	000016(R5), #000004
L15510:	BLT	L15516
L15512:	CLR	R1
L15514:	BR	L15522
L15516:	MOV	#000001, R1
L15522:	COMB	R1
L15524:	BICB	R1, R0
L15526:	BNE	L15534
L15530:	JMP	L15544
; тело цикла
L15534:	INC	000016(R5)
L15540:	JMP	L15454
; END WHILE
L15544:	MOV	R5, R0
L15546:	ADD	000016(R5), R0
L15552:	MOVB	#000040, 033121(R0)
L15560:	MOVB	#000155, @011070(R5)		; 'm'
L15566:	JMP	L15612
; ELSE
L15572:	MOV	000004(R5), -(SP)		; этаж
L15576:	MOV	000006(R5), -(SP)		; Новый Y игрока
L15602:	MOV	000010(R5), -(SP)		; Новый X игрока
L15606:	CALL	L02574
L15612:	JMP	L17750
; Case '0','2','3','4','5','6','7','8','9','{','}'
L15616:	TST	000016(R5)
L15622:	BEQ	L15630
L15624:	CLR	R0
L15626:	BR	L15634
L15630:	MOV	#000001, R0
L15634:	TST	000020(R5)
L15640:	BEQ	L15646
L15642:	CLR	R1
L15644:	BR	L15652
L15646:	MOV	#000001, R1
L15652:	COMB	R1
L15654:	BICB	R1, R0
L15656:	BNE	L15664
L15660:	JMP	L16020
; THEN
L15664:	CLR	-(SP)
L15666:	MOV	#177771, -(SP)
L15672:	MOV	#000007, -(SP)
L15676:	CALL	L01046
L15702:	MOV	(SP)+, R0
L15704:	MOV	R0, 000022(R5)
L15710:	ADD	000022(R5), 000060(R5)
; IF
L15716:	TST	000022(R5)
L15722:	BGT	L15730
L15724:	JMP	L15764
; THEN
L15730:	MOV	#L41354, -(SP)		; строка "Недурственно!"
	MOV	#000015, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L15746:	CALL	$B36			; CR LF
L15752:	MOVB	#000172, @011070(R5)	; 'z'
L15760:	JMP	L16014
; ELSE
L15764:	MOV	#L41372, -(SP)		; строка "Тьфу..."
	MOV	#000007, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L16002:	CALL	$B36			; CR LF
L16006:	MOVB	#000171, @011072(R5)
L16014:	JMP	L16042
L16020:	MOV	#L41402, -(SP)		; строка "Свертoк. съедим?"
	MOV	#000020, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L16036:	CALL	$B36			; CR LF
L16042:	JMP	L17750
; Case '!','-','.' - Стенки и пустая клетка
L16046:	JMP	L17750
; Case 'b'
L16052:	MOV	#L41424, -(SP)		; строка "Надпись "Здесь был Вася"(здесь Вася и остался)
	MOV	#000056, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L16070:	CALL	$B36			; CR LF
L16074:	JMP	L17750
; Case 'c'
L16100:	MOV	#L41504, -(SP)		; строка "Груда камней."
	MOV	#000015, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L16116:	JMP	L17750
; Case 'd'
L16122:	MOV	#L41522, -(SP)		; строка "Метла бабы яги (сломана)"
	MOV	#000030, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
L16144:	JMP	L17750
; Case 'e'
L16150:	MOV	#L41554, -(SP)		; строка "Череп."
	MOV	#000006, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L16166:	JMP	L17750
; Case 'f'
L16172:	MOV	#L41564, -(SP)		; строка "Странствующий скелет"
	MOV	#000024, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
L16214:	JMP	L17750
; Case 'g'
L16220:	MOV	#L41612, -(SP)		; строка "Стадо бродячих живых трупов."
	MOV	#000035, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
L16242:	JMP	L17750
; Case 'h'
L16246:	MOV	#L41650, -(SP)		; строка "Кусочек Ноева ковчега"
	MOV	#000025, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
L16270:	JMP	L17750
; Case 'i'
L16274:	MOV	#L41676, -(SP)		; строка "Записка:" Зря ты сюда полез, парень... Автор. "
	MOV	#000057, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
L16316:	JMP	L17750
; Case 'j'
L16322:	MOV	#L41756, -(SP)		; строка "Черный ящик."
	MOV	#000014, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L16340:	JMP	L17750
; Case 'k'
L16344:	MOV	#L41774, -(SP)		; строка "Лужа машинного масла"
	MOV	#000024, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
L16366:	JMP	L17750
; Case 'l'
L16372:	MOV	#L42022, -(SP)		; строка "Раздолбанный компьютер ZX SPECTRUM - 128."
	MOV	#000055, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
L16414:	JMP	L17750
; Case 'm'
L16420:	MOV	#L42100, -(SP)		; строка "Дохлый морлок"
	MOV	#000015, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L16436:	JMP	L17750
; Case 'n'
L16442:	MOV	#L42116, -(SP)		; строка "Зуда."
	MOV	#000005, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L16460:	JMP	L17750
; Case 'o'
L16464:	MOV	#L42124, -(SP)		; строка "Пустышка."
	MOV	#000011, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L16502:	JMP	L17750
; Case 'p'
L16506:	MOV	#L42136, -(SP)		; строка "Куча сепулек."
	MOV	#000015, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L16524:	JMP	L17750
; Case 'r'
L16530:	MOV	#L42154, -(SP)		; строка "Разложившийся труп девушки."
	MOV	#000040, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
L16552:	JMP	L17750
; Case 's'
L16556:	MOV	#L42216, -(SP)		; строка "Надпись: "Мы до тебя еще доберемся!!! "
	MOV	#000051, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
L16600:	JMP	L17750
; Case 't'
L16604:	MOV	#L42270, -(SP)		; строка "Отрезанная голова предыдущего Сталкера."
	MOV	#000071, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
L16626:	JMP	L17750
; Case 'u'
L16632:	MOV	#L42362, -(SP)		; строка "Зачитанный журнал "АКУШЕРСТВО И ГИНЕКОЛОГИЯ"
	MOV	#000060, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
L16654:	JMP	L17750
; Case 'v'
L16660:	MOV	#L42444, -(SP)		; строка "Артефакт."
	MOV	#000011, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L16676:	JMP	L17750
; Case 'w'
L16702:	MOV	#L42456, -(SP)		; строка "Надпись "Здесь-то мы его и съели"
	MOV	#000041, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
L16724:	JMP	L17750
; Case 'x'
L16730:	MOV	#L42520, -(SP)		; строка "Окровавленная бензопила"
	MOV	#000027, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
L16752:	JMP	L17750
; Case 'y'
L16756:	MOV	#L42550, -(SP)		; строка "Что-то очень мерзкое"
	MOV	#000024, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
L17000:	JMP	L17750
; Case 'z'
L17004:	MOV	#L42576, -(SP)		; строка "Следы пикника."
	MOV	#000016, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L17022:	JMP	L17750
; Case 'q'
L17026:	MOV	#L42616, -(SP)		; строка "Кладбище снусмумриков."
	MOV	#000037, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L17044:	CALL	$B36			; CR LF
L17050:	JMP	L17750
; Case '~'
L17054:	MOV	#L42656, -(SP)		; строка "Черт-те что."
	MOV	#000014, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L17072:	JMP	L17750
; Case '1','A','B'
L17076:	MOV	#L42674, -(SP)		; строка "Бродячий торговый автомат"
	MOV	#000031, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L17114:	CALL	$B36			; CR LF
L17120:	JMP	L17750
; Case '|'
L17124:	MOV	#L42726, -(SP)		; строка "Пережаренный зелюк."
	MOV	#000023, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L17142:	CALL	$B36			; CR LF
L17146:	JMP	L17750
; Case '`'
L17152:	MOV	#L42752, -(SP)		; строка "Мышелот (в собственном соку)"
	MOV	#000034, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L17170:	CALL	$B36			; CR LF
L17174:	JMP	L17750
; Case '@'
L17200:	MOV	#L43010, -(SP)		; строка "Призрак."
	MOV	#000010, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L17216:	CLR	-(SP)
L17220:	MOV	#000056, -(SP)
L17224:	MOV	#000056, -(SP)
L17230:	CALL	L02332			; ищем в рюкзаке
L17234:	MOV	(SP)+, R0
L17236:	MOV	R0, 000022(R5)
L17242:	CMP	000022(R5), #000007
L17250:	BLT	L17256
L17252:	JMP	L17262
L17256:	INC	000030(R5)
; RUKSAK[000022(R5)]:='@'
L17262:	MOV	R5, R0
L17264:	ADD	000022(R5), R0
L17270:	MOVB	#000100, 033077(R0)	; '@'
L17276:	JMP	L17750
; Case Else
L17302:	TST	000016(R5)
L17306:	BEQ	L17314
L17310:	CLR	R0
L17312:	BR	L17320
L17314:	MOV	#000001, R0
L17320:	TST	000020(R5)
L17324:	BEQ	L17332
L17326:	CLR	R1
L17330:	BR	L17336
L17332:	MOV	#000001, R1
L17336:	COMB	R1
L17340:	BICB	R1, R0
L17342:	BNE	L17350
L17344:	JMP	L17424
; THEN
L17350:	CLR	-(SP)
L17352:	MOV	#000040, -(SP)
L17356:	MOV	#000176, -(SP)
L17362:	CALL	L01046
L17366:	MOV	(SP)+, R0
L17370:	MOVB	R0, @011070(R5)
L17374:	CLR	-(SP)
L17376:	MOV	#000001, -(SP)
L17402:	MOV	#017777, -(SP)
L17406:	CALL	L01046
L17412:	MOV	(SP)+, R0
L17414:	MOV	R0, @033074(R5)
L17420:	JMP	L17446
; ELSE
L17424:	MOV	#L43022, -(SP)		; строка "Мешок с надписью "Take me!"
	MOV	#000033, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L17442:	CALL	$B36			; CR LF
L17446:	JMP	L17750
; Таблица адресов переходов для CASE - см. перехо L12740, 95. адресов
L17452:	.WORD	L13124,L16046,L14040,L13540,L13076,L12744,L14256,L14040	; ' '..'\''
	.WORD	L13664,L13664,L12766,L13076,L13010,L16046,L16046,L13774	; '('..'/'
	.WORD	L15616,L17076,L15616,L15616,L15616,L15616,L15616,L15616	; '0'..'7'
	.WORD	L15616,L15616,L13752,L13752,L14016,L13342,L14016,L13730	; '8'..'?'
	.WORD	L17200,L17076,L17076,L14300,L14372,L14372,L14372,L14372	; '@'..'G'
	.WORD	L14300,L14372,L14300,L14372,L14372,L14372,L14372,L14372	; 'H'..'O'
	.WORD	L14372,L14372,L14372,L14372,L14300,L14372,L14372,L14372	; 'P'..'W'
	.WORD	L14372,L14372,L14372,L13706,L13774,L13706,L13364,L17302	; 'X'..'_'
	.WORD	L17152,L17302,L16052,L16100,L16122,L16150,L16172,L16220	; '`'..'g'
	.WORD	L16246,L16274,L16322,L16344,L16372,L16420,L16442,L16464	; 'h'..'o'
	.WORD	L16506,L17026,L16530,L16556,L16604,L16632,L16660,L16702	; 'p'..'w'
	.WORD	L16730,L16756,L17004,L15616,L17124,L15616,L17054	; 'x'..'~'
; Сюда приходим после CASE
L17750:	INC	@000004(SP)
L17754:	JMP	L12510
L17760:	ADD	#000006, SP		; Завершение FOR
;
L17764:	INC	@000004(SP)
L17770:	JMP	L12450
L17774:	ADD	#000006, SP		; Завершение FOR
;
L20000:	MOVB	@011070(R5), 000054(R5)
L20006:	MOVB	#000100, @011070(R5)	; '@'
; IF 000047(R5) <> 0
L20014:	TSTB	000047(R5)		; <> 0 ?
L20020:	BNE	L20026			; да
L20022:	JMP	L20052			; нет
; THEN
L20026:	MOV	000004(R5), -(SP)	; Этаж
L20032:	MOV	000012(R5), -(SP)
L20036:	MOV	000014(R5), -(SP)
L20042:	CALL	L01460
L20046:	JMP	L20136
; ELSE
L20052:	MOV	000012(R5), -(SP)	; Позиция Y игрока
L20056:	MOV	000014(R5), -(SP)	; Позиция X игрока
L20062:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L20066:	MOV	#000100, -(SP)		; символ '@' - игрок
L20072:	CLR	-(SP)			;
L20074:	CALL	L52224			; вывод символа
L20100:	BIS	#000100, @033074(R5)
L20106:	MOV	000034(R5), -(SP)	; Y
L20112:	MOV	000036(R5), -(SP)	; X
L20116:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L20122:	CLR	-(SP)
L20124:	MOVB	000055(R5), (SP)	;
L20130:	CLR	-(SP)
L20132:	CALL	L52224			; вывод символа
; END IF
L20136:	MOVB	000054(R5), @011070(R5)
L20144:	MOV	000012(R5), 000034(R5)	; Позиция Y игрока
L20152:	MOV	000014(R5), 000036(R5)	; Позиция X игрока
L20160:	MOVB	000054(R5), 000055(R5)
;
L20166:	MOV	#000001, -(SP)		; Y = 1
L20172:	CLR	-(SP)			; X = 0
L20174:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L20200:	MOV	000004(R5), -(SP)	; Номер этажа
L20204:	MOV	#000003, -(SP)		; 3 позиции
L20210:	CALL	L52306			; вывод числа
; FOR 000016(R5):=1 TO 5
L20214:	MOV	R5, R0
L20216:	ADD	#000016, R0
L20222:	MOV	R0, -(SP)
L20224:	MOV	#000001, -(SP)
L20230:	MOV	#000005, -(SP)
L20234:	MOV	000002(SP), @000004(SP)
L20242:	CMP	@000004(SP), (SP)
L20246:	BLE	L20254
L20250:	JMP	L20336
;
L20254:	MOV	000016(R5), -(SP)	; Y
L20260:	MOV	#000045, -(SP)		; X = 37.
L20264:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L20270:	MOV	000016(R5), R0
L20274:	ASL	R0
L20276:	ADD	R5, R0
L20300:	MOV	000054(R0), -(SP)
L20304:	MOV	#000003, -(SP)
L20310:	CALL	L52306			; вывод числа
L20314:	MOV	#000040, -(SP)		; ' '
L20320:	CLR	-(SP)			;
L20322:	CALL	L52224			; вывод символа
L20326:	INC	@000004(SP)
L20332:	JMP	L20242
L20336:	ADD	#000006, SP		; завершение FOR
;
L20342:	MOV	#000007, -(SP)		; Y = 7   - вредность
L20346:	MOV	#000045, -(SP)		; X = 37.
L20352:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L20356:	MOV	000030(R5), -(SP)
L20362:	MOV	#000003, -(SP)
L20366:	CALL	L52306			; вывод числа
L20372:	MOV	#000012, -(SP)		; Y = 10.  - рюкзак
L20376:	MOV	#000041, -(SP)		; X = 33.
L20402:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
; IF
L20406:	TSTB	033156(R5)
L20412:	BNE	L20420
L20414:	JMP	L20520
; FOR 000016(R5):=1 TO 6
L20420:	MOV	R5, R0
L20422:	ADD	#000016, R0
L20426:	MOV	R0, -(SP)
L20430:	MOV	#000001, -(SP)
L20434:	MOV	#000006, -(SP)
L20440:	MOV	000002(SP), @000004(SP)
L20446:	CMP	@000004(SP), (SP)
L20452:	BLE	L20460
L20454:	JMP	L20514
; WRITE(RUKSAK[000016(R5)])
L20460:	MOV	R5, R0
L20462:	ADD	000016(R5), R0
L20466:	CLR	-(SP)
L20470:	MOVB	033077(R0), (SP)
L20474:	MOV	#000002, -(SP)
L20500:	CALL	L52224			; вывод символа
L20504:	INC	@000004(SP)
L20510:	JMP	L20446
L20514:	ADD	#000006, SP		; завершение FOR
; END IF
L20520:	CLRB	033156(R5)
L20524:	CLR	-(SP)			; Y = 0
L20526:	CLR	-(SP)			; X = 0
L20530:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
; Ввод символа - команда игрока
L20534:	MOV	R5, R0			;
L20536:	ADD	#000053, R0		; Адрес 000053(R5) - куда сохранить введённый символ
L20542:	MOV	R0, -(SP)		;
L20544:	CALL	L01166			; Ввод символа
L20550:	CALL	L01320			; очистить строки под сообщения
; Начало CASE по Последний введённый символ
L20554:	MOVB	000053(R5), R0		; Последний введённый символ
L20560:	SUB	#000056, R0		; вычитаем код '.' - база CASE
L20564:	BGE	L20572
L20566:	JMP	L35114
L20572:	CMP	#000054, R0		; 056+054 = 'Z'
L20576:	BGE	L20604
L20600:	JMP	L35114
L20604:	ASL	R0
L20606:	JMP	@035142(R0)		; переход на процедуру обработки символа
;
; '1' - влево-вниз
L20612:	MOV	#000001, -(SP)
L20616:	MOV	#177777, -(SP)
L20622:	CALL	L05370
L20626:	JMP	L35274
; '2' - вниз
L20632:	MOV	#000001, -(SP)		; +1 по Y
L20636:	CLR	-(SP)			;  0 по X
L20640:	CALL	L05370
L20644:	JMP	L35274
; '3' - вправо-вниз
L20650:	MOV	#000001, -(SP)
L20654:	MOV	#000001, -(SP)
L20660:	CALL	L05370
L20664:	JMP	L35274
; '4' - влево
L20670:	CLR	-(SP)			;  0 по Y
L20672:	MOV	#177777, -(SP)		; -1 по X
L20676:	CALL	L05370
L20702:	JMP	L35274
; '5' - вниз по лестнице
L20706:	MOV	#000065, -(SP)
L20712:	CALL	L03362			; обновить экран
L20716:	JMP	L35274
; '6' - вправо
L20722:	CLR	-(SP)			;  0 по Y
L20724:	MOV	#000001, -(SP)		; +1 по X
L20730:	CALL	L05370
L20734:	JMP	L35274
; '7' - влево-вверх
L20740:	MOV	#177777, -(SP)
L20744:	MOV	#177777, -(SP)
L20750:	CALL	L05370
L20754:	JMP	L35274
; '8' - вверх
L20760:	MOV	#177777, -(SP)		; -1 по Y
L20764:	CLR	-(SP)			;  0 по X
L20766:	CALL	L05370
L20772:	JMP	L35274
; '9' - вправо-вверх
L20776:	MOV	#177777, -(SP)
L21002:	MOV	#000001, -(SP)
L21006:	CALL	L05370
L21012:	JMP	L35274
; '0' - отдохнуть
L21016:	CLR	000026(R5)		; Усталость = 0
L21022:	JMP	L35274
; '.' - вверх по лестнице
L21026:	MOV	#000056, -(SP)
L21032:	CALL	L03362			; обновить экран
L21036:	JMP	L35274
;
; 'Q' - пить
L21042:	CLR	-(SP)
L21044:	MOV	#000044, -(SP)		; 36.
L21050:	MOV	#000053, -(SP)		; 43.
L21054:	CALL	L02332			; ищем в рюкзаке
L21060:	MOV	(SP)+, R0
L21062:	MOV	R0, 000016(R5)
; IF
L21066:	CMP	000016(R5), #000007
L21074:	BLT	L21102			; да
L21076:	JMP	L22440			; нет
;
L21102:	MOV	R5, R0
L21104:	ADD	000016(R5), R0
L21110:	MOVB	#000056, 033077(R0)	; '.'
L21116:	DEC	000030(R5)
; IF
L21122:	MOV	000016(R5), R0
L21126:	ASL	R0
L21130:	ADD	R5, R0
L21132:	MOV	033104(R0), R0
L21136:	BIC	#177771, R0		; AND 6
L21142:	BEQ	L21150			; = 0
L21144:	JMP	L21610			; <> 0
; FOR 000016(R5):=2 TO 15.
L21150:	MOV	R5, R0
L21152:	ADD	#000016, R0
L21156:	MOV	R0, -(SP)
L21160:	MOV	#000002, -(SP)
L21164:	MOV	#000017, -(SP)		; 15.
L21170:	MOV	000002(SP), @000004(SP)
L21176:	CMP	@000004(SP), (SP)
L21202:	BLE	L21210
L21204:	JMP	L21574
; FOR 000020(R5):=2 TO 31.
L21210:	MOV	R5, R0
L21212:	ADD	#000020, R0
L21216:	MOV	R0, -(SP)
L21220:	MOV	#000002, -(SP)
L21224:	MOV	#000037, -(SP)
L21230:	MOV	000002(SP), @000004(SP)
L21236:	CMP	@000004(SP), (SP)
L21242:	BLE	L21250
L21244:	JMP	L21560
; IF
L21250:	MOV	000004(R5), R0		; Этаж
L21254:	SWAB	R0
L21256:	BIC	#000377, R0
L21262:	ASL	R0
L21264:	ADD	R5, R0
L21266:	MOV	000016(R5), R1
L21272:	ASL	R1
L21274:	ASL	R1
L21276:	ASL	R1
L21300:	ASL	R1
L21302:	ASL	R1
L21304:	ADD	R0, R1
L21306:	ADD	000020(R5), R1
L21312:	CMPB	000027(R1), #000056	; '.'
L21320:	BNE	L21326
L21322:	JMP	L21550
;
L21326:	MOV	000016(R5), -(SP)
L21332:	MOV	000020(R5), -(SP)
L21336:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L21342:	MOV	000004(R5), R0		; Этаж
L21346:	SWAB	R0
L21350:	BIC	#000377, R0
L21354:	ASL	R0
L21356:	ADD	R5, R0
L21360:	MOV	000016(R5), R1
L21364:	ASL	R1
L21366:	ASL	R1
L21370:	ASL	R1
L21372:	ASL	R1
L21374:	ASL	R1
L21376:	ADD	R0, R1
L21400:	ADD	000020(R5), R1
L21404:	MOVB	000027(R1), 000053(R5)
; IF
L21412:	MOV	000004(R5), R0		; Этаж
L21416:	SWAB	R0
L21420:	BIC	#000377, R0
L21424:	ASL	R0
L21426:	ADD	R5, R0
L21430:	MOV	000016(R5), R1
L21434:	ASL	R1
L21436:	ASL	R1
L21440:	ASL	R1
L21442:	ASL	R1
L21444:	ASL	R1
L21446:	ADD	R0, R1
L21450:	ADD	000020(R5), R1
L21454:	MOV	#L50212, -(SP)		; множество ['!','#','-','.']
L21460:	CALL	L53634			; PSHSET
L21464:	CLR	-(SP)
L21466:	MOVB	000027(R1), (SP)
L21472:	SUB	#000040, (SP)
L21476:	CALL	L53452			; DOIN
L21502:	BEQ	L21510
L21504:	JMP	L21534
; THEN
L21510:	CLR	-(SP)
L21512:	MOV	#000041, -(SP)
L21516:	MOV	#000176, -(SP)
L21522:	CALL	L01046
L21526:	MOV	(SP)+, R0
L21530:	MOVB	R0, 000053(R5)
; END IF
L21534:	CLR	-(SP)
L21536:	MOVB	000053(R5), (SP)
L21542:	CLR	-(SP)
L21544:	CALL	L52224			; вывод символа
; END IF
L21550:	INC	@000004(SP)
L21554:	JMP	L21236
L21560:	ADD	#000006, SP		; завершение FOR
L21564:	INC	@000004(SP)
L21570:	JMP	L21176
L21574:	ADD	#000006, SP		; завершение FOR
L21600:	CALL	L01320			; очистить строки под сообщения
L21604:	JMP	L22434
; ELSE IF  = 2
L21610:	MOV	000016(R5), R0
L21614:	ASL	R0
L21616:	ADD	R5, R0
L21620:	MOV	033104(R0), R0
L21624:	BIC	#177771, R0
L21630:	CMP	R0, #000002
L21634:	BEQ	L21642
L21636:	JMP	L21702
;
L21642:	ADD	#000024, 000060(R5)	; Энергия плюс 20. - выпил
L21650:	CLR	000026(R5)
L21654:	MOV	#L43056, -(SP)		; строка "Чувствуете прилив сил?"
	MOV	#000026, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L21672:	CALL	$B36			; CR LF
L21676:	JMP	L22434
; ELSE IF  = 4
L21702:	MOV	000016(R5), R0
L21706:	ASL	R0
L21710:	ADD	R5, R0
L21712:	MOV	033104(R0), R0
L21716:	BIC	#177771, R0
L21722:	CMP	R0, #000004
L21726:	BEQ	L21734
L21730:	JMP	L22404
; FOR 000016(R5):=2 TO 13.
L21734:	MOV	R5, R0
L21736:	ADD	#000016, R0
L21742:	MOV	R0, -(SP)
L21744:	MOV	#000002, -(SP)
L21750:	MOV	#000017, -(SP)
L21754:	MOV	000002(SP), @000004(SP)
L21762:	CMP	@000004(SP), (SP)
L21766:	BLE	L21774
L21770:	JMP	L22370
; FOR 000020(R5):=2 TO 31.
L21774:	MOV	R5, R0
L21776:	ADD	#000020, R0
L22002:	MOV	R0, -(SP)
L22004:	MOV	#000002, -(SP)
L22010:	MOV	#000037, -(SP)
L22014:	MOV	000002(SP), @000004(SP)
L22022:	CMP	@000004(SP), (SP)
L22026:	BLE	L22034
L22030:	JMP	L22354
; IF
L22034:	MOV	000004(R5), R0		; Этаж
L22040:	SWAB	R0
L22042:	BIC	#000377, R0
L22046:	ASL	R0
L22050:	ADD	R5, R0
L22052:	MOV	000016(R5), R1
L22056:	ASL	R1
L22060:	ASL	R1
L22062:	ASL	R1
L22064:	ASL	R1
L22066:	ASL	R1
L22070:	ADD	R0, R1
L22072:	ADD	000020(R5), R1
L22076:	CMPB	000027(R1), #000056	; '.'
L22104:	BNE	L22112
L22106:	JMP	L22344
;
L22112:	MOV	000016(R5), -(SP)
L22116:	MOV	000020(R5), -(SP)
L22122:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L22126:	MOV	000004(R5), R0		; Этаж
L22132:	SWAB	R0
L22134:	BIC	#000377, R0
L22140:	ASL	R0
L22142:	ADD	R5, R0
L22144:	MOV	000016(R5), R1
L22150:	ASL	R1
L22152:	ASL	R1
L22154:	ASL	R1
L22156:	ASL	R1
L22160:	ASL	R1
L22162:	ADD	R0, R1
L22164:	ADD	000020(R5), R1
L22170:	CLR	-(SP)
L22172:	MOVB	000027(R1), (SP)
L22176:	CLR	-(SP)
L22200:	CALL	L52224			; вывод символа
;
L22204:	MOV	000004(R5), R0		; Этаж
L22210:	SWAB	R0
L22212:	BIC	#000377, R0
L22216:	ASL	R0
L22220:	ASL	R0
L22222:	ADD	R5, R0
L22224:	MOV	000016(R5), R1
L22230:	ASL	R1
L22232:	ASL	R1
L22234:	ASL	R1
L22236:	ASL	R1
L22240:	ASL	R1
L22242:	ASL	R1
L22244:	ADD	R0, R1
L22246:	MOV	000020(R5), R0
L22252:	ASL	R0
L22254:	ADD	R1, R0
L22256:	MOV	000004(R5), R1		; Этаж
L22262:	SWAB	R1
L22264:	BIC	#000377, R1
L22270:	ASL	R1
L22272:	ASL	R1
L22274:	ADD	R5, R1
L22276:	MOV	000016(R5), R2
L22302:	ASL	R2
L22304:	ASL	R2
L22306:	ASL	R2
L22310:	ASL	R2
L22312:	ASL	R2
L22314:	ASL	R2
L22316:	ADD	R1, R2
L22320:	MOV	000020(R5), R1
L22324:	ASL	R1
L22326:	ADD	R2, R1
L22330:	MOV	010772(R1), R1
L22334:	BIS	#000100, R1
L22340:	MOV	R1, 010772(R0)
L22344:	INC	@000004(SP)
L22350:	JMP	L22022
L22354:	ADD	#000006, SP		; завершение FOR
;
L22360:	INC	@000004(SP)
L22364:	JMP	L21762
L22370:	ADD	#000006, SP		; завершение FOR
;
L22374:	CALL	L01320			; очистить строки под сообщения
L22400:	JMP	L22434
; ELSE
L22404:	MOV	#000024, 000040(R5)
L22412:	MOV	#L43106, -(SP)		; строка "Напился - сдай стеклотару!!!!"
	MOV	#000035, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L22430:	CALL	$B36			; CR LF
L22434:	JMP	L22462
; ELSE
L22440:	MOV	#L43144, -(SP)		; строка "Пить нечего"
	MOV	#000013, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L22456:	CALL	$B36			; CR LF
; END IF
L22462:	JMP	L35274
;
; 'D' - выбросить предмет
L22466:	MOV	#L43160, -(SP)		; строка "Что выбросить?"
	MOV	#000017, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L22504:	BIS	#040000, @#000044
L22512:	MOV	R5, R0
L22514:	ADD	#000053, R0
L22520:	MOV	R0, -(SP)		; Адрес 000053(R5)
L22522:	CALL	L01166			; Ввод символа
L22526:	BIC	#040000, @#000044
L22534:	CALL	L01320			; очистить строки под сообщения
;
L22540:	CLR	-(SP)
L22542:	CLR	-(SP)
L22544:	MOVB	000053(R5), (SP)
L22550:	CLR	-(SP)
L22552:	MOVB	000053(R5), (SP)
L22556:	CALL	L02332			; ищем в рюкзаке
L22562:	MOV	(SP)+, R0
L22564:	MOV	R0, 000016(R5)
; IF
L22570:	CMP	000016(R5), #000007
L22576:	BLT	L22604
L22600:	JMP	L22762
; THEN; IF
L22604:	MOV	000016(R5), R0
L22610:	ASL	R0
L22612:	ADD	R5, R0
L22614:	MOV	033104(R0), R0
L22620:	BIC	#175777, R0
L22624:	BEQ	L22632
L22626:	JMP	L22752
; THEN; IF
L22632:	CMPB	000053(R5), #000056	; '.'
L22640:	BNE	L22646
L22642:	JMP	L22746
; THEN
L22646:	DEC	000030(R5)
L22652:	MOV	R5, R0
L22654:	ADD	000016(R5), R0
L22660:	MOVB	#000056, 033077(R0)
; IF
L22666:	MOV	#L50202, -(SP)		; множество ['"','\'']
L22672:	CALL	L53634			; PSHSET
L22676:	CLR	-(SP)
L22700:	MOVB	@011070(R5), (SP)
L22704:	SUB	#000040, (SP)
L22710:	CALL	L53452			; DOIN
L22714:	BEQ	L22722
L22716:	JMP	L22746
;
L22722:	MOVB	000053(R5), @011070(R5)
L22730:	MOV	000016(R5), R0
L22734:	ASL	R0
L22736:	ADD	R5, R0
L22740:	MOV	033104(R0), @033074(R5)
L22746:	JMP	L22756
; ELSE
L22752:	CALL	L03306			; печатаем "На этой штуке заклятие" CR LF
L22756:	JMP	L23004
; END IF
L22762:	MOV	#L43200, -(SP)		; строка "Нету"
	MOV	#000004, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L23000:	CALL	$B36			; CR LF
L23004:	JMP	L35274
;
; 'Z' - перевести деньги в банк на счёт пещеры
L23010:	CLR	-(SP)
L23012:	MOV	#000052, -(SP)		; '*'
L23016:	MOV	#000052, -(SP)		; '*'
L23022:	CALL	L02332			; ищем в рюкзаке
L23026:	MOV	(SP)+, R0
L23030:	MOV	R0, 000016(R5)
; IF
L23034:	CMP	000016(R5), #000007
L23042:	BLT	L23050
L23044:	JMP	L23152
; THEN
L23050:	INC	000056(R5)
L23054:	DEC	000030(R5)
L23060:	MOV	R5, R0
L23062:	ADD	000016(R5), R0
L23066:	MOVB	#000056, 033077(R0)
L23074:	CLR	-(SP)
L23076:	MOV	#000012, -(SP)
L23102:	MOV	#000106, -(SP)		; 70.
L23106:	CALL	L01046
L23112:	MOV	(SP)+, R0
L23114:	ADD	000066(R5), R0
L23120:	MOV	R0, 000066(R5)
L23124:	MOV	#L43206, -(SP)		; строка "Там!"
	MOV	#000004, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L23142:	CALL	$B36			; CR LF
L23146:	JMP	L23174
L23152:	MOV	#L43214, -(SP)		; строка "Где золото-тo?"
	MOV	#000016, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L23170:	CALL	$B36			; CR LF
L23174:	JMP	L35274
;
; 'S' - свистнуть
L23200:	CLR	-(SP)
L23202:	MOV	#000077, -(SP)		; '?'
L23206:	MOV	#000077, -(SP)		; '?'
L23212:	CALL	L02332			; ищем в рюкзаке
L23216:	MOV	(SP)+, R0
L23220:	MOV	R0, 000022(R5)
; IF
L23224:	CMP	000022(R5), #000007
L23232:	BLT	L23240
L23234:	JMP	L24626
; THEN; IF
L23240:	MOV	000022(R5), R0
L23244:	ASL	R0
L23246:	ADD	R5, R0
L23250:	MOV	033104(R0), R0
L23254:	BIC	#177771, R0
L23260:	CMP	R0, #000004
L23264:	BEQ	L23272
L23266:	JMP	L23310
; THEN
L23272:	MOV	#000007, -(SP)		; bell
L23276:	CLR	-(SP)
L23300:	CALL	L52224			; вывод символа
L23304:	JMP	L24622
; ELSE
L23310:	MOV	000022(R5), R0
L23314:	ASL	R0
L23316:	ADD	R5, R0
L23320:	MOV	033104(R0), R0
L23324:	BIC	#177771, R0
L23330:	CMP	R0, #000002
L23334:	BEQ	L23342
L23336:	JMP	L23706
; FOR 000016(R5):=-2 TO 2
L23342:	MOV	R5, R0
L23344:	ADD	#000016, R0
L23350:	MOV	R0, -(SP)
L23352:	MOV	#177776, -(SP)		; начальное значение -2
L23356:	MOV	#000002, -(SP)		; конечное значение 2
L23362:	MOV	000002(SP), @000004(SP)
L23370:	CMP	@000004(SP), (SP)
L23374:	BLE	L23402
L23376:	JMP	L23662
; FOR 000020(R5):=-2 TO 2
L23402:	MOV	R5, R0
L23404:	ADD	#000020, R0
L23410:	MOV	R0, -(SP)
L23412:	MOV	#177776, -(SP)		; начальное значение -2
L23416:	MOV	#000002, -(SP)		; конечное значение 2
L23422:	MOV	000002(SP), @000004(SP)
L23430:	CMP	@000004(SP), (SP)
L23434:	BLE	L23442
L23436:	JMP	L23646
;
L23442:	MOV	000012(R5), R0
L23446:	ADD	000016(R5), R0
L23452:	MOV	#L50172, -(SP)		; множество [2..15]
L23456:	CALL	L53634			; PSHSET
L23462:	MOV	R0, -(SP)
L23464:	CALL	L53452			; DOIN
L23470:	BNE	L23476
L23472:	CLR	R0
L23474:	BR	L23502
L23476:	MOV	#000001, R0
L23502:	MOV	000014(R5), R1
L23506:	ADD	000020(R5), R1
L23512:	MOV	#L50162, -(SP)		; множество [2..15]
L23516:	CALL	L53634			; PSHSET
L23522:	MOV	R1, -(SP)
L23524:	CALL	L53452			; DOIN
L23530:	BNE	L23536
L23532:	CLR	R1
L23534:	BR	L23542
L23536:	MOV	#000001, R1
L23542:	COMB	R1
L23544:	BICB	R1, R0
L23546:	BNE	L23554
L23550:	JMP	L23636
; THEN
L23554:	MOV	000004(R5), R0		; Этаж
L23560:	SWAB	R0
L23562:	BIC	#000377, R0
L23566:	ASL	R0
L23570:	ADD	R5, R0
L23572:	MOV	000012(R5), R1
L23576:	ADD	000016(R5), R1
L23602:	ASL	R1
L23604:	ASL	R1
L23606:	ASL	R1
L23610:	ASL	R1
L23612:	ASL	R1
L23614:	ADD	R0, R1
L23616:	MOV	000014(R5), R0
L23622:	ADD	000020(R5), R0
L23626:	ADD	R1, R0
L23630:	MOVB	#000040, 000027(R0)	; ' '
L23636:	INC	@000004(SP)
L23642:	JMP	L23430
L23646:	ADD	#000006, SP		; завершение цикла по 000020(R5)
L23652:	INC	@000004(SP)
L23656:	JMP	L23370
L23662:	ADD	#000006, SP		; завершение цикла по 000016(R5)
L23666:	MOV	R5, R0
L23670:	ADD	000022(R5), R0
L23674:	MOVB	#000056, 033077(R0)
L23702:	JMP	L24622
; ELSE IF
L23706:	MOV	000022(R5), R0
L23712:	ASL	R0
L23714:	ADD	R5, R0
L23716:	MOV	033104(R0), R0
L23722:	BIC	#177771, R0
L23726:	BEQ	L23734
L23730:	JMP	L24166
; THEN
L23734:	MOV	#L43234, -(SP)		; строка "Б А М - М - М ! ! !"
	MOV	#000023, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L23752:	CALL	$B36			; CR LF
L23756:	CLR	-(SP)
L23760:	MOV	#000002, -(SP)
L23764:	MOV	#000017, -(SP)
L23770:	CALL	L01046
L23774:	MOV	(SP)+, R0
L23776:	MOV	R0, 000012(R5)
L24002:	CLR	-(SP)
L24004:	MOV	#000002, -(SP)
L24010:	MOV	#000037, -(SP)
L24014:	CALL	L01046
L24020:	MOV	(SP)+, R0
L24022:	MOV	R0, 000014(R5)
L24026:	MOV	000004(R5), R0		; Этаж
L24032:	SWAB	R0
L24034:	BIC	#000377, R0
L24040:	ASL	R0
L24042:	ADD	R5, R0
L24044:	MOV	000012(R5), R1
L24050:	ASL	R1
L24052:	ASL	R1
L24054:	ASL	R1
L24056:	ASL	R1
L24060:	ASL	R1
L24062:	ADD	R0, R1
L24064:	ADD	000014(R5), R1
L24070:	ADD	#000027, R1
L24074:	MOV	R1, 011070(R5)
L24100:	MOV	000004(R5), R0		; Этаж
L24104:	SWAB	R0
L24106:	BIC	#000377, R0
L24112:	ASL	R0
L24114:	ASL	R0
L24116:	ADD	R5, R0
L24120:	MOV	000012(R5), R1
L24124:	ASL	R1
L24126:	ASL	R1
L24130:	ASL	R1
L24132:	ASL	R1
L24134:	ASL	R1
L24136:	ASL	R1
L24140:	ADD	R0, R1
L24142:	MOV	000014(R5), R0
L24146:	ASL	R0
L24150:	ADD	R1, R0
L24152:	ADD	#010772, R0
L24156:	MOV	R0, 033074(R5)
L24162:	JMP	L24622
; ELSE
L24166:	MOV	#L43260, -(SP)		; строка "Уничтожение зверя"
	MOV	#000021, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L24204:	CALL	$B36			; CR LF
; FOR 000016(R5):=1 TO 4
L24210:	MOV	R5, R0
L24212:	ADD	#000016, R0
L24216:	MOV	R0, -(SP)
L24220:	MOV	#000001, -(SP)
L24224:	MOV	#000004, -(SP)
L24230:	MOV	000002(SP), @000004(SP)
L24236:	CMP	@000004(SP), (SP)
L24242:	BLE	L24250
L24244:	JMP	L24274
;
L24250:	MOV	R5, R0
L24252:	ADD	000016(R5), R0
L24256:	MOVB	#000040, 033121(R0)
L24264:	INC	@000004(SP)
L24270:	JMP	L24236
L24274:	ADD	#000006, SP		; завершение FOR
; FOR
L24300:	MOV	R5, R0
L24302:	ADD	#000016, R0
L24306:	MOV	R0, -(SP)
L24310:	MOV	#177777, -(SP)
L24314:	MOV	#000001, -(SP)
L24320:	MOV	000002(SP), @000004(SP)
L24326:	CMP	@000004(SP), (SP)
L24332:	BLE	L24340
L24334:	JMP	L24616
; FOR
L24340:	MOV	R5, R0
L24342:	ADD	#000020, R0
L24346:	MOV	R0, -(SP)
L24350:	MOV	#177777, -(SP)
L24354:	MOV	#000001, -(SP)
L24360:	MOV	000002(SP), @000004(SP)
L24366:	CMP	@000004(SP), (SP)
L24372:	BLE	L24400
L24374:	JMP	L24602
; IF
L24400:	MOV	000004(R5), R0		; Этаж
L24404:	SWAB	R0
L24406:	BIC	#000377, R0
L24412:	ASL	R0
L24414:	ADD	R5, R0
L24416:	MOV	000012(R5), R1
L24422:	ADD	000016(R5), R1
L24426:	ASL	R1
L24430:	ASL	R1
L24432:	ASL	R1
L24434:	ASL	R1
L24436:	ASL	R1
L24440:	ADD	R0, R1
L24442:	MOV	000014(R5), R0
L24446:	ADD	000020(R5), R0
L24452:	ADD	R1, R0
L24454:	MOV	#L50152, -(SP)		; множество ['A'..'Z']
L24460:	CALL	L53634			; PSHSET
L24464:	CLR	-(SP)
L24466:	MOVB	000027(R0), (SP)
L24472:	SUB	#000040, (SP)
L24476:	CALL	L53452			; DOIN
L24502:	BNE	L24510
L24504:	JMP	L24572
; THEN
L24510:	MOV	000004(R5), R0		; Этаж
L24514:	SWAB	R0
L24516:	BIC	#000377, R0
L24522:	ASL	R0
L24524:	ADD	R5, R0
L24526:	MOV	000012(R5), R1
L24532:	ADD	000016(R5), R1
L24536:	ASL	R1
L24540:	ASL	R1
L24542:	ASL	R1
L24544:	ASL	R1
L24546:	ASL	R1
L24550:	ADD	R0, R1
L24552:	MOV	000014(R5), R0
L24556:	ADD	000020(R5), R0
L24562:	ADD	R1, R0
L24564:	MOVB	#000052, 000027(R0)
; END IF
L24572:	INC	@000004(SP)
L24576:	JMP	L24366
L24602:	ADD	#000006, SP		; завершение FOR
L24606:	INC	@000004(SP)
L24612:	JMP	L24326
L24616:	ADD	#000006, SP		; завершение FOR
L24622:	JMP	L24650
; ELSE - нету свистка в рюкзаке
L24626:	MOV	#L43302, -(SP)		; строка "Однакo, свисток нужен"
	MOV	#000025, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L24644:	CALL	$B36			; CR LF
L24650:	JMP	L35274
;
; 'E' - поесть
L24654:	CLR	-(SP)
L24656:	MOV	#000072, -(SP)		; ':'
L24662:	MOV	#000073, -(SP)		; ';'
L24666:	CALL	L02332			; ищем в рюкзаке
L24672:	MOV	(SP)+, R0
L24674:	MOV	R0, 000016(R5)
L24700:	CMP	000016(R5), #000007
L24706:	BLT	L24714
L24710:	JMP	L24770
; THEN
L24714:	ADD	#000022, 000060(R5)	; Энергия плюс 18.
L24722:	MOV	R5, R0
L24724:	ADD	000016(R5), R0
L24730:	MOVB	#000056, 033077(R0)
L24736:	DEC	000030(R5)
L24742:	MOV	#L43330, -(SP)		; строка "Спасибо!"
	MOV	#000010, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L24760:	CALL	$B36			; CR LF
L24764:	JMP	L25012
; ELSE
L24770:	MOV	#L43342, -(SP)		; строка "Еды нет"
	MOV	#000007, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L25006:	CALL	$B36			; CR LF
L25012:	JMP	L35274
;
; 'T' - взять предмет, на котором стоишь
L25016:	CLR	-(SP)
L25020:	MOV	#000056, -(SP)		; '.'
L25024:	MOV	#000056, -(SP)		; '.'
L25030:	CALL	L02332			; ищем в рюкзаке
L25034:	MOV	(SP)+, R0
L25036:	MOV	R0, 000016(R5)
; IF
L25042:	CMP	000016(R5), #000007
L25050:	BLT	L25056
L25052:	JMP	L25214
; THEN; IF
L25056:	MOV	#L50142, -(SP)		; множество ['"','\'']
L25062:	CALL	L53634			; PSHSET
L25066:	CLR	-(SP)
L25070:	MOVB	@011070(R5), (SP)
L25074:	SUB	#000040, (SP)
L25100:	CALL	L53452			; DOIN
L25104:	BNE	L25112
L25106:	JMP	L25122
; THEN - Комариную плешь брать нельзя
L25112:	CALL	L02524			; печатаем "Нельзя!" CR LF
L25116:	JMP	L25210
; ELSE
L25122:	MOV	#L43352, -(SP)		; строка "Берем"
	MOV	#000005, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L25140:	CALL	$B36			; CR LF
L25144:	INC	000030(R5)
L25150:	MOV	R5, R0
L25152:	ADD	000016(R5), R0
L25156:	MOVB	@011070(R5), 033077(R0)
L25164:	MOV	000016(R5), R0
L25170:	ASL	R0
L25172:	ADD	R5, R0
L25174:	MOV	@033074(R5), 033104(R0)
L25202:	MOVB	#000056, @011070(R5)	; '.'
L25210:	JMP	L25236
; ELSE
L25214:	MOV	#L43360, -(SP)		; строка "Рюкзак полон"
	MOV	#000014, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L25232:	CALL	$B36			; CR LF
L25236:	JMP	L35274
;
; 'P' - надеть доспехи
L25242:	CLR	-(SP)
L25244:	MOV	#000051, -(SP)		; ')'
L25250:	MOV	#000050, -(SP)		; '('
L25254:	CALL	L02332			; ищем в рюкзаке
L25260:	MOV	(SP)+, R0
L25262:	MOV	R0, 000016(R5)
L25266:	CMP	000016(R5), #000007
L25274:	BLT	L25302
L25276:	JMP	L25410
; THEN; IF
L25302:	MOV	000016(R5), R0
L25306:	ASL	R0
L25310:	ADD	R5, R0
L25312:	MOV	033104(R0), R0
L25316:	BIC	#175777, R0
L25322:	BEQ	L25330
L25324:	JMP	L25400
; THEN
L25330:	MOV	R5, R0
L25332:	ADD	000016(R5), R0
L25336:	MOVB	#000056, 033077(R0)
L25344:	ADD	#000013, 000064(R5)
L25352:	MOV	#L43376, -(SP)		; строка "Доспехи надеты"
	MOV	#000016, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L25370:	CALL	$B36			; CR LF
L25374:	JMP	L25404
L25400:	CALL	L03306			; печатаем "На этой штуке заклятие" CR LF
L25404:	JMP	L25432
; ELSE
L25410:	MOV	#L43416, -(SP)		; строка "Нету"
	MOV	#000004, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L25426:	CALL	$B36			; CR LF
L25432:	JMP	L35274
;
; 'L' - включить фонарь
L25436:	TST	000032(R5)		; заряд батарей
L25442:	BGT	L25450			; > 0 ?
L25444:	JMP	L25504			; да
L25450:	MOVB	#000001, 000047(R5)	; нет
L25456:	MOV	#L43424, -(SP)		; строка "Фонарь включен"
	MOV	#000016, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L25474:	CALL	$B36			; CR LF
L25500:	JMP	L25526
L25504:	MOV	#L43444, -(SP)		; строка "Батареи сели.Надо было экономить ... "
	MOV	#000045, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L25522:	CALL	$B36			; CR LF
L25526:	JMP	L35274
;
; 'O' - выключить фонарь
L25532:	CLRB	000047(R5)
L25536:	MOV	#L43512, -(SP)		; строка "Фонарь выключен"
	MOV	#000017, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L25554:	CALL	$B36			; CR LF
L25560:	JMP	L35274
;
; 'W' - взмахнуть волшебной палочкой
L25564:	CLR	-(SP)
L25566:	MOV	#000057, -(SP)		; '/'
L25572:	MOV	#000134, -(SP)		; '\'
L25576:	CALL	L02332			; ищем в рюкзаке
L25602:	MOV	(SP)+, R0
L25604:	MOV	R0, 000016(R5)
L25610:	CMP	000016(R5), #000007
L25616:	BLT	L25624
L25620:	JMP	L27036
; THEN; IF = 3
L25624:	MOV	000016(R5), R0
L25630:	ASL	R0
L25632:	ADD	R5, R0
L25634:	MOV	033104(R0), R0
L25640:	BIC	#177774, R0
L25644:	CMP	R0, #000003
L25650:	BEQ	L25656
L25652:	JMP	L25704
; THEN
L25656:	MOV	#L43532, -(SP)		; строка "Выпустили до госприемки..."
	MOV	#000032, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L25674:	CALL	$B36			; CR LF
L25700:	JMP	L27032
; ELSE IF = 2
L25704:	MOV	000016(R5), R0
L25710:	ASL	R0
L25712:	ADD	R5, R0
L25714:	MOV	033104(R0), R0
L25720:	BIC	#177774, R0
L25724:	CMP	R0, #000002
L25730:	BEQ	L25736
L25732:	JMP	L26366
; THEN; FOR
L25736:	MOV	R5, R0
L25740:	ADD	#000020, R0
L25744:	MOV	R0, -(SP)
L25746:	MOV	#000002, -(SP)
L25752:	MOV	#000037, -(SP)
L25756:	MOV	000002(SP), @000004(SP)
L25764:	CMP	@000004(SP), (SP)
L25770:	BLE	L25776
L25772:	JMP	L26314
; FOR
L25776:	MOV	R5, R0
L26000:	ADD	#000022, R0
L26004:	MOV	R0, -(SP)
L26006:	MOV	#000002, -(SP)
L26012:	MOV	#000017, -(SP)
L26016:	MOV	000002(SP), @000004(SP)
L26024:	CMP	@000004(SP), (SP)
L26030:	BLE	L26036
L26032:	JMP	L26300
;
L26036:	MOV	000022(R5), -(SP)
L26042:	MOV	000020(R5), -(SP)
L26046:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L26052:	MOV	000004(R5), R0		; Этаж
L26056:	SWAB	R0
L26060:	BIC	#000377, R0
L26064:	ASL	R0
L26066:	ADD	R5, R0
L26070:	MOV	000022(R5), R1
L26074:	ASL	R1
L26076:	ASL	R1
L26100:	ASL	R1
L26102:	ASL	R1
L26104:	ASL	R1
L26106:	ADD	R0, R1
L26110:	ADD	000020(R5), R1
L26114:	CLR	-(SP)
L26116:	MOVB	000027(R1), (SP)
L26122:	CLR	-(SP)
L26124:	CALL	L52224			; вывод символа
L26130:	MOV	000004(R5), R0		; Этаж
L26134:	SWAB	R0
L26136:	BIC	#000377, R0
L26142:	ASL	R0
L26144:	ASL	R0
L26146:	ADD	R5, R0
L26150:	MOV	000022(R5), R1
L26154:	ASL	R1
L26156:	ASL	R1
L26160:	ASL	R1
L26162:	ASL	R1
L26164:	ASL	R1
L26166:	ASL	R1
L26170:	ADD	R0, R1
L26172:	MOV	000020(R5), R0
L26176:	ASL	R0
L26200:	ADD	R1, R0
L26202:	MOV	000004(R5), R1		; Этаж
L26206:	SWAB	R1
L26210:	BIC	#000377, R1
L26214:	ASL	R1
L26216:	ASL	R1
L26220:	ADD	R5, R1
L26222:	MOV	000022(R5), R2
L26226:	ASL	R2
L26230:	ASL	R2
L26232:	ASL	R2
L26234:	ASL	R2
L26236:	ASL	R2
L26240:	ASL	R2
L26242:	ADD	R1, R2
L26244:	MOV	000020(R5), R1
L26250:	ASL	R1
L26252:	ADD	R2, R1
L26254:	MOV	010772(R1), R1
L26260:	BIS	#000100, R1
L26264:	MOV	R1, 010772(R0)
L26270:	INC	@000004(SP)
L26274:	JMP	L26024
L26300:	ADD	#000006, SP		; завершение FOR
L26304:	INC	@000004(SP)
L26310:	JMP	L25764
L26314:	ADD	#000006, SP		; завершение FOR
;
L26320:	MOV	R5, R0
L26322:	ADD	000016(R5), R0
L26326:	MOVB	#000056, 033077(R0)
L26334:	CALL	L01320			; очистить строки под сообщения
L26340:	MOV	#L43566, -(SP)		; строка ""Да будет свет..."
	MOV	#000022, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L26356:	CALL	$B36			; CR LF
L26362:	JMP	L27032
; ELSE IF = 1
L26366:	MOV	000016(R5), R0
L26372:	ASL	R0
L26374:	ADD	R5, R0
L26376:	MOV	033104(R0), R0
L26402:	BIC	#177774, R0
L26406:	CMP	R0, #000001
L26412:	BEQ	L26420
L26414:	JMP	L26570
; THEN; IF
L26420:	TSTB	000046(R5)
L26424:	BNE	L26432
L26426:	JMP	L26462
;
L26432:	ADD	#177775, 000004(R5)	; Этаж - 6
L26440:	TST	000004(R5)
L26444:	BLT	L26452
L26446:	JMP	L26456
L26452:	CLR	000004(R5)		; Этаж = 0
L26456:	JMP	L26512
; ELSE
L26462:	ADD	#000003, 000004(R5)	; Этаж + 3
L26470:	CMP	000004(R5), #000010	; Этаж > 8.
L26476:	BGT	L26504
L26500:	JMP	L26512
L26504:	MOV	#000010, 000004(R5)	; Этаж = 8.
L26512:	MOV	R5, R0
L26514:	ADD	000016(R5), R0
L26520:	MOVB	#000056, 033077(R0)
L26526:	MOV	#000112, -(SP)		; 'J'
L26532:	CALL	L03362			; обновить экран
L26536:	MOV	#L43612, -(SP)		; строка "Пока Вы летели сквозь этажи, "ВП" потерялась"
	MOV	#000054, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L26554:	CALL	$B36			; CR LF
L26560:	DEC	000030(R5)
L26564:	JMP	L27032
; ELSE
L26570:	MOV	#L43670, -(SP)		; строка "Превращение догоняющего зверя"
	MOV	#000035, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L26606:	CALL	$B36			; CR LF
; FOR
L26612:	MOV	R5, R0
L26614:	ADD	#000022, R0
L26620:	MOV	R0, -(SP)
L26622:	MOV	#000001, -(SP)
L26626:	MOV	#000003, -(SP)
L26632:	MOV	000002(SP), @000004(SP)
L26640:	CMP	@000004(SP), (SP)
L26644:	BLE	L26652
L26646:	JMP	L27026
; IF
L26652:	MOV	R5, R0
L26654:	ADD	000022(R5), R0
L26660:	CMPB	033121(R0), #000040
L26666:	BNE	L26674
L26670:	JMP	L27016
; THEN
L26674:	MOV	R5, R0
L26676:	ADD	000022(R5), R0
L26702:	MOVB	#000040, 033121(R0)	; ' '
L26710:	MOV	000004(R5), R0		; Этаж
L26714:	SWAB	R0
L26716:	BIC	#000377, R0
L26722:	ASL	R0
L26724:	ADD	R5, R0
L26726:	MOV	000022(R5), R1
L26732:	ASL	R1
L26734:	ADD	R5, R1
L26736:	MOV	033134(R1), R1
L26742:	ASL	R1
L26744:	ASL	R1
L26746:	ASL	R1
L26750:	ASL	R1
L26752:	ASL	R1
L26754:	ADD	R0, R1
L26756:	MOV	000022(R5), R0
L26762:	ASL	R0
L26764:	ADD	R5, R0
L26766:	ADD	033144(R0), R1
L26772:	CLR	-(SP)
L26774:	MOV	#000044, -(SP)
L27000:	MOV	#000077, -(SP)
L27004:	CALL	L01046
L27010:	MOV	(SP)+, R0
L27012:	MOVB	R0, 000027(R1)
; END IF
L27016:	INC	@000004(SP)
L27022:	JMP	L26640
L27026:	ADD	#000006, SP		; завершение FOR
L27032:	JMP	L27060
L27036:	MOV	#L43726, -(SP)		; строка "Махать-то нечем !"
	MOV	#000021, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L27054:	CALL	$B36			; CR LF
L27060:	JMP	L35274
;
; '/','?' - переложить вещи в рюкзаке
L27064:	MOVB	033105(R5), 000052(R5)
L27072:	MOV	033120(R5), 000020(R5)
; FOR
L27100:	MOV	R5, R0
L27102:	ADD	#000016, R0
L27106:	MOV	R0, -(SP)
L27110:	MOV	#000001, -(SP)
L27114:	MOV	#000006, -(SP)
L27120:	MOV	000002(SP), @000004(SP)
L27126:	CMP	@000004(SP), (SP)
L27132:	BLE	L27140
L27134:	JMP	L27240
;
L27140:	MOV	#000007, R0
L27144:	SUB	000016(R5), R0
L27150:	ADD	R5, R0
L27152:	MOV	#000006, R1
L27156:	SUB	000016(R5), R1
L27162:	ADD	R5, R1
L27164:	MOVB	033077(R1), 033077(R0)
L27172:	MOV	#000007, R0
L27176:	SUB	000016(R5), R0
L27202:	ASL	R0
L27204:	ADD	R5, R0
L27206:	MOV	#000006, R1
L27212:	SUB	000016(R5), R1
L27216:	ASL	R1
L27220:	ADD	R5, R1
L27222:	MOV	033104(R1), 033104(R0)
L27230:	INC	@000004(SP)
L27234:	JMP	L27126
L27240:	ADD	#000006, SP		; завершение FOR
;
L27244:	MOVB	000052(R5), 033100(R5)
L27252:	MOV	000020(R5), 033106(R5)
L27260:	MOVB	#000001, 033156(R5)
L27266:	MOV	#L43750, -(SP)		; строка "Перестройка в рюкзаке"
	MOV	#000025, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L27304:	CALL	$B36			; CR LF
L27310:	JMP	L35274
;
; 'F' - приготовиться к сражению
L27314:	MOVB	#000001, 000050(R5)
L27322:	MOV	#L43776, -(SP)		; строка "У-р-р-р-а-a ! ! !"
	MOV	#000021, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L27340:	CALL	$B36			; CR LF
L27344:	JMP	L35274
;
; 'N' - идёт начальник
L27350:	MOV	#000033, -(SP)
L27354:	CLR	-(SP)
L27356:	CALL	L52224			; вывод символа
L27362:	MOV	#000105, -(SP)
L27366:	CLR	-(SP)
L27370:	CALL	L52224			; вывод символа
; FOR
L27374:	MOV	R5, R0
L27376:	ADD	#000016, R0
L27402:	MOV	R0, -(SP)
L27404:	MOV	#000001, -(SP)
L27410:	MOV	#000023, -(SP)
L27414:	MOV	000002(SP), @000004(SP)
L27422:	CMP	@000004(SP), (SP)
L27426:	BLE	L27434
L27430:	JMP	L27456
;
L27434:	MOV	#000022, -(SP)
L27440:	CLR	-(SP)
L27442:	CALL	L52224			; вывод символа
L27446:	INC	@000004(SP)
L27452:	JMP	L27422
L27456:	ADD	#000006, SP		; завершение FOR
; REPEAT
L27462:	MOV	R5, R0
L27464:	ADD	#000053, R0
L27470:	MOV	R0, -(SP)
L27472:	CALL	L01166			; Ввод символа
; UNTIL
L27476:	CMPB	000053(R5), #000120	; 'P'
L27504:	BEQ	L27512
L27506:	JMP	L27462
; FOR
L27512:	MOV	R5, R0
L27514:	ADD	#000016, R0
L27520:	MOV	R0, -(SP)
L27522:	MOV	#000001, -(SP)
L27526:	MOV	#000023, -(SP)
L27532:	MOV	000002(SP), @000004(SP)
L27540:	CMP	@000004(SP), (SP)
L27544:	BLE	L27552
L27546:	JMP	L27574
;
L27552:	MOV	#000026, -(SP)
L27556:	CLR	-(SP)
L27560:	CALL	L52224			; вывод символа
L27564:	INC	@000004(SP)
L27570:	JMP	L27540
L27574:	ADD	#000006, SP		; завершение FOR
;
L27600:	MOV	#000027, -(SP)
L27604:	CLR	-(SP)
L27606:	CALL	L52224			; вывод символа
L27612:	JMP	L35274
;
; 'X' - закончить
L27616:	MOV	#L44020, -(SP)		; строка "Закончить изволите? "
	MOV	#000024, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L27634:	MOV	R5, R0
L27636:	ADD	#000053, R0
L27642:	MOV	R0, -(SP)
L27644:	CALL	L01166			; Ввод символа
L27650:	MOV	#L50132, -(SP)		; множество ['D','Y']
L27654:	CALL	L53634			; PSHSET
L27660:	CLR	-(SP)
L27662:	MOVB	000053(R5), (SP)
L27666:	SUB	#000040, (SP)
L27672:	CALL	L53452			; DOIN
L27676:	BNE	L27704
L27700:	JMP	L27736
L27704:	MOV	#L44046, -(SP)		; строка "А ведь придупреждали..."
	MOV	#000027, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L27722:	CALL	$B36			; CR LF
L27726:	MOV	050406, SP
L27732:	JMP	L40120			; выход из игрового цикла
L27736:	JMP	L35274
;
; 'M' - приготовить оружие
L27742:	CLR	-(SP)
L27744:	MOV	#000133, -(SP)		; '['
L27750:	MOV	#000135, -(SP)		; ']'
L27754:	CALL	L02332			; ищем в рюкзаке
L27760:	MOV	(SP)+, R0
L27762:	MOV	R0, 000016(R5)
; IF
L27766:	CMP	000016(R5), #000007
L27774:	BLT	L30002
L27776:	JMP	L30110
; THEN; IF
L30002:	MOV	000016(R5), R0
L30006:	ASL	R0
L30010:	ADD	R5, R0
L30012:	MOV	033104(R0), R0
L30016:	BIC	#175777, R0
L30022:	BEQ	L30030
L30024:	JMP	L30100
; THEN
L30030:	MOV	R5, R0
L30032:	ADD	000016(R5), R0
L30036:	MOVB	#000056, 033077(R0)
L30044:	ADD	#000017, 000062(R5)
L30052:	MOV	#L44076, -(SP)		; строка "Оружие приготовлено"
	MOV	#000023, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L30070:	CALL	$B36			; CR LF
L30074:	JMP	L30104
; ELSE
L30100:	CALL	L03306			; печатаем "На этой штуке заклятие" CR LF
L30104:	JMP	L30132
; ELSE - не нашли в рюкзаке
L30110:	MOV	#L44122, -(SP)		; строка "Нету!"
	MOV	#000005, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L30126:	CALL	$B36			; CR LF
L30132:	JMP	L35274
;
; 'B' - заменить батареи
L30136:	CLR	-(SP)
L30140:	MOV	#000074, -(SP)		; '<'
L30144:	MOV	#000076, -(SP)		; '>'
L30150:	CALL	L02332			; ищем в рюкзаке
L30154:	MOV	(SP)+, R0
L30156:	MOV	R0, 000016(R5)
; IF
L30162:	CMP	000016(R5), #000007
L30170:	BLT	L30176
L30172:	JMP	L30310
; THEN
L30176:	MOV	000016(R5), R0
L30202:	ASL	R0
L30204:	ADD	R5, R0
L30206:	MOV	033104(R0), R0
L30212:	BIC	#175777, R0
L30216:	BEQ	L30224
L30220:	JMP	L30300
; THEN
L30224:	MOV	R5, R0
L30226:	ADD	000016(R5), R0
L30232:	MOVB	#000056, 033077(R0)
L30240:	DEC	000030(R5)
L30244:	MOV	#000620, 000032(R5)
L30252:	MOV	#L44130, -(SP)		; строка "Батареи заменены"
	MOV	#000020, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L30270:	CALL	$B36			; CR LF
L30274:	JMP	L30304
; ELSE
L30300:	CALL	L03306			; печатаем "На этой штуке заклятие" CR LF
L30304:	JMP	L30332
; ELSE
L30310:	MOV	#L44152, -(SP)		; строка "Батарей нет"
	MOV	#000013, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L30326:	CALL	$B36			; CR LF
L30332:	JMP	L35274
;
; 'J' - обновить экран
L30336:	MOV	#000112, -(SP)		; 'J'
L30342:	CALL	L03362			; обновить экран
L30346:	JMP	L35274
;
; 'R' - читать папирус
L30352:	CLR	-(SP)
L30354:	MOV	#000046, -(SP)		; '&'
L30360:	MOV	#000046, -(SP)
L30364:	CALL	L02332			; ищем в рюкзаке
L30370:	MOV	(SP)+, R0
L30372:	MOV	R0, 000016(R5)
; IF
L30376:	CMP	000016(R5), #000007
L30404:	BLT	L30412
L30406:	JMP	L31610
; THEN; IF = 0
L30412:	MOV	000016(R5), R0
L30416:	ASL	R0
L30420:	ADD	R5, R0
L30422:	MOV	033104(R0), R0
L30426:	BIC	#177771, R0
L30432:	BEQ	L30440
L30434:	JMP	L30576
; THEN; FOR
L30440:	MOV	R5, R0
L30442:	ADD	#000020, R0
L30446:	MOV	R0, -(SP)
L30450:	MOV	#000001, -(SP)
L30454:	MOV	#000010, -(SP)
L30460:	MOV	000002(SP), @000004(SP)
L30466:	CMP	@000004(SP), (SP)
L30472:	BLE	L30500
L30474:	JMP	L30544
;
L30500:	MOV	000020(R5), R0
L30504:	ASL	R0
L30506:	ADD	R5, R0
L30510:	MOV	000020(R5), R1
L30514:	ASL	R1
L30516:	ADD	R5, R1
L30520:	MOV	033104(R1), R1
L30524:	BIC	#002000, R1
L30530:	MOV	R1, 033104(R0)
L30534:	INC	@000004(SP)
L30540:	JMP	L30466
L30544:	ADD	#000006, SP		; завершение FOR
L30550:	MOV	#L44166, -(SP)		; строка ""APCHXYZZYURR!!!"... Заклятие снято"
	MOV	#000043, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L30566:	CALL	$B36			; CR LF
L30572:	JMP	L31604
; ELSE IF = 2
L30576:	MOV	000016(R5), R0
L30602:	ASL	R0
L30604:	ADD	R5, R0
L30606:	MOV	033104(R0), R0
L30612:	BIC	#177771, R0
L30616:	CMP	R0, #000002
L30622:	BEQ	L30630
L30624:	JMP	L30656
; THEN
L30630:	MOV	#L44232, -(SP)		; строка "Надпись гласит: "Сам дурак"
	MOV	#000033, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L30646:	CALL	$B36			; CR LF
L30652:	JMP	L31604
; ELSE IF = 4
L30656:	MOV	000016(R5), R0
L30662:	ASL	R0
L30664:	ADD	R5, R0
L30666:	MOV	033104(R0), R0
L30672:	BIC	#177771, R0
L30676:	CMP	R0, #000004
L30702:	BEQ	L30710
L30704:	JMP	L31226
; THEN
L30710:	MOV	#000002, 000022(R5)
; WHILE
L30716:	CMP	000022(R5), #000020
L30724:	BLT	L30732
L30726:	JMP	L31150
; THEN
L30732:	MOV	#000002, 000024(R5)
; WHILE
L30740:	CMP	000024(R5), #000040
L30746:	BLT	L30754
L30750:	JMP	L31052
;
L30754:	MOV	000004(R5), R0		; Этаж
L30760:	SWAB	R0
L30762:	BIC	#000377, R0
L30766:	ASL	R0
L30770:	ADD	R5, R0
L30772:	MOV	000022(R5), R1
L30776:	ASL	R1
L31000:	ASL	R1
L31002:	ASL	R1
L31004:	ASL	R1
L31006:	ASL	R1
L31010:	ADD	R0, R1
L31012:	ADD	000024(R5), R1
L31016:	CMPB	000027(R1), #000045
L31024:	BEQ	L31032
L31026:	JMP	L31042
L31032:	JMP	L31052
L31036:	JMP	L31046
L31042:	INC	000024(R5)
L31046:	JMP	L30740			; продолжение WHILE
; END WHILE; END IF
L31052:	MOV	000004(R5), R0		; Этаж
L31056:	SWAB	R0
L31060:	BIC	#000377, R0
L31064:	ASL	R0
L31066:	ADD	R5, R0
L31070:	MOV	000022(R5), R1
L31074:	ASL	R1
L31076:	ASL	R1
L31100:	ASL	R1
L31102:	ASL	R1
L31104:	ASL	R1
L31106:	ADD	R0, R1
L31110:	ADD	000024(R5), R1
L31114:	CMPB	000027(R1), #000045
L31122:	BEQ	L31130
L31124:	JMP	L31140
L31130:	JMP	L31150
L31134:	JMP	L31144
L31140:	INC	000022(R5)
L31144:	JMP	L30716
; END WHILE
L31150:	MOV	#L44266, -(SP)		; строка "Лестница -"
	MOV	#000012, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L31166:	MOV	000022(R5), -(SP)
L31172:	MOV	#000004, -(SP)
L31176:	CALL	L52306			; вывод числа
L31202:	MOV	000024(R5), -(SP)
L31206:	MOV	#000004, -(SP)
L31212:	CALL	L52306			; вывод числа
L31216:	CALL	$B36			; CR LF
L31222:	JMP	L31604
; ELSE
L31226:	MOV	#000001, 000022(R5)
; WHILE
L31234:	CMP	000022(R5), #000020
L31242:	BLT	L31250
L31244:	JMP	L31432
L31250:	MOV	#000002, 000024(R5)
; WHILE
L31256:	CMP	000024(R5), #000040
L31264:	BLT	L31272
L31266:	JMP	L31352
;
L31272:	MOV	000022(R5), R0
L31276:	ASL	R0
L31300:	ASL	R0
L31302:	ASL	R0
L31304:	ASL	R0
L31306:	ASL	R0
L31310:	ADD	R5, R0
L31312:	ADD	000024(R5), R0
L31316:	CMPB	010027(R0), #000054		; ','
L31324:	BEQ	L31332
L31326:	JMP	L31342
L31332:	JMP	L31352
L31336:	JMP	L31346
L31342:	INC	000024(R5)
L31346:	JMP	L31256
L31352:	MOV	000022(R5), R0
L31356:	ASL	R0
L31360:	ASL	R0
L31362:	ASL	R0
L31364:	ASL	R0
L31366:	ASL	R0
L31370:	ADD	R5, R0
L31372:	ADD	000024(R5), R0
L31376:	CMPB	010027(R0), #000054
L31404:	BEQ	L31412
L31406:	JMP	L31422
L31412:	JMP	L31432
L31416:	JMP	L31426
L31422:	INC	000022(R5)
L31426:	JMP	L31234
; END WHILE
L31432:	CMP	000022(R5), #000020
L31440:	BEQ	L31446
L31442:	CLR	R0
L31444:	BR	L31452
L31446:	MOV	#000001, R0
L31452:	CMP	000024(R5), #000040
L31460:	BEQ	L31466
L31462:	CLR	R1
L31464:	BR	L31472
L31466:	MOV	#000001, R1
L31472:	COMB	R1
L31474:	BICB	R1, R0
L31476:	BNE	L31504
L31500:	JMP	L31532
L31504:	MOV	#L44302, -(SP)		; строка "Золотой шар украден!"
	MOV	#000024, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L31522:	CALL	$B36			; CR LF
L31526:	JMP	L31604
L31532:	MOV	#L44330, -(SP)		; строка "Золотой шар - 8"
	MOV	#000017, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L31550:	MOV	000022(R5), -(SP)
L31554:	MOV	#000004, -(SP)
L31560:	CALL	L52306
L31564:	MOV	000024(R5), -(SP)
L31570:	MOV	#000004, -(SP)
L31574:	CALL	L52306
L31600:	CALL	$B36			; CR LF
L31604:	JMP	L31632
L31610:	MOV	#L44350, -(SP)		; строка "А читать-то и нечего"
	MOV	#000024, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L31626:	CALL	$B36			; CR LF
L31632:	JMP	L35274
;
; 'I' - надеть кольцо
L31636:	CLR	-(SP)
L31640:	MOV	#000075, -(SP)		; '='
L31644:	MOV	#000075, -(SP)
L31650:	CALL	L02332			; ищем в рюкзаке
L31654:	MOV	(SP)+, R0
L31656:	MOV	R0, 000016(R5)
L31662:	CMP	000016(R5), #000007
L31670:	BLT	L31676
L31672:	JMP	L32004
; THEN
L31676:	MOV	000016(R5), R0
L31702:	ASL	R0
L31704:	ADD	R5, R0
L31706:	MOV	033104(R0), R0
L31712:	BIC	#175777, R0
L31716:	BEQ	L31724
L31720:	JMP	L31774
L31724:	MOV	#L44376, -(SP)		; строка "Силовое поле включено!"
	MOV	#000026, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L31742:	CALL	$B36			; CR LF
L31746:	MOVB	#000001, 000051(R5)
L31754:	MOV	R5, R0
L31756:	ADD	000016(R5), R0
L31762:	MOVB	#000056, 033077(R0)
L31770:	JMP	L32000
; ELSE
L31774:	CALL	L03306			; печатаем "На этой штуке заклятие" CR LF
L32000:	JMP	L32026
L32004:	MOV	#L44426, -(SP)		; строка "Нету"
	MOV	#000004, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L32022:	CALL	$B36			; CR LF
L32026:	JMP	L35274
;
; 'V' - снять кольцо
L32032:	TSTB	000051(R5)
L32036:	BNE	L32044
L32040:	JMP	L32174
; THEN
L32044:	CLR	-(SP)
L32046:	MOV	#000056, -(SP)		; '.'
L32052:	MOV	#000056, -(SP)
L32056:	CALL	L02332			; ищем в рюкзаке
L32062:	MOV	(SP)+, R0
L32064:	MOV	R0, 000016(R5)
L32070:	CMP	000016(R5), #000007
L32076:	BLT	L32104
L32100:	JMP	L32146
; THEN
L32104:	MOV	R5, R0
L32106:	ADD	000016(R5), R0
L32112:	MOVB	#000075, 033077(R0)
L32120:	MOV	000016(R5), R0
L32124:	ASL	R0
L32126:	ADD	R5, R0
L32130:	MOV	#002000, 033104(R0)
L32136:	CLRB	000051(R5)
L32142:	JMP	L32170
; ELSE
L32146:	MOV	#L44434, -(SP)		; строка "Рюкзак полон"
	MOV	#000014, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L32164:	CALL	$B36			; CR LF
L32170:	JMP	L32216
L32174:	MOV	#L44452, -(SP)		; строка "Кольца нет"
	MOV	#000012, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L32212:	CALL	$B36			; CR LF
L32216:	JMP	L35274
;
; 'A' - купить (на золото)
; IF
L32222:	MOV	#L50122, -(SP)		; множество ['1','A','B']
L32226:	CALL	L53634			; PSHSET
L32232:	CLR	-(SP)
L32234:	MOVB	@011070(R5), (SP)
L32240:	SUB	#000040, (SP)
L32244:	CALL	L53452			; DOIN
L32250:	BNE	L32256
L32252:	JMP	L32552
; IF
L32256:	TST	000066(R5)
L32262:	BGT	L32270
L32264:	JMP	L32524
;
L32270:	MOV	#L44466, -(SP)		; строка "Чего изволите?"
	MOV	#000016, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L32306:	MOV	R5, R0
L32310:	ADD	#000053, R0
L32314:	MOV	R0, -(SP)
L32316:	CALL	L01166			; Ввод символа
;
L32322:	CLR	-(SP)
L32324:	MOV	#000056, -(SP)		; '.'
L32330:	MOV	#000056, -(SP)		; '.'
L32334:	CALL	L02332			; ищем в рюкзаке
L32340:	MOV	(SP)+, R0
L32342:	MOV	R0, 000016(R5)
; IF 000016(R5) < 7
L32346:	CMP	000016(R5), #000007
L32354:	BLT	L32362
L32356:	JMP	L32520
;
L32362:	MOV	R5, R0
L32364:	ADD	000016(R5), R0
L32370:	MOVB	000053(R5), 033077(R0)
;
L32376:	MOV	000016(R5), R0
L32402:	ASL	R0
L32404:	ADD	R5, R0
L32406:	CLR	-(SP)
L32410:	MOV	#000001, -(SP)
L32414:	MOV	#017777, -(SP)		; 8191.
L32420:	CALL	L01046
L32424:	MOV	(SP)+, R1
L32426:	MOV	R1, 033104(R0)
;
L32432:	CLR	-(SP)
L32434:	MOV	#000012, -(SP)		; 10.
L32440:	MOV	#000372, -(SP)		; 250.
L32444:	CALL	L01046
L32450:	MOV	(SP)+, R0
L32452:	SUB	R0, 000066(R5)		; уменьшаем деньги на счёте
;
L32456:	MOV	#000015, -(SP)		; ПС
L32462:	CLR	-(SP)
L32464:	CALL	L52224			; вывод символа
L32470:	MOV	#L44506, -(SP)		; строка "П о л у ч и т е !"
	MOV	#000021, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L32506:	CALL	$B36			; CR LF
L32512:	MOVB	#000153, @011070(R5)	; 'k'
L32520:	JMP	L32546
;
L32524:	MOV	#L44530, -(SP)		; строка "Подаю только по пятницам!"
	MOV	#000031, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L32542:	CALL	$B36			; CR LF
L32546:	JMP	L32574
;
L32552:	MOV	#L44562, -(SP)		; строка "Подойди ближе к автомату!"
	MOV	#000031, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L32570:	CALL	$B36			; CR LF
L32574:	JMP	L35274
;
; 'K' - сломать стенку киркой
L32600:	CLR	-(SP)
L32602:	MOV	#000054, -(SP)		; ','
L32606:	MOV	#000054, -(SP)
L32612:	CALL	L02332			; ищем в рюкзаке
L32616:	MOV	(SP)+, R0
L32620:	MOV	R0, 000016(R5)
L32624:	CMP	000016(R5), #000007
L32632:	BLT	L32640
L32634:	JMP	L33676
; THEN
L32640:	MOV	#L44614, -(SP)		; строка "Направление? "
	MOV	#000015, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L32656:	MOV	R5, R0
L32660:	ADD	#000053, R0
L32664:	MOV	R0, -(SP)
L32666:	CALL	L01166			; Ввод символа
L32672:	CALL	L01320			; очистить строки под сообщения
L32676:	MOV	000012(R5), 000022(R5)
L32704:	MOV	000014(R5), 000024(R5)
; CASE по нажатой клавише
L32712:	MOVB	000053(R5), R0
L32716:	SUB	#000056, R0		; '.'
L32722:	BGE	L32730
L32724:	JMP	L33324
L32730:	CMP	#000013, R0
L32734:	BGE	L32742
L32736:	JMP	L33324
L32742:	ASL	R0
L32744:	JMP	@033334(R0)
; Case '1' - влево-вниз
L32750:	MOV	000012(R5), R0
L32754:	INC	R0
L32756:	MOV	R0, 000022(R5)
L32762:	MOV	000014(R5), R0
L32766:	DEC	R0
L32770:	MOV	R0, 000024(R5)
L32774:	JMP	L33364
; Case '2' - вниз
L33000:	MOV	000012(R5), R0
L33004:	INC	R0
L33006:	MOV	R0, 000022(R5)
L33012:	JMP	L33364
; Case '3' - вправо-вниз
L33016:	MOV	000012(R5), R0
L33022:	INC	R0
L33024:	MOV	R0, 000022(R5)
L33030:	MOV	000014(R5), R0
L33034:	INC	R0
L33036:	MOV	R0, 000024(R5)
L33042:	JMP	L33364
; Case '4' - влево
L33046:	MOV	000014(R5), R0
L33052:	DEC	R0
L33054:	MOV	R0, 000024(R5)
L33060:	JMP	L33364
; '5' - в пол
L33064:	MOVB	#000040, @011070(R5)
L33072:	JMP	L33364
; '6' - вправо
L33076:	MOV	000014(R5), R0
L33102:	INC	R0
L33104:	MOV	R0, 000024(R5)
L33110:	JMP	L33364
; '7' - влево-вверх
L33114:	MOV	000012(R5), R0
L33120:	DEC	R0
L33122:	MOV	R0, 000022(R5)
L33126:	MOV	000014(R5), R0
L33132:	DEC	R0
L33134:	MOV	R0, 000024(R5)
L33140:	JMP	L33364
; '8' - вверх
L33144:	MOV	000012(R5), R0
L33150:	DEC	R0
L33152:	MOV	R0, 000022(R5)
L33156:	JMP	L33364
; '9'
L33162:	MOV	000012(R5), R0
L33166:	DEC	R0
L33170:	MOV	R0, 000022(R5)
L33174:	MOV	000014(R5), R0
L33200:	INC	R0
L33202:	MOV	R0, 000024(R5)
L33206:	JMP	L33364
; '.' - в потолок
L33212:	TST	000004(R5)		; Этаж
L33216:	BGT	L33224
L33220:	JMP	L33320
L33224:	MOV	000004(R5), R0		; Этаж
L33230:	DEC	R0
L33232:	SWAB	R0
L33234:	BIC	#000377, R0
L33240:	ASL	R0
L33242:	ADD	R5, R0
L33244:	MOV	000012(R5), R1
L33250:	ASL	R1
L33252:	ASL	R1
L33254:	ASL	R1
L33256:	ASL	R1
L33260:	ASL	R1
L33262:	ADD	R0, R1
L33264:	ADD	000014(R5), R1
L33270:	MOVB	#000040, 000027(R1)
L33276:	MOV	#L44632, -(SP)		; строка "Кусок свода обрушился и раскололся о вашу глупую голову"
	MOV	#000067, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L33314:	CALL	$B36			; CR LF
L33320:	JMP	L33364
; Case Else; '/','0'
L33324:	CALL	L02524			; печатаем "Нельзя!" CR LF
L33330:	JMP	L33364
L33334:	.WORD	L33212, L33324, L33324, L32750	;  .  /  0  1
	.WORD	L33000, L33016, L33046, L33064	;  2  3  4  5
	.WORD	L33076, L33114, L33144, L33162	;  6  7  8  9
;
L33364:	MOV	#L50112, -(SP)		; множество [2..15]
L33370:	CALL	L53634			; PSHSET
L33374:	MOV	000022(R5), -(SP)
L33400:	CALL	L53452			; DOIN
L33404:	BNE	L33412
L33406:	CLR	R0
L33410:	BR	L33416
L33412:	MOV	#000001, R0
L33416:	MOV	#L50102, -(SP)		; множество [2..31]
L33422:	CALL	L53634			; PSHSET
L33426:	MOV	000024(R5), -(SP)
L33432:	CALL	L53452			; DOIN
L33436:	BNE	L33444
L33440:	CLR	R1
L33442:	BR	L33450
L33444:	MOV	#000001, R1
L33450:	COMB	R1
L33452:	BICB	R1, R0
L33454:	MOV	000004(R5), R1		; Этаж
L33460:	SWAB	R1
L33462:	BIC	#000377, R1
L33466:	ASL	R1
L33470:	ADD	R5, R1
L33472:	MOV	000022(R5), R2
L33476:	ASL	R2
L33500:	ASL	R2
L33502:	ASL	R2
L33504:	ASL	R2
L33506:	ASL	R2
L33510:	ADD	R1, R2
L33512:	ADD	000024(R5), R2
L33516:	MOV	#L50072, -(SP)		; множество ['!','-']
L33522:	CALL	L53634			; PSHSET
L33526:	CLR	-(SP)
L33530:	MOVB	000027(R2), (SP)
L33534:	SUB	#000040, (SP)
L33540:	CALL	L53452			; DOIN
L33544:	BNE	L33552
L33546:	CLR	R1
L33550:	BR	L33556
L33552:	MOV	#000001, R1
L33556:	COMB	R1
L33560:	BICB	R1, R0
L33562:	BNE	L33570
L33564:	JMP	L33650
; THEN
L33570:	MOV	000004(R5), R0		; Этаж
L33574:	SWAB	R0
L33576:	BIC	#000377, R0
L33602:	ASL	R0
L33604:	ADD	R5, R0
L33606:	MOV	000022(R5), R1
L33612:	ASL	R1
L33614:	ASL	R1
L33616:	ASL	R1
L33620:	ASL	R1
L33622:	ASL	R1
L33624:	ADD	R0, R1
L33626:	ADD	000024(R5), R1
L33632:	MOVB	#000143, 000027(R1)	; 'c'
L33640:	DEC	000060(R5)		; Энергия уменьшается
L33644:	JMP	L33672
; ELSE
L33650:	MOV	#L44722, -(SP)		; строка "Ну, чего размахался?"
	MOV	#000024, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L33666:	CALL	$B36			; CR LF
L33672:	JMP	L33720
L33676:	MOV	#L44750, -(SP)		; строка "А стенку вы будете лбом прошибать?.."
	MOV	#000044, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L33714:	CALL	$B36			; CR LF
L33720:	JMP	L35274
;
; 'Y' - зажарить убегающего зверя
L33724:	MOV	@033074(R5), R0
L33730:	BIC	#177771, R0		; AND 6
L33734:	CMP	R0, #000002		; = 2 ?
L33740:	BEQ	L33746
L33742:	CLR	R0
L33744:	BR	L33752
L33746:	MOV	#000001, R0
L33752:	MOV	#L50062, -(SP)		; множество ['A'..'Z']
L33756:	CALL	L53634			; PSHSET
L33762:	CLR	-(SP)
L33764:	MOVB	@011070(R5), (SP)
L33770:	SUB	#000040, (SP)
L33774:	CALL	L53452			; DOIN
L34000:	BNE	L34006
L34002:	CLR	R1
L34004:	BR	L34012
L34006:	MOV	#000001, R1
L34012:	COMB	R1
L34014:	BICB	R1, R0
L34016:	BNE	L34024
L34020:	JMP	L34036
; Зверь становится едой
L34024:	MOVB	#000072, @011070(R5)	; ':'
L34032:	JMP	L34042
L34036:	CALL	L02524			; печатаем "Нельзя!" CR LF
L34042:	JMP	L35274
;
; 'H' - хелп
L34046:	MOV	#000033, -(SP)		; ESC
L34052:	CLR	-(SP)
L34054:	CALL	L52224			; вывод символа
L34060:	MOV	#000110, -(SP)		; <110>
L34064:	CLR	-(SP)
L34066:	CALL	L52224			; вывод символа
L34072:	MOV	#000033, -(SP)		; ESC
L34076:	CLR	-(SP)
L34100:	CALL	L52224			; вывод символа
L34104:	MOV	#L45016, -(SP)		; строка /J/<015><012>... - 1-я страница помощи
	MOV	#001376, -(SP)		; длина строки = 766. символов
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L34122:	MOV	R5, R0
L34124:	ADD	#000053, R0
L34130:	MOV	R0, -(SP)
L34132:	CALL	L01166			; Ввод символа
; IF
L34136:	CMPB	000053(R5), #000015
L34144:	BEQ	L34152			; да
L34146:	JMP	L34166			; нет
;
L34152:	MOV	R5, R0
L34154:	ADD	#000053, R0
L34160:	MOV	R0, -(SP)
L34162:	CALL	L01166			; Ввод символа
L34166:	MOV	#L46416, -(SP)		; строка - 2-я страница помощи
	MOV	#000731, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L34204:	MOV	R5, R0
L34206:	ADD	#000053, R0
L34212:	MOV	R0, -(SP)
L34214:	CALL	L01166			; Ввод символа
; IF
L34220:	CMPB	000053(R5), #000015
L34226:	BEQ	L34234			; да
L34230:	JMP	L34250			; нет
L34234:	MOV	R5, R0
L34236:	ADD	#000053, R0
L34242:	MOV	R0, -(SP)
L34244:	CALL	L01166			; Ввод символа
L34250:	MOV	#000112, -(SP)		; 'J'
L34254:	CALL	L03362			; обновить экран
L34260:	ADD	#177776, 000056(R5)
L34266:	JMP	L35274
;
; 'U' - вызвать джинна
L34272:	MOVB	000046(R5), R0
L34276:	COMB	R0
L34300:	BICB	#177776, R0
L34304:	BNE	L34312
L34306:	JMP	L35066
; THEN
L34312:	MOV	#L47350, -(SP)		; строка "Что, влип? ладно, попробую тебя перенести "
	MOV	#000140, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L34330:	MOV	R5, R0
L34332:	ADD	#000053, R0
L34336:	MOV	R0, -(SP)
L34340:	CALL	L01166			; Ввод символа
; IF
L34344:	CMPB	000053(R5), #000116	; 'N'
L34352:	BNE	L34360
L34354:	JMP	L35062
; THEN; FOR - индикаторы рандомно меняются
L34360:	MOV	R5, R0
L34362:	ADD	#000016, R0
L34366:	MOV	R0, -(SP)
L34370:	MOV	#000001, -(SP)
L34374:	MOV	#000005, -(SP)
L34400:	MOV	000002(SP), @000004(SP)
L34406:	CMP	@000004(SP), (SP)
L34412:	BLE	L34420
L34414:	JMP	L34500
;
L34420:	MOV	000016(R5), R0
L34424:	ASL	R0
L34426:	ADD	R5, R0
L34430:	MOV	000016(R5), R1
L34434:	ASL	R1
L34436:	ADD	R5, R1
L34440:	CLR	-(SP)
L34442:	CLR	-(SP)			; 0
L34444:	MOV	#000017, -(SP)		; 15.
L34450:	CALL	L01046			; получаем случайное число
L34454:	MOV	(SP)+, R2
L34456:	MOV	000054(R1), R1
L34462:	SUB	R2, R1
L34464:	MOV	R1, 000054(R0)
;
L34470:	INC	@000004(SP)
L34474:	JMP	L34406
L34500:	ADD	#000006, SP		; завершение FOR
; FOR - очищаем рюкзак
L34504:	MOV	R5, R0
L34506:	ADD	#000016, R0
L34512:	MOV	R0, -(SP)
L34514:	MOV	#000001, -(SP)
L34520:	MOV	#000006, -(SP)
L34524:	MOV	000002(SP), @000004(SP)
L34532:	CMP	@000004(SP), (SP)
L34536:	BLE	L34544
L34540:	JMP	L34570
;
L34544:	MOV	R5, R0
L34546:	ADD	000016(R5), R0
L34552:	MOVB	#000056, 033077(R0)
L34560:	INC	@000004(SP)
L34564:	JMP	L34532
L34570:	ADD	#000006, SP		; завершение FOR
;
L34574:	CLR	-(SP)
L34576:	MOV	#000002, -(SP)
L34602:	MOV	#000017, -(SP)
L34606:	CALL	L01046
L34612:	MOV	(SP)+, R0
L34614:	MOV	R0, 000012(R5)
L34620:	CLR	-(SP)
L34622:	MOV	#000002, -(SP)
L34626:	MOV	#000037, -(SP)
L34632:	CALL	L01046
L34636:	MOV	(SP)+, R0
L34640:	MOV	R0, 000014(R5)
L34644:	CLR	-(SP)
L34646:	CLR	-(SP)
L34650:	MOV	#000010, -(SP)
L34654:	CALL	L01046
L34660:	MOV	(SP)+, R0
L34662:	MOV	R0, 000022(R5)
;
L34666:	MOV	000004(R5), R0		; Этаж
L34672:	SWAB	R0
L34674:	BIC	#000377, R0
L34700:	ASL	R0
L34702:	ADD	R5, R0
L34704:	MOV	000012(R5), R1
L34710:	ASL	R1
L34712:	ASL	R1
L34714:	ASL	R1
L34716:	ASL	R1
L34720:	ASL	R1
L34722:	ADD	R0, R1
L34724:	ADD	000014(R5), R1
L34730:	ADD	#000027, R1
L34734:	MOV	R1, 011070(R5)
;
L34740:	MOV	000004(R5), R0		; Этаж
L34744:	SWAB	R0
L34746:	BIC	#000377, R0
L34752:	ASL	R0
L34754:	ASL	R0
L34756:	ADD	R5, R0
L34760:	MOV	000012(R5), R1
L34764:	ASL	R1
L34766:	ASL	R1
L34770:	ASL	R1
L34772:	ASL	R1
L34774:	ASL	R1
L34776:	ASL	R1
L35000:	ADD	R0, R1
L35002:	MOV	000014(R5), R0
L35006:	ASL	R0
L35010:	ADD	R1, R0
L35012:	ADD	#010772, R0
L35016:	MOV	R0, 033074(R5)
; IF
L35022:	CMP	000022(R5), 000004(R5)
L35030:	BGT	L35036
L35032:	JMP	L35044
; THEN
L35036:	MOV	000004(R5), 000022(R5)
; END IF
L35044:	MOV	000022(R5), 000004(R5)
L35052:	MOV	#000112, -(SP)		; 'J'
L35056:	CALL	L03362			; обновить экран
; ELSE
L35062:	JMP	L35110
L35066:	MOV	#L47512, -(SP)		; строка "Джинн в отгуле"
	MOV	#000016, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L35104:	CALL	$B36			; CR LF
L35110:	JMP	L35274
;
; CASE ELSE - ':',';','<','=','>','@','C','G'
L35114:	MOV	#L47532, -(SP)		; строка "Что-что?"
	MOV	#000010, -(SP)		; длина строки = 8.
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L35132:	CALL	$B36			; CR LF
L35136:	JMP	L35274
;
; Таблица адресов для CASE
L35142:	.WORD	L21026	; '.' - вверх по лестнице
L35144:	.WORD	L27064	; '/' - переложить вещи в рюкзаке
L35146:	.WORD	L21016	; '0' - отдохнуть
L35150:	.WORD	L20612	; '1' - влево-вниз
L35152:	.WORD	L20632	; '2' - вниз
L35154:	.WORD	L20650	; '3' - вправо-вниз
L35155:	.WORD	L20670	; '4' - влево
L35160:	.WORD	L20706	; '5' - вниз по лестнице
L35162:	.WORD	L20722	; '6' - вправо
L35164:	.WORD	L20740	; '7' - влево-вверх
L35166:	.WORD	L20760	; '8' - вверх
L35170:	.WORD	L20776	; '9' - вправо-вверх
L35172:	.WORD	L35114	; ':'
L35174:	.WORD	L35114	; ';'
L35176:	.WORD	L35114	; '<'
L35200:	.WORD	L35114	; '='
L35202:	.WORD	L35114	; '>'
L35204:	.WORD	L27064	; '?' - переложить вещи в рюкзаке
L35206:	.WORD	L35114	; '@'
L35210:	.WORD	L32222	; 'A' - купить (на золото)
L35212:	.WORD	L30136	; 'B' - заменить батареи
L35214:	.WORD	L35114	; 'C'
L35216:	.WORD	L22466	; 'D' - выбросить предмет
L35220:	.WORD	L24654	; 'E' - поесть
L35222:	.WORD	L27314	; 'F' - приготовиться к сражению
L35224:	.WORD	L35114	; 'G'
L35226:	.WORD	L34046	; 'H' - хелп
L35230:	.WORD	L31636	; 'I' - надеть кольцо
L35232:	.WORD	L30336	; 'J' - обновить экран
L35234:	.WORD	L32600	; 'K' - сломать стенку киркой
L35236:	.WORD	L25436	; 'L' - включить фонарь
L35240:	.WORD	L27742	; 'M' - приготовить оружие
L35242:	.WORD	L27350	; 'N' - идёт начальник (отбой тревоги - 'P')
L35244:	.WORD	L25532	; 'O' - выключить фонарь
L35246:	.WORD	L25242	; 'P' - надеть доспехи
L35250:	.WORD	L21042	; 'Q' - пить
L35252:	.WORD	L30352	; 'R' - читать папирус
L35254:	.WORD	L23200	; 'S' - свистнуть
L35256:	.WORD	L25016	; 'T' - взять предмет, на котором стоишь
L35260:	.WORD	L34272	; 'U' - вызвать джинна (только в безнадёжном случае)
L35262:	.WORD	L32032	; 'V' - снять кольцо
L35264:	.WORD	L25564	; 'W' - взмахнуть волшебной палочкой
L35266:	.WORD	L27616	; 'X' - закончить
L35270:	.WORD	L33724	; 'Y' - зажарить убегающего зверя
L35272:	.WORD	L23010	; 'Z' - перевести деньги в банк на счёт пещеры
; END CASE
; IF
L35274:	TST	000040(R5)
L35300:	BGT	L35306
L35302:	JMP	L35650
; THEN
L35306:	CLR	-(SP)
L35310:	MOV	#000001, -(SP)
L35314:	MOV	#000003, -(SP)
L35320:	CALL	L01046
L35324:	MOV	(SP)+, R0
L35326:	ADD	000012(R5), R0
L35332:	ADD	#177776, R0
L35336:	MOV	R0, 000022(R5)
;
L35342:	CLR	-(SP)
L35344:	MOV	#000001, -(SP)
L35350:	MOV	#000003, -(SP)
L35354:	CALL	L01046
L35360:	MOV	(SP)+, R0
L35362:	ADD	000014(R5), R0
L35366:	ADD	#177776, R0
L35372:	MOV	R0, 000024(R5)
; IF
L35376:	MOV	#L50052, -(SP)		; множество [2..15]
L35402:	CALL	L53634			; PSHSET
L35406:	MOV	000022(R5), -(SP)
L35412:	CALL	L53452			; DOIN
L35416:	BNE	L35424
L35420:	CLR	R0
L35422:	BR	L35430
L35424:	MOV	#000001, R0
L35430:	MOV	#L50042, -(SP)		; множество [2..31]
L35434:	CALL	L53634			; PSHSET
L35440:	MOV	000024(R5), -(SP)
L35444:	CALL	L53452			; DOIN
L35450:	BNE	L35456
L35452:	CLR	R1
L35454:	BR	L35462
L35456:	MOV	#000001, R1
L35462:	COMB	R1
L35464:	BICB	R1, R0
L35466:	BNE	L35474
L35470:	JMP	L35514
; THEN
L35474:	MOV	000022(R5), 000012(R5)
L35502:	MOV	000024(R5), 000014(R5)
L35510:	DEC	000040(R5)
; END IF
L35514:	MOV	000004(R5), R0		; Этаж
L35520:	SWAB	R0
L35522:	BIC	#000377, R0
L35526:	ASL	R0
L35530:	ADD	R5, R0
L35532:	MOV	000012(R5), R1
L35536:	ASL	R1
L35540:	ASL	R1
L35542:	ASL	R1
L35544:	ASL	R1
L35546:	ASL	R1
L35550:	ADD	R0, R1
L35552:	ADD	000014(R5), R1
L35556:	ADD	#000027, R1
L35562:	MOV	R1, 011070(R5)
L35566:	MOV	000004(R5), R0		; Этаж
L35572:	SWAB	R0
L35574:	BIC	#000377, R0
L35600:	ASL	R0
L35602:	ASL	R0
L35604:	ADD	R5, R0
L35606:	MOV	000012(R5), R1
L35612:	ASL	R1
L35614:	ASL	R1
L35616:	ASL	R1
L35620:	ASL	R1
L35622:	ASL	R1
L35624:	ASL	R1
L35626:	ADD	R0, R1
L35630:	MOV	000014(R5), R0
L35634:	ASL	R0
L35636:	ADD	R1, R0
L35640:	ADD	#010772, R0
L35644:	MOV	R0, 033074(R5)
; END IF
L35650:	MOV	#000001, 000020(R5)
L35656:	ADD	000030(R5), 000026(R5)	; Усталость
; IF Фонарь горит
L35664:	TSTB	000047(R5)
L35670:	BNE	L35676
L35672:	JMP	L35702
; THEN
L35676:	DEC	000032(R5)		; Уменьшаем заряд батарей
; END IF
L35702:	MOV	000062(R5), R0
L35706:	ADD	000064(R5), R0
L35712:	MOV	R0, -(SP)
L35714:	MOV	#000012, -(SP)		; 10.
L35720:	CALL	L54230			; DODIV
L35724:	ADD	(SP)+, 000002(R5)
; IF
L35730:	CMP	000002(R5), #000310
L35736:	BGT	L35744
L35740:	JMP	L35760
; THEN
L35744:	CLR	000002(R5)
L35750:	INC	000056(R5)
L35754:	DEC	000060(R5)		; Уменьшаем Энергию
; END IF; IF
L35760:	CMP	000060(R5), #000005	; Энергия < 5 ?
L35766:	BLT	L35774
L35770:	JMP	L36016
; THEN
L35774:	MOV	#L47544, -(SP)		; строка "Силы на исходе"
	MOV	#000016, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
; END IF; IF
L36016:	CMP	000060(R5), #000062	; Энергия > 50. ?
L36024:	BGT	L36032
L36026:	JMP	L36040
; THEN
L36032:	MOV	#000062, 000060(R5)	; Энергия = 50.
; END IF; IF
L36040:	CMP	000032(R5), #000012	; < 10. ?
L36046:	BLT	L36054
L36050:	CLR	R0
L36052:	BR	L36060
L36054:	MOV	#000001, R0
L36060:	COMB	R0
L36062:	MOVB	000047(R5), R1		; Фонарь горит?
L36066:	BICB	R0, R1
L36070:	CMP	000032(R5), #000001
L36076:	BGT	L36104
L36100:	CLR	R0
L36102:	BR	L36110
L36104:	MOV	#000001, R0
L36110:	COMB	R0
L36112:	BICB	R0, R1
L36114:	BNE	L36122
L36116:	JMP	L36144
; THEN
L36122:	MOV	#L47564, -(SP)		; строка "Фонарь гаснет"
	MOV	#000015, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
; END IF; IF
L36144:	CMP	000032(R5), #000001
L36152:	BEQ	L36160
L36154:	JMP	L36174
; THEN
L36160:	DEC	000056(R5)		; Рейтинг
L36164:	CLRB	000047(R5)
L36170:	CLR	000032(R5)
; IF устал
L36174:	CMP	000026(R5), #000310	; Усталость > 200. ?
L36202:	BGT	L36210
L36204:	JMP	L36232
; THEN - предупреждаем об усталости
L36210:	MOV	#L47602, -(SP)		; строка "Отдохнуть-бы"
	MOV	#000014, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
	CALL	$B36			; CR LF
; IF совсем устал
L36232:	CMP	000026(R5), #000327	; Усталость > 215. ?
L36240:	BGT	L36246
L36242:	JMP	L36262
; THEN - слишком устал
L36246:	ADD	#177775, 000060(R5)	; Энергия минус 3
L36254:	MOV	#000062, 000026(R5)	; 50.
; END IF; FOR
L36262:	MOV	R5, R0
L36264:	ADD	#000016, R0
L36270:	MOV	R0, -(SP)
L36272:	MOV	#000001, -(SP)
L36276:	MOV	#000004, -(SP)
L36302:	MOV	000002(SP), @000004(SP)
L36310:	CMP	@000004(SP), (SP)
L36314:	BLE	L36322
L36316:	JMP	L37532
; IF
L36322:	MOV	R5, R0
L36324:	ADD	000016(R5), R0
L36330:	CMPB	033121(R0), #000040
L36336:	BNE	L36344
L36340:	JMP	L37522
; THEN; IF
L36344:	MOV	000016(R5), R0
L36350:	ASL	R0
L36352:	ADD	R5, R0
L36354:	CMP	033134(R0), 000012(R5)
L36362:	BNE	L36370
L36364:	CLR	R0
L36366:	BR	L36374
L36370:	MOV	#000001, R0
L36374:	MOV	000016(R5), R1
L36400:	ASL	R1
L36402:	ADD	R5, R1
L36404:	CMP	033144(R1), 000014(R5)	; -> Позиция X игрока
L36412:	BNE	L36420
L36414:	CLR	R1
L36416:	BR	L36424
L36420:	MOV	#000001, R1
L36424:	BISB	R0, R1
L36426:	BNE	L36434
L36430:	JMP	L37522
; THEN
L36434:	MOV	000016(R5), R0
L36440:	ASL	R0
L36442:	ADD	R5, R0
L36444:	CMP	000012(R5), 033134(R0)
L36452:	BGT	L36460
L36454:	JMP	L36506
; THEN
L36460:	MOV	000016(R5), R0
L36464:	ASL	R0
L36466:	ADD	R5, R0
L36470:	MOV	033134(R0), R0
L36474:	INC	R0
L36476:	MOV	R0, 000022(R5)
L36502:	JMP	L36554
; ELSE IF
L36506:	MOV	000016(R5), R0
L36512:	ASL	R0
L36514:	ADD	R5, R0
L36516:	CMP	000012(R5), 033134(R0)
L36524:	BLT	L36532
L36526:	JMP	L36554
; THEN
L36532:	MOV	000016(R5), R0
L36536:	ASL	R0
L36540:	ADD	R5, R0
L36542:	MOV	033134(R0), R0
L36546:	DEC	R0
L36550:	MOV	R0, 000022(R5)
; END IF; IF
L36554:	MOV	000016(R5), R0
L36560:	ASL	R0
L36562:	ADD	R5, R0
L36564:	CMP	000014(R5), 033144(R0)	; Позиция X игрока
L36572:	BGT	L36600
L36574:	JMP	L36626
; THEN
L36600:	MOV	000016(R5), R0
L36604:	ASL	R0
L36606:	ADD	R5, R0
L36610:	MOV	033144(R0), R0
L36614:	INC	R0
L36616:	MOV	R0, 000024(R5)
L36622:	JMP	L36674
; ELSE IF
L36626:	MOV	000016(R5), R0
L36632:	ASL	R0
L36634:	ADD	R5, R0
L36636:	CMP	000014(R5), 033144(R0)	; Позиция X игрока
L36644:	BLT	L36652
L36646:	JMP	L36674
; THEN
L36652:	MOV	000016(R5), R0
L36656:	ASL	R0
L36660:	ADD	R5, R0
L36662:	MOV	033144(R0), R0
L36666:	DEC	R0
L36670:	MOV	R0, 000024(R5)
; END IF; IF
L36674:	MOV	000004(R5), R0		; Этаж
L36700:	SWAB	R0
L36702:	BIC	#000377, R0
L36706:	ASL	R0
L36710:	ADD	R5, R0
L36712:	MOV	000022(R5), R1
L36716:	ASL	R1
L36720:	ASL	R1
L36722:	ASL	R1
L36724:	ASL	R1
L36726:	ASL	R1
L36730:	ADD	R0, R1
L36732:	ADD	000024(R5), R1
L36736:	MOV	#L50032, -(SP)		; множество ['!','-']
L36742:	CALL	L53634			; PSHSET
L36746:	CLR	-(SP)
L36750:	MOVB	000027(R1), (SP)
L36754:	SUB	#000040, (SP)
L36760:	CALL	L53452			; DOIN
L36764:	BNE	L36772
L36766:	CLR	R0
L36770:	BR	L36776
L36772:	MOV	#000001, R0
L36776:	MOV	000016(R5), R1
L37002:	ASL	R1
L37004:	ADD	R5, R1
L37006:	MOV	033124(R1), R1
L37012:	BIC	#177771, R1
L37016:	CMP	R1, #000004
L37022:	BEQ	L37030
L37024:	CLR	R1
L37026:	BR	L37034
L37030:	MOV	#000001, R1
L37034:	COMB	R1
L37036:	BICB	R1, R0
L37040:	BNE	L37046
L37042:	JMP	L37066
; THEN
L37046:	MOV	R5, R0
L37050:	ADD	000016(R5), R0
L37054:	MOVB	#000040, 033121(R0)
L37062:	JMP	L37522
; ELSE
L37066:	MOV	000004(R5), R0		; Этаж
L37072:	SWAB	R0
L37074:	BIC	#000377, R0
L37100:	ASL	R0
L37102:	ADD	R5, R0
L37104:	MOV	000016(R5), R1
L37110:	ASL	R1
L37112:	ADD	R5, R1
L37114:	MOV	033134(R1), R1
L37120:	ASL	R1
L37122:	ASL	R1
L37124:	ASL	R1
L37126:	ASL	R1
L37130:	ASL	R1
L37132:	ADD	R0, R1
L37134:	MOV	000016(R5), R0
L37140:	ASL	R0
L37142:	ADD	R5, R0
L37144:	ADD	033144(R0), R1
L37150:	MOVB	#000056, 000027(R1)	; '.'
;
L37156:	MOV	000016(R5), R0
L37162:	ASL	R0
L37164:	ADD	R5, R0
L37166:	MOV	033134(R0), -(SP)
L37172:	MOV	000016(R5), R0
L37176:	ASL	R0
L37200:	ADD	R5, R0
L37202:	MOV	033144(R0), -(SP)
L37206:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L37212:	MOV	#000056, -(SP)		; '.'
L37216:	CLR	-(SP)
L37220:	CALL	L52224			; вывод символа
L37224:	MOV	000004(R5), R0		; Этаж
L37230:	SWAB	R0
L37232:	BIC	#000377, R0
L37236:	ASL	R0
L37240:	ADD	R5, R0
L37242:	MOV	000022(R5), R1
L37246:	ASL	R1
L37250:	ASL	R1
L37252:	ASL	R1
L37254:	ASL	R1
L37256:	ASL	R1
L37260:	ADD	R0, R1
L37262:	ADD	000024(R5), R1
L37266:	MOV	R5, R0
L37270:	ADD	000016(R5), R0
L37274:	MOVB	033121(R0), 000027(R1)
L37302:	MOV	000022(R5), -(SP)
L37306:	MOV	000024(R5), -(SP)
L37312:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L37316:	MOV	R5, R0
L37320:	ADD	000016(R5), R0
L37324:	CLR	-(SP)
L37326:	MOVB	033121(R0), (SP)
L37332:	CLR	-(SP)
L37334:	CALL	L52224			; вывод символа
;
L37340:	MOV	000004(R5), R0		; Этаж
L37344:	SWAB	R0
L37346:	BIC	#000377, R0
L37352:	ASL	R0
L37354:	ASL	R0
L37356:	ADD	R5, R0
L37360:	MOV	000022(R5), R1
L37364:	ASL	R1
L37366:	ASL	R1
L37370:	ASL	R1
L37372:	ASL	R1
L37374:	ASL	R1
L37376:	ASL	R1
L37400:	ADD	R0, R1
L37402:	MOV	000024(R5), R0
L37406:	ASL	R0
L37410:	ADD	R1, R0
L37412:	MOV	000016(R5), R1
L37416:	ASL	R1
L37420:	ADD	R5, R1
L37422:	MOV	033124(R1), 010772(R0)
;
L37430:	MOV	000016(R5), R0
L37434:	ASL	R0
L37436:	ADD	R5, R0
L37440:	MOV	000022(R5), 033134(R0)
L37446:	MOV	000016(R5), R0
L37452:	ASL	R0
L37454:	ADD	R5, R0
L37456:	MOV	000024(R5), 033144(R0)
L37464:	MOV	#000022, -(SP)		; 18.
L37470:	CLR	-(SP)
L37472:	CALL	L01216			; Поставить курсор на позицию (X*2,Y)
L37476:	MOV	#000033, -(SP)
L37502:	CLR	-(SP)
L37504:	CALL	L52224			; вывод символа
L37510:	MOV	#000113, -(SP)
L37514:	CLR	-(SP)
L37516:	CALL	L52224			; вывод символа
; END IF
L37522:	INC	@000004(SP)
L37526:	JMP	L36310
L37532:	ADD	#000006, SP		; завершение FOR
; IF
L37536:	TST	000060(R5)		; Энергия
L37542:	BLT	L37550
L37544:	JMP	L37660
; THEN - Умер от недостатка Энергии
L37550:	CLR	-(SP)
L37552:	MOV	#000012, -(SP)
L37556:	MOV	#001750, -(SP)		; 1000.
L37562:	CALL	L01046
L37566:	MOV	(SP)+, R0
L37570:	MOV	R0, 000016(R5)
L37574:	MOV	#L47620, -(SP)		; строка "Вот Вы и стали"
	MOV	#000017, -(SP)		; 15. символов
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L37612:	MOV	000016(R5), -(SP)
L37616:	MOV	#000004, -(SP)
L37622:	CALL	L52306			; вывод числа
L37626:	MOV	#L47640, -(SP)		; строка "-ой жертвой этого подземелья."
	MOV	#000035, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L37644:	CALL	$B36			; CR LF
L37650:	MOV	050406, SP		; Возвращаем SP к исходному значению
L37654:	JMP	L40120			; выход из игрового цикла
; Энергия пока есть - продолжаем; IF
L37660:	TST	000004(R5)		; Этаж
L37664:	BEQ	L37672
L37666:	JMP	L40114
; THEN; IF
L37672:	TSTB	000046(R5)
L37676:	BNE	L37704
L37700:	JMP	L40114
; THEN; IF
L37704:	CMP	000012(R5), #000002
L37712:	BEQ	L37720
L37714:	CLR	R0
L37716:	BR	L37724
L37720:	MOV	#000001, R0
L37724:	CMP	000014(R5), #000002
L37732:	BEQ	L37740
L37734:	CLR	R1
L37736:	BR	L37744
L37740:	MOV	#000001, R1
L37744:	COMB	R1
L37746:	BICB	R1, R0
L37750:	BNE	L37756
L37752:	JMP	L40114
; IF 000066(R5) >= 0 -- есть ли деньги
L37756:	TST	000066(R5)		; В банке есть деньги?
L37762:	BGE	L37770			; да
L37764:	JMP	L40072			; нет
L37770:	MOV	#L47676, -(SP)		; строка "Как, Вы вернулись?! Ну и ну !!! А дальше пойдете?"
	MOV	#000062, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L40006:	MOV	R5, R0
L40010:	ADD	#000053, R0		; R0 = адрес 000053(R5)
L40014:	MOV	R0, -(SP)		;
L40016:	CALL	L01166			; Ввод символа
; IF 000053(R5) = 'Y'
L40022:	CMPB	000053(R5), #000131	; = 'Y'
L40030:	BEQ	L40036			; да
L40032:	JMP	L40056			; нет
L40036:	INC	(R5)			; следующее подземелье
L40040:	ADD	#000062, 000056(R5)	; Рейтинг +50.
L40046:	MOV	050406, SP		; Возвращаем SP к исходному значению
L40052:	JMP	L06650			; рестарт игры
; ответили НЕТ на "А дальше пойдете?"
L40056:	MOV	050406, SP		; Возвращаем SP к исходному значению
L40062:	JMP	L40120			; завершаем игровой цикл
L40066:	JMP	L40114
; ELSE -- нет денег
L40072:	MOV	#L47762, -(SP)		; строка "А расплачиваться кто будет?"
	MOV	#000033, -(SP)		; длина строки
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L40110:	CALL	$B36			; CR LF
; END IF
L40114:	JMP	L12254			; продолжение цикла
; После игрового цикла приходим сюда
L40120:	MOV	000060(R5), R0		; Энергия
L40124:	ADD	000062(R5), R0		; Оружие
L40130:	ADD	000064(R5), R0		; Защита
L40134:	MOV	000066(R5), -(SP)	; Деньги
L40140:	MOV	#000005, -(SP)
L40144:	CALL	L54230			; DODIV
L40150:	ADD	(SP)+, R0
L40152:	MOV	R0, -(SP)
L40154:	MOV	#000003, -(SP)
L40160:	CALL	L54230			; DODIV
L40164:	MOV	000056(R5), R0
L40170:	ADD	(SP)+, R0
L40172:	MOV	R0, 000016(R5)
;
L40176:	MOV	#L50016, -(SP)		; строка "Ваш счет -"
	MOV	#000012, -(SP)		; длина строки = 10.
	CLR	-(SP)			;
	CALL	$B32			; вывод строки
L40214:	MOV	000016(R5), -(SP)
L40220:	MOV	#000005, -(SP)
L40224:	CALL	L52306			; вывод числа
L40230:	JMP	$END			; JMP $END -> EXIT
;
; Блок строк
;
T40234::
L40234:	.ASCIZ	/*** /<000>
L40242:	.ASCIZ	/***/
L40246:	.ASCII	<040><033><110><033><112><033><131><033><040><040><177><177>
	.ASCIZ	/ С Т А Л К Е Р /<177><177>/       /<000>
L40314:	.ASCIZ	/загадайте число. может быть, оно вам пригодится... там... /<000>
L40410:	.ASCIZ	/   Для подсказки нажимайте "H" /
L40450:	.ASCIZ	<011><011>/Темный  коридор ...     /<000>
L40504:	.ASCIZ	<011><011>/С к е л е т ы . . .   /<000>
L40536:	.ASCIZ	<011>/a-a-a-a-a-a-a-a-a-a-a-a-a . . . . . . ./<000>
L40610:	.ASCIZ	/Прогнивший пол провалился.../<000>
L40646:	.ASCIZ	/Лестница./
L40660:	.ASCIZ	/Золото./
L40670:	.ASCIZ	/Золотой шар!!!/<000>
L40710:	.ASCIZ	/Волшебная кирка./<000>
L40732:	.ASCIZ	/Бутылка с надписью "Drink me!"/<000>
L40772:	.ASCIZ	/Черная дыра/
L41006:	.ASCIZ	/Ой, как больно!.../<000>
L41032:	.ASCIZ	/Кольцо./
L41042:	.ASCIZ	/Ведьмин студень!/<000>
L41064:	.ASCIZ	/Доспехи./<000>
L41076:	.ASCIZ	/Оружие./
L41106:	.ASCIZ	/Свисток./<000>
L41120:	.ASCIZ	/Еда!!!/<000>
L41130:	.ASCIZ	/"ВП"./
L41136:	.ASCIZ	/Батареи./<000>
L41150:	.ASCIZ	/Комариная плешь/
L41170:	.ASCIZ	/Папирус./<000>
L41202:	.ASCIZ	/Холодная, скользкая рука схватила вас за ногу .../
L41264:	.ASCIZ	/Ну, сейчас он вам покажет.../<000>
L41322:	.ASCIZ	/Защищайтесь же!!!/
L41344:	.ASCIZ	/Готов!/<000>
L41354:	.ASCIZ	/Недурственно!/
L41372:	.ASCIZ	/Тьфу.../
L41402:	.ASCIZ	/Свертoк. съедим?/<000>
L41424:	.ASCIZ	/Надпись "Здесь был Вася"(здесь Вася и остался)/<000>
L41504:	.ASCIZ	/Груда камней./
L41522:	.ASCIZ	/Метла бабы яги (сломана)/<000>
L41554:	.ASCIZ	/Череп./<000>
L41564:	.ASCIZ	/Странствующий скелет/<000>
L41612:	.ASCIZ	/Стадо бродячих живых трупов./<000>
L41650:	.ASCIZ	/Кусочек Ноева ковчега/
L41676:	.ASCIZ	/Записка:" Зря ты сюда полез, парень... Автор. "/
L41756:	.ASCIZ	/Черный ящик./<000>
L41774:	.ASCIZ	/Лужа машинного масла/<000>
L42022:	.ASCIZ	/Раздолбанный компьютер ZX SPECTRUM - 128./
L42074:	.WORD	0, 0
L42100:	.ASCIZ	/Дохлый морлок/
L42116:	.ASCIZ	/Зуда./
L42124:	.ASCIZ	/Пустышка./
L42136:	.ASCIZ	/Куча сепулек./
L42154:	.ASCIZ	/Разложившийся труп девушки./
L42210:	.WORD	0, 0, 0
L42216:	.ASCIZ	/Надпись: "Мы до тебя еще доберемся!!! "/
L42266:	.WORD	0
L42270:	.ASCIZ	/Отрезанная голова предыдущего Сталкера./
L42340:	.WORD	0, 0, 0, 0, 0, 0, 0, 0, 0
L42362:	.ASCIZ	/Зачитанный журнал "АКУШЕРСТВО И ГИНЕКОЛОГИЯ"/<000>
L42440:	.WORD	0, 0
L42444:	.ASCIZ	/Артефакт./
L42456:	.ASCIZ	/Надпись "Здесь-то мы его и съели"/
L42520:	.ASCIZ	/Окровавленная бензопила/
L42550:	.ASCIZ	/Что-то очень мерзкое/<000>
L42576:	.ASCIZ	/Следы пикника./<000>
L42616:	.ASCIZ	/Кладбище снусмумриков./<000>
L42646:	.WORD	0, 0, 0, 0
L42656:	.ASCIZ	/Черт-те что./<000>
L42674:	.ASCIZ	/Бродячий торговый автомат/
L42726:	.ASCIZ	/Пережаренный зелюк./
L42752:	.ASCIZ	/Мышелот (в собственном соку)/<000>
L43010:	.ASCIZ	/Призрак./<000>
L43022:	.ASCIZ	/Мешок с надписью "Take me!"/
L43056:	.ASCIZ	/Чувствуете прилив сил?/<000>
L43106:	.ASCIZ	/Напился - сдай стеклотару!!!!/
L43144:	.ASCIZ	/Пить нечего/
L43160:	.ASCIZ	/Что выбросить? /
L43200:	.ASCIZ	/Нету/<000>
L43206:	.ASCIZ	/Там!/<000>
L43214:	.ASCIZ	/Где золото-тo?/<000>
L43234:	.ASCIZ	/Б А М - М - М ! ! !/
L43260:	.ASCIZ	/Уничтожение зверя/
L43302:	.ASCIZ	/Однакo, свисток нужен/
L43330:	.ASCIZ	/Спасибо!/<000>
L43342:	.ASCIZ	/Еды нет/
L43352:	.ASCIZ	/Берем/
L43360:	.ASCIZ	/Рюкзак полон/<000>
L43376:	.ASCIZ	/Доспехи надеты/<000>
L43416:	.ASCIZ	/Нету/<000>
L43424:	.ASCIZ	/Фонарь включен/<000>
L43444:	.ASCIZ	/Батареи сели.Надо было экономить ... /
L43512:	.ASCIZ	/Фонарь выключен/
L43532:	.ASCIZ	/Выпустили до госприемки.../<000>
L43566:	.ASCIZ	/"Да будет свет..."/<000>
L43612:	.ASCIZ	/Пока Вы летели сквозь этажи, "ВП" потерялась/<000>
L43670:	.ASCIZ	/Превращение догоняющего зверя/
L43726:	.ASCIZ	/Махать-то нечем !/
L43750:	.ASCIZ	/Перестройка в рюкзаке/
L43776:	.ASCIZ	/У-р-р-р-а-a ! ! !/
L44020:	.ASCIZ	/Закончить изволите? /<000>
L44046:	.ASCIZ	/А ведь придупреждали.../
L44076:	.ASCIZ	/Оружие приготовлено/
L44122:	.ASCIZ	/Нету!/
L44130:	.ASCIZ	/Батареи заменены/<000>
L44152:	.ASCIZ	/Батарей нет/
L44166:	.ASCIZ	/"APCHXYZZYURR!!!"... Заклятие снято/
L44232:	.ASCIZ	/Надпись гласит: "Сам дурак"/
L44266:	.ASCIZ	/Лестница -/<000>
L44302:	.ASCIZ	/Золотой шар украден!/<000>
L44330:	.ASCIZ	/Золотой шар - 8/
L44350:	.ASCIZ	/А читать-то и нечего/<000>
L44376:	.ASCIZ	/Силовое поле включено!/<000>
L44426:	.ASCIZ	/Нету/<000>
L44434:	.ASCIZ	/Рюкзак полон/<000>
L44452:	.ASCIZ	/Кольца нет/<000>
L44466:	.ASCIZ	/Чего изволите?/<000>
L44506:	.ASCIZ	/П о л у ч и т е !/
L44530:	.ASCIZ	/Подаю только по пятницам!/
L44562:	.ASCIZ	/Подойди ближе к автомату!/
L44614:	.ASCIZ	/Направление? /
L44632:	.ASCIZ	/Кусок свода обрушился и раскололся о вашу глупую голову/
L44722:	.ASCIZ	/Ну, чего размахался?/<000>
L44750:	.ASCIZ	/А стенку вы будете лбом прошибать?../<000>
;
L45016:	.ASCII	/J/<015><012>
	.ASCII	/Ладно, я кое-что подскажу. Итак: здесь творится черт знает что,/<015><012>
	.ASCII	/но на восьмом уровне лежит золотой шар. Только достав его, Вы/<015><012>
	.ASCII	/сможете выйти из подземелья,придя на то же место, откуда вы вышли/<015><012>
	.ASCII	/вначале. Своим глазам не всегда стоит доверять!/<015><012>
	.ASCII	/ Вы можете использовать команды:/<015><012>
	.ASCII	/A - Купить (на золото)/<015><012>
	.ASCII	/B - Заменить батареи/<015><012>
	.ASCII	/D - Выбросить предмет/<015><012>
	.ASCII	/E - Поесть/<015><012>
	.ASCII	/F - Приготовиться к сражению/<015><012>
	.ASCII	/H - HELP (этот текст)/<015><012>
	.ASCII	/I - Надеть кольцо/<015><012>
	.ASCII	/J - Обновить экран/<015><012>
	.ASCII	/K - Сломать стенку (киркой)/<015><012>
	.ASCII	/L - Включить фонарь/<015><012>
	.ASCII	/M - Приготовить оружие/<015><012>
	.ASCII	/N - Клавиша "Идет начальник" (отбой тревоги - "P")/<015><012>
	.ASCII	/O - Выключить фонарь/<015><012>
	.ASCII	/P - Надеть доспехи/<015><012>
	.ASCII	/Q - Пить/<015><012>
	.ASCII	/R - Читать папирус/<015><012>
	.ASCII	/S - Свистнуть/<015><012>
	.ASCII	/T - Взять предмет, на клтором стоишь/<015><012>
	.ASCII	/U - Вызвать джинна (только в безнадежном случае!).../
	.ASCIZ	<011>/Дальше? /<000>
L46416:	.ASCII	<015><012>
	.ASCII	/V - Снять кольцо/<015><012>
	.ASCII	/W - Взмахнуть волшебной палочкой/<015><012>
	.ASCII	/X - Закончить/<015><012>
	.ASCII	/Y - Зажарить убегающего зверя/<015><012>
	.ASCII	/Z - Перевести деньги в банк на счет пещеры./<015><012>
	.ASCII	<057>/ - Переложить вещи в рюкзаке/<015><012>
	.ASCII	/   П Е Р Е Д В И Ж Е Н И Е:/<015><012><015><012>
	.ASCII	<011>/7 8 9/<015><012>
	.ASCII	<011>/4   6 /<011>/- Движение по уровню/<015><012>
	.ASCII	<011>/1 2 3/<015><012>
	.ASCII	/5 - Внмз по лестнице/<015><012>
	.ASCII	/. - Вверх по лестнице/<015><012>
	.ASCII	/0 - Отдыхать./<015><012><015><012>
	.ASCII	/Использовать можно лишь вещи, лежащие в рюкзаке./<015><012>
	.ASCII	/Примечание:/<015><012>
	.ASCII	<011>/Волшебная кирка вынесет вас из "комариной плеши" при ударе ей вниз./<015><012>
	.ASCII	<015><012>
	.ASCIZ	/Ну, что, пойдем дальше?/
L47350:	.ASCII	/Что, влип? ладно, попробую тебя перенести /<015><012>
	.ASCII	/отсюда. только дороговато это встанет.../<015><012>
	.ASCIZ	/Ты готов? /<000>
L47512:	.ASCIZ	/Джинн в отгуле/<000>
L47532:	.ASCIZ	/Что-что?/<000>
L47544:	.ASCIZ	/Силы на исходе/<000>
L47564:	.ASCIZ	/Фонарь гаснет/
L47602:	.ASCIZ	/Отдохнуть-бы/<000>
L47620:	.ASCIZ	<011>/Вот Вы и стали/
L47640:	.ASCIZ	/-ой жертвой этого подземелья./
L47676:	.ASCIZ	/Как, Вы вернулись?! Ну и ну !!!/<015><012>/А дальше пойдете?/<000>
L47762:	.ASCIZ	/А расплачиваться кто будет?/
L50016:	.ASCIZ	/Ваш счет -/<000>
	.EVEN
;
L50032:	.WORD	020002,000000,000000,000000	; '!','-' - стенки
L50042:	.WORD	177774,177777,000000,000000	; 2..31
L50052:	.WORD	177774,000000,000000,000000	; 2..15
L50062:	.WORD	000000,000000,177776,003777	; 'A'..'Z'
L50072:	.WORD	020002,000000,000000,000000	; '!','-' - стенки
L50102:	.WORD	177774,177777,000000,000000	; '"'..'?'
L50112:	.WORD	177774,000000,000000,000000	; '"'..'/'
L50122:	.WORD	000000,000002,000006,000000	; '1','A','B'
L50132:	.WORD	000000,000000,000020,001000	; 'D','Y' - ответы ДА
L50142:	.WORD	000204,000000,000000,000000	; '"','\''
L50152:	.WORD	000000,000000,177776,003777	; 'A'..'Z'
L50162:	.WORD	177774,177777,000000,000000	; '"'..'?'
L50172:	.WORD	177774,000000,000000,000000	; 2..15
L50202:	.WORD	000204,000000,000000,000000	; '"','\''
L50212:	.WORD	060012,000000,000000,000000	; '!','#','-','.'
L50222:	.WORD	020002,000000,000000,000000	; '!','-' - стенки
;
; Продедура RANDU из FORLIB.OBJ
; Генерирует случайное число от 0 до 1
RANDU::
L50232:	CMPB	(R5), #000002
	BNE	L50352
	TST	(R5)+
	MOV	(R5)+, R2
	MOV	(R5)+, R3
	MOV	(R2), R0
	MOV	(R3), R1
	BEQ	L50342
	ASL	R1
	ROL	R0
	ADD	(R2), R0
	ADD	(R3), R1
	ADC	R0
	ADD	(R3), R0
	BPL	L50276
	ADD	#100000, R0
L50276:	MOV	R0, (R2)
	MOV	R1, (R3)
	MOV	#201, R2
L50306:	ASL	R1
	ROL	R0
	BLO	L50320
	DEC	R2
	BR	L50306
L50320:	CLRB	R1
	BISB	R0, R1
	SWAB	R1
	CLRB	R0
	BISB	R2, R0
	SWAB	R0
	ROR	R0
	ROR	R1
	BR	L50354
L50342:	MOV	#3, R1
	INC	R0
	BR	L50276
L50352:	TRAP	220
L50354:	RETURN
;
; Модуль SUPMON данные
$END::
L50356:	EMT	350			; .EXIT
L50360:	.WORD	000000
$DEFLE::
L50362:	.WORD	000003
$DEFEX::
L50364:	.WORD	B.10
B.10:
L50366:	.ASCIZ	"DAT"
CH0OPT::
CH0PTR::
$TTY::
L50372:	.WORD	060012
FILE::
L50374:	.WORD	000000
SETR0::
L50376:	.WORD	000000
$KORE::
L50400:	.WORD	0			; $KORE
CHNMAP::
	.WORD	100000
$FREE::
L50404:	.WORD	0
$RESR6::
L50406:	.WORD	001000			; Адрес вершины стека
$RESR5::
L50410:	.WORD	060016			; Базовый адрес в R5
$SAV10::
	.WORD	000010
RTAREA::
L50414:	.WORD	000000			; Блок для EMT 375
L50416:	.WORD	000000
	.WORD	000000, 000000, 000000, 000000, 000000, 000000, 000000, 000000
	.WORD	000000, 000000, 000000, 000000, 000000, 000000
CRLF::
L50454:	.ASCIZ	<015><012>		; CR LF
L50457:	.ASCIZ	/ - FROM PC /
L50473:	.ASCIZ	/TRAP TO 4/
L50505:	.ASCIZ	/BAD SUPPORT PACKAGE/<015><012>
BADDEV::.ASCIZ	/NOT A VALID DEVICE/
NOTOPN::.ASCIZ	/I/<057>/O CHANNEL NOT OPEN/
EOFERR::.ASCIZ	/END OF FILE ON DEVICE/
VERERR::.ASCIZ	/SUPPORT CONDITIONALS ERROR/
RESRVD::.ASCIZ	/RESERVED INSTRUCTION TRAP/
OVRFLO::.ASCIZ	/INTEGER ERROR/
EXPOVR::.ASCIZ	/EXP OVERFLOW/
LOGNEG::.ASCIZ	/LOG OF NEGATIVE/
SQRNEG::.ASCIZ	/SQRT OF NEGATIVE/
DIVZER::.ASCIZ	/DEVIDE BY ZERO/
MISSNG::.ASCIZ	/MISSING SPECIAL FEATURE/
COROVR::.ASCIZ	/NOT ENOUGH AVAILABLE MEMORY/
NEWOF0::.ASCIZ	/NEW OF LENGTH 0/
SETBIG::.ASCIZ	/BAD SET EXPRESSION/
FATLIO::.ASCIZ	/FATAL I/<057>/O ERROR/
ARRERR::.ASCIZ	/ARRAY BOUNDS ERROR/
TOOMNY::.ASCIZ	/TOO MANY FILES OPEN/
	.EVEN
;
; Модуль SUPMON
; $START - адрес старта; стек на 001000
START::
L51250:	MOV	$RESR5, R5		; (050410) = 060016 -> R5
	MOV	R5, $KORE
	CLR	$FREE
	MOV	#177776, R0
	EMT	354			; .SETTOP
	MOV	R0, SP			; Ставим стек по SETTOP
	MOV	R0, $RESR6		; И запоминаем адрес начальный адрес SP
	CMP	#000073, #000073	; очевидно, всегда равно
	BEQ	L51322			; и тут всегда переход
	MOV	#L50505, R0		; адрес строки "BAD SUPPORT PACKAGE"
	CALL	TYPER			; вывод строки R0
	EMT	350			; .EXIT
L51322:	MOV	#RTAREA, R0		; адрес буфера для EMT 375
	MOV	#1400, (R0)		; code = 3, chan = 0
	MOV	#L51440, 2(R0)
	EMT	375			; .PURGE #0
	JMP	$BEGIN
;
; Подпрограмма TYPER: Вывод строки символов R0
TYPER::
	MOV	R1, -(SP)
	MOV	R0, R1
	BR	C.110
C.104:
	EMT	341			; .TTYOUT
	BLO	C.104			;
C.110:
	MOVB	(R1)+, R0		; берём символ
	BNE	C.104			; не ноль => переход
	MOV	(SP)+, R1
	RETURN
;
SAVREG::
L51370:	MOV	R4, -(SP)
	MOV	R3, -(SP)
	MOV	R2, -(SP)
	MOV	R1, -(SP)
	MOV	R0, -(SP)
	MOV	12(SP), -(SP)
	MOV	R5, 14(SP)
	RETURN
;
RESREG::
L51414:	MOV	14(SP), R5
	MOV	(SP)+, 12(SP)
	MOV	(SP)+, R0
	MOV	(SP)+, R1
	MOV	(SP)+, R2
	MOV	(SP)+, R3
	MOV	(SP)+, R4
	RETURN
L51440:	BLO	L51504
	MOV	#L50473, R0
	CALL	TYPER			; вывод строки R0
	MOV	#L50457, R0		; строка " - FROM PC "
	CALL	TYPER			; вывод строки R0
	MOV	(SP), R0
	CALL	L51574
	MOV	#CRLF, R0
	CALL	TYPER			; вывод строки R0
	JMP	$END
L51504:	MOV	R0, -(SP)
	MOV	#050434, R0
	MOV	#1400, (R0)
	MOV	#051440, 2(R0)
	EMT	375
	MOV	(SP)+, R0
	JMP	SUPSIM
RTERR::
L51534:	MOV	(R5), R0
	CALL	TYPER			; вывод строки R0
	MOV	#L50457, R0		; строка " - FROM PC "
	CALL	TYPER			; вывод строки R0
	MOV	R5, R0
	CALL	L51574
	MOV	#CRLF, R0
	CALL	TYPER			; вывод строки R0
	JMP	$END
L51574:	MOV	R0, -(SP)
	MOV	R1, -(SP)
	MOV	R0, R1
	MOV	#30, R0
	ROL	R1
	ROL	R0
L51612:	EMT	341		; .TTYOUT
	BLO	L51612
	BIS	#1, R1
L51622:	MOV	#6, R0
	CLC
	ROL	R1
	ROL	R0
	ROL	R1
	ROL	R0
	ROL	R1
	ROL	R0
L51644:	EMT	341		; .TTYOUT
	BLO	L51644
	CMP	R1, #100000
	BNE	L51622
	MOV	(SP)+, R1
	MOV	(SP)+, R0
	RETURN
;
; Модуль SUPRLN
; Процедура
RDLN::
$B16::
L51664:	MOV	#CH0PTR, FILE
RDLNFL::
$B18::
L51672:	JSR	R5, SETIO
	.WORD	4
	BIT	#140000, (R4)
	BMI	L51740
	BNE	L51720
L51710:	CALL	GETCHR
	BEQ	L51710
	BR	L51734
L51720:	CALL	GETCHR
	BNE	L51734
	CALL	BACKUP
	RETURN
L51734:	CALL	LOOKER
L51740:	RETURN
;
; Модуль SUPRNM
; Процедура
RDNM::
$B4::
L51742:	MOV	#CH0PTR, FILE
RDNMFL::
$B6::
L51750:	MOV	(SP), -(SP)
L51752:	JSR	R5, 056732
L51756:	.WORD	000004
L51760:	MOV	R1, -(SP)
L51762:	MOV	R2, -(SP)
L51764:	MOV	R3, -(SP)
L51766:	CLR	R2
L51770:	CLR	R1
L51772:	CLR	R3
L51774:	BR	L52000
L51776:	MOV	(PC), R2
L52000:	CALL	GETCHR
L52004:	BMI	L52054
L52006:	BIC	#177600, R0
L52012:	CMP	R0, #000040		; ' '
L52016:	BLOS	L52000
L52020:	CMP	R0, #000053		; '+'
L52024:	BEQ	L52000
L52026:	CMP	R0, #000054		; ','
L52032:	BEQ	L52000
L52034:	CMP	R0, #000055		; '-'
L52040:	BEQ	L51776
L52042:	SUB	#000072, R0
L52046:	ADD	#000012, R0
L52052:	BLO	L52110
L52054:	COM	R3
L52056:	BR	L52120
L52060:	SUB	#000072, R0
L52064:	ADD	#000012, R0
L52070:	BHIS	L52120
L52072:	ASL	R1
L52074:	MOV	R1, -(SP)
L52076:	ASL	R1
L52100:	ASL	R1
L52102:	ADD	(SP)+, R1
L52104:	BHIS	L52110
L52106:	MOV	(PC), R3
L52110:	ADD	R0, R1
	CALL	GETCHR
	BEQ	L52060
L52120:	CALL	BACKUP
	TST	R2
	BEQ	L52132
	NEG	R1
L52132:	TST	R3
	BEQ	L52146
	MOV	#L52162, R0		; строка "Bad integer"
	CALL	TYPER			; вывод строки R0
L52146:	MOV	R1, 22(SP)
	MOV	(SP)+, R3
	MOV	(SP)+, R2
	MOV	(SP)+, R1
	RETURN
; SUPRNM data
L52162:	.ASCIZ	/Bad integer/
;
; Модуль SUPWLN
; Подпрограмма: Перевод строки возврат каретки
WRLN::
$B36::
L52176:	MOV	#CH0OPT, FILE
WRLNFL::
$B38::
L52204:	MOV	#CRLF, -(SP)		; адрес строки CR LF
	MOV	#2, -(SP)		; два символа
	CLR	-(SP)			;
	CALL	WRSTGF			; вывод строки
	RETURN
;
; Модуль SUPWCH
; Процедура $B20: вывод символа, два слова на стеке
WRCH::
$B20::
L52224:	MOV	#CH0OPT, FILE
WRCHFL::
$B22::
L52232:	JSR	R5, SETIO
	.WORD	10
	MOV	R1, -(SP)
	MOV	16(SP), R1
	DEC	R1
	BLE	L52266
	MOV	#40, R0			; пробел
L52256:	CALL	PUTCHR			; вывод символа
	DEC	R1
	BNE	L52256
L52266:	MOV	20(SP), R0
	CALL	PUTCHR			; вывод символа
	CALL	FORCE
	MOV	(SP)+, R1
	RETURN
;
; Модуль SUPWNM
; Процедура вывода числа, два слова на стеке
WRNM::
L52306:	MOV	#CH0OPT, FILE
WRNMFL::
$B26::
L52314:	CALL	L56730			; CHKOPN
	CALL	SAVREG
	CLR	R3
	MOV	20(SP), R1
	MOV	16(SP), R5
	BNE	L52344
	MOV	#15, R5
L52344:	BPL	L52364
	ADD	#7, R5
	NEG	R5
	INC	R3
	MOV	#L52612, R4
	BR	L52410
L52364:	SUB	#5, R5
	CMP	R1, #100000
	BLO	L52404
	DEC	R5
	COM	R3
	NEG	R1
L52404:	MOV	#L52626, R4
L52410:	CLR	R2
	TST	R5
	BLE	L52432
	MOV	#40, R0			; пробел
L52422:	CALL	PUTCHF			; вывод символа
	DEC	R5
	BNE	L52422
L52432:	TST	(R4)+
	BEQ	L52452
	CLR	R0
	ROL	R1
	ROL	R0
	ROR	R1
	TST	R0
	BR	L52476
L52452:	CMP	(R4), #000001
	BNE	L52462
	INC	R2
L52462:	CLR	R0
L52464:	INC	R0			; реализация DIV (R4)+, R0
	SUB	(R4), R1		;
	BPL	L52464			;
	ADD	(R4)+, R1		;
	DEC	R0			;
L52476:	BNE	L52516
	TST	R2
	BNE	L52516
	INC	R5
	BLE	L52552
	MOV	#40, R0			; пробел
	BR	L52546
L52516:	INC	R2
	ADD	#60, R0			; +'0'
	TST	R3
	BGE	L52546
	CLR	R3
	MOV	R0, -(SP)
	MOV	#55, R0			; '-'
	CALL	PUTCHF
	MOV	(SP)+, R0
L52546:	CALL	PUTCHF			; вывод символа
L52552:	TST	(R4)
	BNE	L52452
	TST	R3
	BLE	L52572
	MOV	#102, R0		; 'B'
	CALL	PUTCHF
L52572:	CALL	L60014
	CALL	RESREG
	MOV	(SP)+, (SP)
	MOV	(SP)+, (SP)
	JMP	L57006
L52612:	.WORD	177777, 010000, 001000
	.WORD	000100, 000010, 000001
L52626:	.WORD	0, 10000., 1000., 100., 10., 1, 0
;
; Модуль SUPWST
; Процедура: Вывод строки, 3 слова на стеке
WRSTG::
$B32::
L52644:	MOV	#CH0OPT, FILE
WRSTGF::
$B34::
L52652:	JSR	R5, SETIO
	.WORD	12
	MOV	R1, -(SP)
	MOV	R2, -(SP)
	MOV	20(SP), R1
	MOV	22(SP), R2
	SUB	R2, R1
	BLE	L52714
	MOV	#40, R0		; ' '
L52704:	CALL	PUTCHR		; вывод символа
	DEC	R1
	BNE	L52704
L52714:	MOV	24(SP), R1
	TST	R2
	BEQ	L52736
L52724:	MOVB	(R1)+, R0
	CALL	PUTCHR		; вывод символа
	DEC	R2
	BNE	L52724
L52736:	CALL	FORCE
	MOV	(SP)+, R2
	MOV	(SP)+, R1
	RETURN
;
; Модуль SUPFLO
$B88::
$FLOAT::
L52750:	MOV	(SP), -(SP)
	MOV	R0, -(SP)
	CLR	R0
	CLR	4(SP)
	TST	6(SP)
	BGT	L53010
	NEG	6(SP)
	BGT	L53004
	CLR	6(SP)
	BR	L53052
L53004:	BIS	#100000, R0
L53010:	BIS	#46000, R0
L53014:	ASL	6(SP)
	ROL	4(SP)
	SUB	#200, R0
	BIT	#200, 4(SP)
	BEQ	L53014
	BIC	#200, 4(SP)
	BIS	R0, 4(SP)
L53052:	MOV	(SP)+, R0
	RETURN
;
; Модуль SUPFIX
ROUND::
$B108::
L53056:	MOV	#000000, -(SP)
L53062:	MOV	#040000, -(SP)
L53066:	MOV	10(SP), -(SP)
L53072:	MOV	10(SP), -(SP)
L53076:	BPL	L53106
L53100:	BIS	#100000, 4(SP)
L53106:	CALL	FASTAD
	MOV	(SP)+, 4(SP)
	MOV	(SP)+, 4(SP)
$B86::
$TRUNC::
L53122:	MOV	R0, -(SP)
	MOV	R1, -(SP)
	MOV	R2, -(SP)
	MOV	10(SP), R0
	BEQ	L53250
	MOV	R0, R1
	MOV	12(SP), R2
	BIC	#177600, R1
	BIS	#200, R1
	ASL	R0
	SWAB	R0
	BIC	#177400, R0
	SUB	#200, R0
	BLE	L53250
	SUB	#30, R0
	CMP	R0, #177770
	BLT	L53212
	JSR	R5, RTERR
	.WORD	OVRFLO		; "INTEGER ERROR"
L53212:	ASR	R1
	ROR	R2
	INC	R0
	BNE	L53212
	TST	10(SP)
	BPL	L53232
	NEG	R2
L53232:	MOV	R2, 12(SP)
	MOV	(SP)+, R2
	MOV	(SP)+, R1
	MOV	(SP)+, R0
	MOV	(SP)+, (SP)
	RETURN
L53250:	CLR	R2
	BR	L53232
;
; Модуль SUPSET
INSERT::
$B50::
L53254:	MOV	R0, SETR0
	MOVB	2(SP), R0
	MOV	(SP)+, (SP)
	BR	L53312
L53270:	MOV	R0, -(SP)
	JSR	R1, L53330
	BIS	R1, 4(R2)
	MOV	(SP)+, R2
	MOV	(SP)+, R1
	MOV	(SP)+, R0
	INC	R0
L53312:	CMPB	R0, 2(SP)
	BLOS	L53270
	MOV	(SP)+, (SP)
	MOV	SETR0, R0
	RETURN
L53330:	MOV	R2, -(SP)
L53332:	MOV	R1, -(SP)
L53334:	CMP	R0, #000077
L53340:	BHI	L53444
L53342:	MOV	R0, R2
L53344:	ASR	R2
L53346:	ASR	R2
L53350:	ASR	R2
L53352:	ASR	R2
L53354:	ASL	R2
L53356:	ADD	SP, R2
L53360:	ADD	#000010, R2
L53364:	MOV	#000001, R1
L53370:	BIC	#177760, R0
L53374:	ASL	R0
L53376:	SUB	#000036, R0
L53402:	SUB	R0, PC
L53404:	ASL	R1
L53406:	ASL	R1
L53410:	ASL	R1
L53412:	ASL	R1
L53414:	ASL	R1
L53416:	ASL	R1
L53420:	ASL	R1
L53422:	ASL	R1
L53424:	ASL	R1
L53426:	ASL	R1
L53430:	ASL	R1
L53432:	ASL	R1
L53434:	ASL	R1
L53436:	ASL	R1
L53440:	ASL	R1
L53442:	RETURN
L53444:	JSR	R5, RTERR
	.WORD	SETBIG		; "BAD SET EXPRESSION"
DOIN::
$B40::
L53452:	MOV	R0, SETR0
	MOVB	2(SP), R0
	MOV	(SP)+, (SP)
	CMP	R0, #77
	BLOS	L53500
	CLR	4(SP)
	BR	L53520
L53500:	JSR	R1, L53330
	MOV	(R2), 12(SP)
	MOV	R1, 10(SP)
	MOV	(SP)+, R2
	MOV	(SP)+, R1
L53520:	MOV	(SP)+, 6(SP)
	TST	(SP)+
	MOV	SETR0, R0
	BIT	(SP)+, (SP)+
	RETURN
SETDIF::
$B48::
L53536:	JSR	R0, L54076
	BIC	(R1)+, (R0)+
	BIC	(R1)+, (R0)+
	BIC	(R1)+, (R0)+
	BIC	(R1)+, (R0)+
	BR	L53570
SETOR::
$B56::
L53554:	JSR	R0, L54076
	BIS	(R1)+, (R0)+
	BIS	(R1)+, (R0)+
	BIS	(R1)+, (R0)+
	BIS	(R1)+, (R0)+
L53570:	MOV	(SP)+, R1
	MOV	(SP)+, R0
	MOV	(SP)+, 6(SP)
	ADD	#6, SP
	RETURN
SETAND::
$B58::
L53606:	JSR	R0, L54076
	COM	(R1)
	BIC	(R1)+, (R0)+
	COM	(R1)
	BIC	(R1)+, (R0)+
	COM	(R1)
	BIC	(R1)+, (R0)+
	COM	(R1)
	BIC	(R1)+, (R0)+
	BR	L53570
PSHSET::
$B52::
L53634:	MOV	R0, SETR0
	MOV	2(SP), R0
	MOV	(SP)+, (SP)
	CMP	(R0)+, (R0)+
	MOV	(R0), -(SP)
	MOV	-(R0), -(SP)
	MOV	-(R0), -(SP)
	MOV	6(SP), -(SP)
	MOV	6(R0), 10(SP)
	MOV	SETR0, R0
	RETURN
POPSET::
$B54::
L53676:	MOV	R0, SETR0
	MOV	2(SP), R0
	MOV	(SP)+, (SP)
	MOV	10(SP), 6(R0)
	MOV	(SP)+, 6(SP)
	MOV	(SP)+, (R0)+
	MOV	(SP)+, (R0)+
	MOV	(SP)+, (R0)
	MOV	SETR0, R0
	RETURN
SETEQ::
$B42::
L53736:	JSR	R0, L54076
	CMP	(R1)+, (R0)+
	BNE	L54002
	CMP	(R1)+, (R0)+
	BNE	L54002
	CMP	(R1)+, (R0)+
	BNE	L54002
	CMP	(R1)+, (R0)+
	BNE	L54002
L53762:	MOV	(SP)+, R1
	MOV	(SP)+, R0
	MOV	(SP)+, 16(SP)
	ADD	#16, SP
	SEZ
	RETURN
L54002:	MOV	(SP)+, R1
	MOV	(SP)+, R0
	MOV	(SP)+, 16(SP)
	ADD	#16, SP
	CLZ
	RETURN
SETGE::
$B46::
L54022:	JSR	R0, L54076
	BIC	(R1)+, (R0)+
	BNE	L54002
	BIC	(R1)+, (R0)+
	BNE	L54002
	BIC	(R1)+, (R0)+
	BNE	L54002
	BIC	(R1), (R0)
	BNE	L54002
	BR	L53762
SETLE::
$B44::
L54050:	JSR	R0, L54076
	BIC	(R0)+, (R1)+
	BNE	L54002
	BIC	(R0)+, (R1)+
	BNE	L54002
	BIC	(R0)+, (R1)+
	BNE	L54002
	BIC	(R0), (R1)
	BNE	L54002
	BR	L53762
L54076:	MOV	R1, -(SP)
	MOV	R0, -(SP)
	MOV	SP, R1
	ADD	#10, R1
	MOV	R1, R0
	ADD	#10, R0
	RETURN
;
; Модуль SUPINT
;
L54120:	MOV	R0, -(SP)
L54122:	MOV	R1, -(SP)
L54124:	CLR	R0
L54126:	MOV	000012(SP), R1
L54132:	BPL	L54136
L54134:	DEC	R0
L54136:	JMP	@000004(SP)
UNSMUL::
$B116::
L54142:	CALL	L54120
L54146:	CLR	R0
L54150:	CALL	MULSIM
L54154:	BR	L54264
UNSDIV::
$B118::
L54156:	CALL	L54120
L54162:	CLR	R0
L54164:	CALL	DIVSIM
L54170:	BLO	L54310
L54172:	MOV	R0, R1
L54174:	BR	L54264
UNSMOD::
$B120::
L54176:	CALL	L54120
L54202:	CLR	R0
L54204:	CALL	DIVSIM
L54210:	BLO	L54310
L54212:	BR	L54264
DOMUL::
$B78::
L54214:	CALL	L54120
L54220:	CALL	MULSIM
L54224:	BLO	L54302
L54226:	BR	L54264
DODIV::
$B80::
L54230:	CALL	L54120
L54234:	CALL	DIVSIM
L54240:	BLO	L54310
L54242:	BVS	L54310
L54244:	MOV	R0, R1
L54246:	BR	L54264
DOMOD::
$B82::
L54250:	CALL	L54120
L54254:	CALL	DIVSIM
L54260:	BLO	L54310
L54262:	BVS	L54302
L54264:	MOV	R1, 000012(SP)
L54270:	MOV	(SP)+, R1
L54272:	MOV	(SP)+, R0
L54274:	TST	(SP)+
L54276:	MOV	(SP)+, (SP)
L54300:	RETURN
L54302:	JSR	R5, RTERR
L54306:	.WORD	OVRFLO
L54310:	JSR	R5, RTERR
L54314:	.WORD	DIVZER
;
; Модуль SUPREG
; Процедура с вызовом по R0: сохранение регистров
SVREG::
$B74::
L54316:	MOV	FILE, -(SP)
L54322:	MOV	R1, -(SP)
L54324:	MOV	R2, -(SP)
L54326:	MOV	R3, -(SP)
L54330:	MOV	SP, R1
L54332:	SUB	#000030, R1
L54336:	CMP	R1, $KORE
L54342:	BLOS	L54402
L54344:	MOV	R0, PC
;
; Подпрограмма с вызововм по R0
UNREG::
$B76::
L54346:	TST	(SP)+
L54350:	MOV	(SP)+, R3
L54352:	MOV	(SP)+, R2
L54354:	MOV	(SP)+, R1
L54356:	MOV	(SP)+, FILE
L54362:	RTS	R0
STKCHK::
$B127::
L54364:	MOV	SP, R1
L54366:	SUB	#000030, R1
L54372:	CMP	R1, L50400
L54376:	BLOS	L54402
L54400:	RETURN
L54402:	CLR	$KORE
L54406:	JSR	R5, RTERR
	.WORD	COROVR
$B125::
$$B125::
L54414:	JSR	R5, RTERR
	.WORD	ARRERR
;
; Модуль SUPFOR
$B126::
$$B126::
L54422:	MOV	R4, -(SP)
	MOV	(R4)+, -(SP)
	BEQ	L54456
	MOV	R4, R5
	MOV	(SP), -(SP)
	ASL	(SP)
	ADD	(SP)+, R5
	ASR	(SP)
	BEQ	L54456
L54444:	MOV	-(R5), -(SP)
	MOV	(R4), (R5)
	MOV	(SP)+, (R4)+
	DEC	(SP)
	BNE	L54444
L54456:	TST	(SP)+
	MOV	(SP)+, R5
	RETURN
;
; Модуль SUPSIM
;
SUPSIM::
L54464:	CALL	SAVREG
	MOV	14(SP), R0
	MOV	-(R0), R0
	CMP	R0, #75037
	BHI	L54512
	CMP	R0, #75000
	BHIS	L54520
L54512:	JSR	R5, RTERR
	.WORD	RESRVD
L54520:	BIC	#177747, R0
	ASR	R0
	ASR	R0
	MOV	SP, R1
	ADD	#20, R1
	MOV	(R1)+, R2
	MOV	(R1)+, R3
	MOV	(R1)+, R4
	MOV	(R1)+, R5
	BIC	#17, 16(SP)
	CALL	@L56720(R0)	; C.0
	MOV	R2, 24(SP)
	MOV	R3, 26(SP)
	MOV	14(SP), R1
	MOV	(R1)+, R0
	CMP	R0, #075037
	BHI	054650
	CMP	R0, #075000
	BLO	054650
	MOV	R1, 14(SP)
	MOV	SP, R1
	MOV	SP, R2
	ADD	#20, R1
	ADD	#24, R2
	MOV	#10, R3
L54636:	MOV	-(R1), -(R2)
	DEC	R3
	BNE	054636
	CMP	(SP)+, (SP)+
	BR	054520
L54650:	CALL	L51414
	MOV	(SP)+, 2(SP)
	MOV	(SP)+, 2(SP)
	BIS	#4, 2(SP)
	TST	4(SP)
	BEQ	054716
	BPL	054710
	BIS	#10, 2(SP)
L54710:	BIC	#4, 2(SP)
L54716:	RTI
;
FASTAD::
$B123::
L54720:	CALL	L54750
L54724:	BIS	@-(SP), (R0)+
FASTSU::
$B121::
L54726:	CALL	L54750
L54732:	BIS	@-(SP), (R4)
FASTMU::
$B119::
L54734:	CALL	L54750
L54740:	BIS	@-(R1), @-(R4)
FASTDI::
$B117::
L54742:	CALL	L54750
L54746:	BIS	@-(R4), (R0)
L54750:	MOV	R5, -(SP)
L54752:	MOV	R4, -(SP)
L54754:	MOV	R3, -(SP)
L54756:	MOV	R2, -(SP)
L54760:	MOV	R1, -(SP)
L54762:	MOV	R0, -(SP)
L54764:	MOV	@14(SP), R0
L54770:	MOV	SP, R1
L54772:	ADD	#30, R1
L54776:	MOV	-(R1), R5
L55000:	MOV	-(R1), R4
L55002:	MOV	-(R1), R3
L55004:	MOV	-(R1), R2
L55006:	MOV	-(R1), -(R1)
L55010:	CLR	2(R1)
L55014:	CALL	(R0)
L55016:	MOV	SP, R1
L55020:	ADD	#30, R1
L55024:	MOV	R3, -(R1)
L55026:	MOV	R2, -(R1)
L55030:	MOV	177772(R1), -(R1)
L55034:	MOV	177772(R1), -(R1)
L55040:	MOV	(SP)+, R0
L55042:	MOV	(SP)+, R1
L55044:	MOV	(SP)+, R2
L55046:	MOV	(SP)+, R3
L55050:	MOV	(SP)+, R4
L55052:	MOV	(SP)+, R5
L55054:	ADD	#4, SP
L55060:	RTI
;
$FMUL::
L55062:	JSR	R0, L55112
L55066:	BIS	@-(R1), @-(R4)
$FDIV::
L55070:	JSR	R0, L55112
L55074:	BIS	@-(R4), (R0)
$FADD::
L55076:	JSR	R0, L55112
L55102:	BIS	@-(SP), (R0)+
$FSUB::
L55104:	JSR	R0, L55112
L55110:	BIS	@-(SP), (R4)
;
L55112:	MOV	R1, -(SP)
	MOV	R4, -(SP)
	MOV	R5, -(SP)
	CALL	@(R0)+
	MOV	(SP)+, R5
	MOV	(SP)+, R4
	MOV	(SP)+, R1
	MOV	(SP)+, R0
	RETURN
L55134:	JSR	R5, RTERR
	.WORD	L55142
L55142:	.ASCIZ	/FIS error/
;
L55154:	MOV	R2, R0
	BEQ	055402
	CLR	-(SP)
	ROL	R0
	ROR	(SP)
	CLRB	R0
	MOV	R4, R1
	BEQ	055400
	CLR	-(SP)
	ROL	R1
	ROR	(SP)
	CLRB	R1
	ADD	(SP)+, (SP)
	ADD	R1, R0
	BLO	055214
	COMB	R0
L55214:	SWAB	R0
	MOV	R0, -(SP)
	BIC	#177400, R2
	BIS	#000200, R2
	BIC	#177400, R4
	BIS	#000200, R4
	MOV	R3, -(SP)
	SWAB	R4
	SWAB	R5
	BISB	R5, R4
	CLRB	R5
	MOV	R4, -(SP)
	MOV	R2, R0
	CLR	R1
	CLR	R4
	CLR	R3
	CLR	R2
L55266:	TST	R0
	BNE	055332
	SWAB	2(SP)
	BEQ	055366
	BISB	2(SP), R0
	CLRB	2(SP)
	CLRB	R1
	BISB	R5, R1
	SWAB	R1
	CLRB	R5
	BISB	(SP), R5
	SWAB	R5
	CLRB	(SP)
	SWAB	(SP)
	BR	055266
L55332:	ROR	(SP)
	ROR	R5
	ROR	R1
	ASL	2(SP)
	ROLB	R0
	BHIS	055266
	ADD	R1, R4
	ADC	R3
	ADC	R2
	ADD	R5, R3
	ADC	R2
	ADD	(SP), R2
	BR	055266
L55366:	CMP	(SP)+, (SP)+
	CLR	R4
	CALL	L56210
	RETURN
L55400:	TST	(SP)+
L55402:	CLR	R2
	CLR	R3
	RETURN
L55410:	MOV	R2, R1
	BEQ	055574
	CLR	-(SP)
	ROL	R1
	ROR	(SP)
	CLRB	R1
	MOV	R4, R0
	BEQ	055604
	CLR	-(SP)
	ROL	R0
	ROR	(SP)
	CLRB	R0
	ADD	(SP)+, (SP)
	SUB	R1, R0
	BHIS	055450
	COMB	R0
L55450:	SWAB	R0
	MOV	R0, -(SP)
	BIC	#177400, R2
	BIS	#200, R2
	BIC	#177400, R4
	BIS	#200, R4
	ADD	#10, (SP)
	MOV	#31, -(SP)
	MOV	R2, R0
	MOV	R3, R1
	CLR	R2
	CLR	R3
L55514:	CMP	R0, R4
	BLO	055526
	BHI	055536
	CMP	R1, R5
	BHI	055536
L55526:	SUB	R1, R5
	SBC	R4
	SUB	R0, R4
	SEC
L55536:	ROL	R3
	ROL	R2
	DEC	(SP)
	BEQ	055562
	ASL	R5
	ROL	R4
	BIT	#177600, R4
	BEQ	055536
	BR	055514
L55562:	TST	(SP)+
	CLR	R4
	CALL	L56210
	RETURN
L55574:	JSR	R0, L55134
L55600:	.WORD	000013
L55602:	CLR	-(SP)
L55604:	TST	(SP)+
	CLR	R2
	CLR	R3
	RETURN
L55614:	ADD	#100000, R2
L55620:	CLR	-(SP)
	MOV	#10, -(SP)
	MOV	R2, R0
	BEQ	L56170
	ASL	R0
	CLRB	R0
	SWAB	R0
	MOV	R4, R1
	BEQ	L56174
	ASL	R1
	CLRB	R1
	SWAB	R1
	SUB	R1, R0
	BMI	L55670
	CMP	R0, #000030
	BGT	L56174
	ADD	R0, R1
	BR	L55676
L55670:	CMP	R0, #177750
	BLT	L56170
L55676:	SUB	#000200, R1
	ADD	R1, (SP)
	BIC	#077600, R4
	BIS	#000200, R4
	BPL	L55730
	NEG	R5
	ADC	R4
	NEG	R4
	BIS	#100000, R4
L55730:	BIC	#077600, R2
	BIS	#000200, R2
	BPL	L55754
	NEG	R3
	ADC	R2
	NEG	R2
	BIS	#100000, R2
L55754:	TST	R0
	BMI	L56036
	BEQ	L56116
	CLR	R1
L55764:	CMP	R0, #000010
	BLT	L56022
	CLRB	R1
	BISB	R5, R1
	SWAB	R1
	CLRB	R5
	BISB	R4, R5
	SWAB	R5
	SWAB	R4
	MOVB	R4, R4
	SUB	#10, R0
	BGT	L55764
	BR	L56122
L56022:	ASR	R4
	ROR	R5
	ROR	R1
	DEC	R0
	BNE	L56022
	BR	L56122
L56036:	MOV	R0, R1
	CLR	R0
	NEG	R1
L56044:	CMP	R1, #10
	BLT	L56102
	CLRB	R0
	BISB	R3, R0
	SWAB	R0
	CLRB	R3
	BISB	R2, R3
	SWAB	R3
	SWAB	R2
	MOVB	R2, R2
	SUB	#10, R1
	BGT	L56044
	BEQ	L56122
L56102:	ASR	R2
	ROR	R3
	ROR	R0
	DEC	R1
	BNE	L56102
	BR	L56122
L56116:	CLR	R1
	CLR	R0
L56122:	ADD	R1, R0
	ADC	R3
	ADC	R2
	ADD	R5, R3
	ADC	R2
	ADD	R4, R2
	BPL	L56160
	NEG	R0
	ADC	R3
	ADC	R2
	NEG	R3
	ADC	R2
	NEG	R2
	COM	2(SP)
L56160:	MOV	R0, R4
	CALL	L56210
	RETURN
L56170:	MOV	R4, R2
	MOV	R5, R3
L56174:	CMP	(SP)+, (SP)+
	CMP	R2, #100000
	BNE	L56206
	CLR	R2
L56206:	RETURN
L56210:	MOV	000004(SP), R0
	MOV	(SP)+, 000002(SP)
	MOV	(SP)+, R1
	SUB	#10, R1
	MOV	R2, R5
	BIS	R3, R5
	BIS	R4, R5
	BEQ	L56464
	BIT	#177400, R2
	BEQ	L56314
L56244:	BPL	L56272
	MOV	R3, R4
	CLRB	R3
	BISB	R2, R3
	CLRB	R2
	SWAB	R4
	SWAB	R3
	SWAB	R2
	ADD	#000010, R1
	BR	L56360
L56272:	CLC
	ROR	R2
	ROR	R3
	ROR	R4
	INC	R1
	BIT	#177400, R2
	BNE	L56244
	BR	L56360
L56314:	TST	R2
	BNE	L56354
	SWAB	R3
	BISB	R3, R2
	CLRB	R3
	SWAB	R4
	BISB	R4, R3
	CLRB	R4
	SUB	#000010, R1
	BR	L56314
L56342:	CLC
	ROL	R4
	ROL	R3
	ROL	R2
	DEC	R1
L56354:	TSTB	R2
	BPL	L56342
L56360:	ADD	#100000, R4
L56364:	ADC	R3
L56366:	ADC	R2
L56370:	BIT	#000400, R2
L56374:	BNE	L56272
L56376:	CMP	R1, #177600
L56402:	BGT	L56414
L56404:	JSR	R0, L55134
L56410:	.WORD	000012
L56412:	BR	L56464
L56414:	CMP	R1, #000200
L56420:	BLT	L56432
L56422:	JSR	R0, L55134
L56426:	.WORD	000002
	BR	L56464
L56432:	ADD	#000200, R1
	BIC	#177400, R1
	ASL	R2
	BIC	#177400, R2
	SWAB	R1
	BIS	R1, R2
	ROR	R2
	BIC	#077777, R0
	BIS	R0, R2
L56464:	RETURN
;
MULSIM::
L56466:	MOV	R4, -(SP)
	MOV	R3, -(SP)
	MOV	R2, -(SP)
	MOV	20(SP), R4
	BEQ	L56562
	MOV	R1, R3
	BEQ	L56564
	CLR	R2
	CLR	R1
	CLR	R0
L56514:	ROR	R4
	BHIS	L56526
	ADD	R3, R1
	ADC	R0
	ADD	R2, R0
L56526:	ASL	R3
	ROR	R2
	TST	R4
	BNE	L56514
L56536:	MOV	(SP)+, R2
	MOV	(SP)+, R3
	MOV	(SP)+, R4
	INC	R0
	CMP	R0, #1
	BLOS	L56560
	SEC
	CLC
L56560:	RETURN
L56562:	CLR	R1
L56564:	CLR	R0
	BR	L56536
;
DIVSIM::
L56570:	MOV	R4, -(SP)
	MOV	R2, -(SP)
	MOV	16(SP), R4
	BNE	L56606
	SEC
	BR	L56712
L56606:	MOV	R0, -(SP)
	MOV	R0, -(SP)
	BPL	L56624
	NEG	R1
	CLR	R0
	BIC	#077777, (SP)
L56624:	ADD	R4, (SP)
	TST	R4
	BPL	L56634
	NEG	R4
L56634:	MOV	R4, R2
	CMP	R2, R1
	BHI	L56666
L56642:	ASL	R2
	BLO	L56666
	CMP	R2, R1
	BLOS	L56642
	BR	L56666
L56654:	ASL	R0
	CMP	R2, R1
	BHI	L56666
	SUB	R2, R1
	INC	R0
L56666:	ROR	R2
	CMP	R2, R4
	BHIS	L56654
	TST	(SP)+
	BPL	L56702
	NEG	R0
L56702:	TST	(SP)+
	BPL	L56710
	NEG	R1
L56710:	CLC
L56712:	MOV	(SP)+, R2
	MOV	(SP)+, R4
	RETURN
;
; Модуль SUPSIM данные
L56720:	BIS	@-(SP), (R0)+
	BIS	@-(SP), (R4)
	BIS	@-(R1), @-(R4)
	BIS	@-(R4), (R0)
;
; Модуль SUPIO
;
CHKOPN::
L56730:	RETURN
;
SETIO::
L56732:	MOV	(R5)+, -(SP)
	ADD	SP, (SP)
	MOV	R4, -(SP)
	MOV	R0, -(SP)
	MOV	R5, -(SP)
	MOV	@#FILE, R5
	MOV	R5, R4
	CMP	R5, #$TTY
	BEQ	L56764
	ADD	#14, R4
L56764:	CALL	@(SP)+
	MOV	(SP)+, R0
	MOV	(SP)+, R4
	MOV	2(SP), R5
	MOV	4(SP), @0(SP)
	MOV	(SP), SP
KLUDGE::
L57006:	RETURN
;
CHKRW::
L57010:	BLO	L57014
	RETURN
CHKRWE::
L57014:	CMPB	@#52, #1
	BLO	057034
	BHI	057042
	JSR	R5, RTERR
L57032:	.WORD	FATLIO
L57034:	JSR	R5, RTERR
L57040:	.WORD	NOTOPN
L57042:	JSR	R5, RTERR
L57046:	.WORD	EOFERR
;
; Модуль SUPIOI
;
ISITNM::
L57050:	SUB	#72, R0			; ':'
	ADD	#12, R0
	RETURN
;
BACKUP::
L57062:	CMPB	R5, #$TTY
	BNE	L57106
	TSTB	(R5)
	BEQ	L57122
	BIS	#20000, (R5)
	BIC	#10000, (R5)
	RETURN
L57106:	TSTB	12(R5)
	BEQ	L57122
	BIS	#20000, 12(R5)
L57122:	RETURN
BACKUF::
L57124:	MOV	R5, -(SP)
	MOV	FILE, R5
	CALL	BACKUP
	MOV	(SP)+, R5
	RETURN
GETCHF::
L57142:	CLR	-(SP)
	MOV	R5, -(SP)
	MOV	R4, -(SP)
	MOV	FILE, R5
	MOV	R5, R4
	CMP	R5, #$TTY
	BEQ	L57170
	ADD	#14, R4
L57170:	CALL	GETCHR
	MOV	(R4), 4(SP)
	MOV	(SP)+, R4
	MOV	(SP)+, R5
	BIT	#140000, (SP)+
	RETURN
;
GETCHR::
L57212:	BIC	#40000, (R4)
	CMP	R5, #$TTY
	BEQ	L57322
	TST	(R4)
	BPL	L57236
	JSR	R5, RTERR
	.WORD	EOFERR
L57236:	BIT	#20000, 12(R5)
	BEQ	L57260
	MOVB	12(R5), R0
	CLR	12(R5)
	BR	L57366
L57260:	MOVB	@0(R5), R0
	INC	(R5)
	MOV	14(R5), -(SP)
	ADD	6(R5), (SP)
	CMP	(R5), (SP)+
	BLO	L57366
	CALL	FILLBF
	BHIS	L57366
	BIS	#140000, (R4)
	MOV	#40, R0			; ' '
	BR	L57526
L57322:	BIT	#10000, @#44
	BEQ	L57342
	EMT	340			; .TTYIN
	BHIS	L57524
	CLR	R0
	BR	L57524
L57342:	BIT	#120000, (R5)
	BMI	L57474
	BEQ	L57362
	MOVB	(R5), R0
	BIC	#20377, (R4)
	BR	L57366
L57362:	EMT	340			; .TTYIN
	BLO	L57362
L57366:	TST	R0
	BEQ	L57212
	CMPB	R0, #15			; ПС
	BEQ	L57212
	CMPB	R0, #12			; ВК
	BEQ	L57414
	CMPB	R0, #33			; ESC
	BNE	L57504
L57414:	CMP	R5, #050372
	BNE	L57456
	BIT	#010000, (R5)
	BEQ	L57442
	BIC	#010000, (R5)
	BIS	#020000, (R5)
	BR	L57446
L57442:	BIS	#050000, (R5)
L57446:	MOVB	R0, (R5)
	MOV	#40, R0			; ' '
	BR	L57526
L57456:	MOV	R0, 12(R5)
	MOV	#40, R0			; ' '
	BIS	#40000, (R4)
	BR	L57526
L57474:	MOV	#40, R0			; ' '
	BIS	#140000, (R4)
L57504:	BIC	#10000, (R4)
	CMP	R5, #050372
	BEQ	L57524
	MOV	R0, 12(R5)
	BR	L57526
L57524:	MOVB	R0, (R5)
L57526:	BIT	#140000, (R4)
	RETURN
;
LOOKER::
L57534:	CMP	R5, #050372
	BEQ	L57554
L57542:	CALL	L57212
	CALL	L57062
	RETURN
L57554:	BIT	#10000, @#44
	BNE	L57602
	BIT	#40000, (R5)
	BEQ	L57542
	BIC	#40000, (R5)
	BIS	#10000, (R5)
L57602:	RETURN
;
FILLBF::
L57604:	CLR	12(R5)
	MOV	R0, -(SP)
	MOV	R5, R0
	TST	(R0)+
	EMT	375
	BHIS	L57634
	TSTB	@#52
	BEQ	L57660
	CALL	L57014
L57634:	ASL	R0
	BIC	#37777, (R4)
	BIS	R0, (R4)
	MOV	6(R5), (R5)
	INC	4(R5)
	CLC
	BR	L57666
L57660:	BIC	#37777, (R4)
	SEC
L57666:	MOV	(SP)+, R0
	RETURN
;
; Модуль SUPIOO
; Процедура вывода символа
PUTCHR::
L57672:	CMP	R5, #L50372	; CMP	R5, #$TTY
	BNE	L57706
L57700:	EMT	341		; .TTYOUT
	BLO	L57700		; C=1, операцию нужно повторить
	RETURN
L57706:	MOVB	R0, @0(R5)
	INC	(R5)
	MOV	6(R5), -(SP)
	ADD	#1000, (SP)
	CMP	(SP)+, (R5)
	BHI	L57734
	CALL	FORCER
L57734:	RETURN
;
; Процедура вывода символа
PUTCHF::
L57736:	MOV	R5, -(SP)
	MOV	FILE, R5
	CALL	PUTCHR
	MOV	(SP)+, R5
	RETURN
;
DUMPBF::
FORCER::
L57754:	CMP	R5, #050372
	BEQ	L60014
	CLR	12(R5)
	MOV	R0, -(SP)
	MOV	R5, R0
	TST	(R0)+
	EMT	375
	CALL	CHKRW
	MOV	(SP)+, R0
	MOV	6(R5), (R5)
	INC	4(R5)
FORCE::
FORCEF::
L60014:	RETURN
;
;------------------------------------------------------------------------------
;
; 0600016 = R5 - базовый адрес для переменных
L60016:	.WORD		; (R5) Номер подземелья

;L60022:	.WORD		; 000004(R5) Этаж лабиринта
;L60024:	.WORD		; 000006(R5) Новый Y игрока (строка)
;L60026:	.WORD		; 000010(R5) Новый X игрока (столбец)

;L60030:	.WORD		; 000012(R5) Позиция Y игрока (строка), нач.значение 2
;L60032:	.WORD		; 000014(R5) Позиция X игрока (столбец), нач.значение 2
;L60034:	.WORD		; 000016(R5) переменная цикла

;L60044:	.WORD		; 000026(R5) Усталость ??
;L60046:	.WORD		; 000030(R5) Вредность
;L60050:	.WORD		; 000032(R5) Заряд батарей фонаря
;L60052:	.WORD		; 000034(R5) Текущая строка ??

;L60062:	.WORD		; 000044(R5) ?? число для генератора случайный чисел?

;		.BYTE		; 000047(R5) Фонарь вкл/выкл

;L60071:	.BYTE		; 000053(R5) Последний введённый символ
;	.EVEN

;L60074:	.WORD		; 000056(R5) Рейтинг
;L60076:	.WORD		; 000060(R5) Энергия, нач.значение 25.
;L60100:	.WORD		; 000062(R5) Оружие
;L60102:	.WORD		; 000064(R5) Защита
;L60104:	.WORD		; 000066(R5) В банке денег
;L60106:	.BYTE		; Игровое поле - 16 строк по 32 символа

;L61000 = 25088.	; Конец файла программы

;113116:	.BYTE	; Рюкзак, 6 символов

;113136		.WORD	; 033120(R5) ??

; Буфер под начальную надпись, 113176-113233, 30. байт
;113176:	.BYTE	; 033160(R5)
;...
;113233:	.BYTE	; 033170(R5)
;113234 = конец блока переменных

;------------------------------------------------------------------------------
	.END	START
