.INCLUDE /GENUKD.MAC/
.SBTTL	COMPILER
.ENABLE	LC




.PSECT	BASIC



	.EVEN
AOPSUB::.WORD	LET,REM,DIM,LINE,CIRCLE,DEF,FOR,GOSUB
	.WORD	GO,IF,INPUT,LET,OPEN,PRINT,CLOSE
	.WORD	NEXT,PAINT,PRINT,DRAW,REM,RET
	.WORD	READ,POKE,OUT,STOP,LPRINT,ON
	.WORD	RESTOR,END,DATA,LOCATE,CLEAR
	.WORD	KEY,BEEP,CLS,COLOR,PSET,PRESET
	.WORD	BLOAD,BSAVE,SCREEN,Width,TRAP

	.WORD	Repeat,Until,While,Wend
	.WORD	Sget,Sput,PaletX,Sound,Fsound,NoSoun,Page
	.WORD	Delay,FPut,FGet,FSave,FLoad,SModeG
	.Word	..Create,..Close,..Open,..Read,..Write,..Purge
	.Word	Cload
	
	AOPMON::
	AOPEND::

	.GLOBL	HALT,JMP,JSR,RTS,CLR,RESET,TYPE



LPRINT::MOV	#DEVLP,(R1)
	MOV	(R1)+,-(SP)
	BR	PRI

PRINT::	JSR	R2,TSTFLN
PRI:	CLR	-(SP)
PR:	TRAP	122
	BR	10$
	MOV	#LIT,(R1)+
	CLR	@SP
	BR	PR
10$:	TRAP	112
		TRAP	102
		BR	59$
		BR	1$
	2$:	TRAP	100
		CLR	@SP
		MOV	TYPE,R4
		ASL	R4
		MOV	AOUTSP(R4),(R1)+
		BR	PR
	1$:	MOV	R3,R2
		TRAP	113
		.WORD	RWPRIN,4003
		BR	2$
		SUB	#4,R5

		BLT	77$
		CLR	@SP
		TRAP	127
		MOV	R5,R2
		TRAP	125
		TST	R2
		BNE	5$
		TRAP	126
		TRAP	125
	5$:	TRAP	130
		MOV	AFNPOZ(R2),(R1)+
		BR	PR
	59$:
		TRAP	101
		.WORD	PRSPEC
		BR	58$
		BR	57$
	58$:
		TRAP	101
		.WORD	PLMI
		BR	6$
	57$:	DEC	R3
		BR	2$
	6$:	CMPB	@R3,#';
		BEQ	7$
		CMPB	@R3,#',
		BNE	8$
		MOV	#ZONA,(R1)+
	7$:	INC	@SP
		INC	R3
		BR	PR
	77$:	MOV	R2,R3
		CMP	R5,#-2
		BEQ	2$
	8$:	TST	(SP)+
		BNE	88$
		MOV	#NEWLIN,(R1)+
	88$:	JSR	R2,TSTFIL
		RETURN
		
	REM::	CMPB	(R3)+,#12
		BNE	REM
		DEC	R3
		RETURN
	
	;
	AFNPOZ:	.WORD	AT,TAB,SPC
	AOUTSP:	.WORD	SOUTSP,IOUTSP
	;
	LOCATE::CMPB	@R3,#',
		BEQ	1$
		TRAP	125
	11$:	TRAP	116
		BR	2$
		CALL	CINT
	21$:	MOV	#AT,(R1)+
		TRAP	116
		BR	3$
		CALL	CINT
		MOV	#LOC,(R1)+
		BR	CEND1
	;

	1$:	MOV	#LOCX,(R1)+
		BR	11$
	2$:	MOV	#LOCY,(R1)+
		CMPB	(R3),#',
		BNE	21$
		INC	R3
		CMPB	(R3),#',
		BEQ	21$
		TRAP	24.
	3$:	CMPB	(R3),#',
		BNE	CEND1
		TRAP	24.
	;
	LET::	CLR	R2
		CLR	R4
		TRAP	107
		BR	10$
		CMP	(R2)+,(R2)+
		TST	TYPE
		BEQ	1$
	11$:	TST	(R2)+
	1$:	TSTB	R5
		BMI	15$
		MOV	R4,-(SP)
		BR	2$
	10$:	TST	R5
		BNE	11$
		CALL	LMID
	15$:	NEG	R2
	2$:	TRAP	112
		CMPB	(R3)+,#'=
		BNE	5$
	21$:	BIT	#20000,R5
		BEQ	22$
		TRAP	115
		TRAP	13.
		TST	R4
		BGT	33$
		BMI	3$
		TST	R2
		BEQ	33$
	3$:	MOV	#NEWSTR,(1)+
		BR	33$
	22$:	TRAP	100
		MOV	R2,R4
		BPL	20$
		NEG	R4
	20$:	CALL	@ATCONV-4(R4)
	33$:
		MOV	AMOV(R2),(R1)+
		TST	R2
		BLE	CEND1
		MOV	(SP)+,(R1)+
		BR	CEND1
	5$:	TRAP	2
	;
		.WORD				IXMOV		;-6

		.WORD			SXMOV			;-4
		.WORD		$XMOV				;-2
	AMOV:	.WORD	MIDMOV					; 0
		.WORD		$MOV				;+2
		.WORD			SMOV			;+4
		.WORD				IMOV		;+6
	ATCONV::.WORD			CSNG,	CINT
	;
	RET::	TRAP	110
		BR	1$
		MOV	#RTSTO,(R1)+
		BR	TO1
	1$:	MOV	#RTS,(R1)+
		CALL	TSTLYG
	CEND1:	RETURN
	;
	GOSUB::	MOV	#JSR,(R1)+
		BR	TO
	;
	GO::	MOV	#JMP,(R1)+
	;
	TO:	TRAP	110		; МЕТКА ПРИСУТСТВУЕТ ?
	KL2:	TRAP	2		; ЕСЛИ НЕТ,ОШИБКА
	TO1:	
	
		PUSH	R0
		MOV	LABTOP,R0
		JSR	%1,TSTLAB	; ЕСТЬ МЕТКА В ТАБЛИЦЕ ?
		BR	1$		; ЕСЛИ НЕТ, ОФОРМИМ ПЕРВУЮ ССЫЛКУ
		TST	-4(R4)		; ССЫЛКА ВНИЗ
		BEQ	2$		; ДА
		MOV	-(R4),(R1)	; ПОСТОРИМ ССЫЛКУ НА ПРЕДЫДУЩИЙ ЭЛ.
		MOV	R1,(R4)		; ПОСТАВИМ ССЫЛКУ НА СЕБЯ
		MOV	NUMBER,-(R4)	; ФИЗИЧЕСКИЙ НОМЕР СТРОКИ С СЫСКОЙ
		TST	(R1)+
		BR	3$		; ВЫХОД
	2$:	MOV	-(R4),(R1)+	; ПОДСТАВИМ АДРЕС ССЫЛКИ
		BR	3$		; ВЫХОД
	1$:	MOV	R5,-(R0)	; НОМЕР СТРОКИ		
		MOV	R1,-(R0)	; АДРЕС ССЫЛКИ
		MOV	NUMBER,-(R0)	; ФИЗИЧЕСКИЙ НОМЕР СТРОКИ
		CLR	(%1)+
	3$:	MOV	R0,LABTOP
		POP	R0
		RETURN
		
		
	




	TOTO1:	.WORD	ENDPRG
	
	;
	TSTLYG:	TSTB	LYGIS
		BNE	1$
		TST	ERRS
		BNE	2$
	    	CLR	ADRHLT
	1$:	RETURN
	2$:	TRAP	17.
	;
	RWREN::	.ASCII	/REM /
		.ASCII	/RETURN /
		.ASCII	/NEXT /
		.ASCII	/RESTORE /
	RWON:	.ASCII	/GOSUB /
	RWIF:	.ASCII	/GOTO /
		.ASCII	/THEN /
		.ASCII	/ELSE /

	RWPRIN:	.ASCII	/EL /
		.ASCII	/ATN /
		.ASCII	/AT /
		.ASCII	/TAB /
		.ASCII	/SPC /
	RWFOR:	.ASCII	/TO /
		.ASCII	/STEP /
	RWOPEN:	.ASCII	/OUTPUT INPUT APPEND /
		.ASCII	/AS /
	OPFOR:	.ASCII	/FOR /

	RWDEF:	.ASCII	/USR /
		.ASCII	/FN /
		.ASCII	/STR /
		.ASCII	/SNG /
		.ASCII	/INT /

	;RWKEY:	.ASCII	/LIST /

	RWMOT:	.ASCII	/ON /

	RWTRAP:	.ASCII	/OFF /


	RWON1:	.ASCII	/TRAP /

	RWLINE:	.ASCII	/BF B /
		.EVEN
	;
	IF::	TRAP	100
		CALL	CINT
		TRAP	113		;THEN,GOTO?
		.WORD	RWIF,1002
		TRAP	2
		TRAP	102
		BR	6$
		BR	6$
		MOV	#IFT,(R1)+	;THEN <LINE NUMBER>
		MOV	R0,-(SP)
		CLR	R0
		CALL	TO
		CLR	-(SP)
		BR	5$
	6$:	MOV	#IFF,(R1)+	;THEN	<STATMENT>
		MOV	R0,-(SP)
		MOV	R1,-(SP)
		
		TST	(R1)+
		CALL	INSCMP			;??
	
	;??	TRAP	113
	;??	.WORD	OPRNAM
	;??	.BYTE	2,AOPMON-AOPSUB-2
	;??	CLR	R5
	;??	TST	(R1)+
	;??	CLR	R0
	;??	CALL	@AOPSUB(R5)
		CLR	R2
	5$:
		TRAP	113

		.WORD	RWIF+12,2	;ELSE?
		BR	62$
		TRAP	102
		BR	50$
		BR	50$
		Mov	#-1,r5
		
		
		BR	55$
	50$:
	;??	TRAP	113
	;??	.WORD	OPRNAM
	;??	.BYTE	2,AOPMON-AOPSUB-2
		CLR	R5
	55$:	TST	@SP
		BEQ	4$
		MOV	#JMP,(R1)+
		MOV	R1,R2
		TST	(R1)+
		MOV	R1,@(SP)+
		MOV	R2,-(SP)
	4$:
		Tst	r5			;??
		Beq	63$			;??
		Call	Go			;??
		Br	62$			;??
	63$:	CALL	INSCMP			;??
	;??	CALL	@AOPSUB(R5)
	62$:	MOV	(SP)+,R0
		BEQ	7$
		MOV	R1,@R0
	7$:	MOV	(SP)+,R0
		Return
	
	;
	;
	FOR::	CLR	R4
		TRAP	107
		TRAP	13.
		TSTB	R5
		BMI	SYNERR
		TRAP	112
		CMPB	(R3)+,#'=
		BNE	SYNERR
		MOV	R4,-(SP)
		MOV	TYPE,R2
		ASL	R2
		TRAP	100
		CALL	@ATCONV(R2)
		MOV	AMOV+4(R2),(R1)+
		MOV	@SP,(R1)+
		TRAP	113
		.WORD	RWFOR,2
		TRAP	2
		TRAP	100
	10$:	CALL	@ATCONV(R2)
		TRAP	113
		.WORD	RWFOR+3,2
		BR	F2$
		TRAP	100
		CALL	@ATCONV(R2)
	F1$:	MOV	AFOR(R2),(R1)+
		MOV	#ASTAR+2,(R1)+
		MOV	(SP)+,(R1)+
	;	TSTB	LYGIS
	;	BEQ	CEND

		MOV	R1,-4(R1)
	CEND0:	BR	CEND
	F2$:	TST	R2
		BNE	3$
		MOV	#SCONST,(1)+
		CLR	(R1)+
		MOV	#40200,(R1)+
		BR	F1$
	3$:	MOV	#ICONST,(R1)+
		MOV	#1,(R1)+
		BR	F1$
	SYNERR:	TRAP	2
	;
	AFOR:	.WORD	FORSNG,FORINT
	;
	NEXT::	MOV	#NXSKIP,(R1)+
		CLR	R4
		CLR	R2
		CMPB	@R3,#12
		BEQ	1$
		TRAP	107
		TRAP	13.
		TSTB	R5
		BMI	SYNERR
		MOV	TYPE,R2
		ASL	R2
	1$:	MOV	R4,(1)+
		MOV	ANXADD(R2),(R1)+
		TST	R2
		BNE	2$
		MOV	#NEXCMP,(R1)+
		MOV	#NEXJMP,(R1)+
	2$:	TRAP	112
		CMPB	(R3)+,#',
		BEQ	NEXT
		DEC	R3
		BR	CEND
	;
	ANXADD:	.WORD	NEXSNG,NEXINT
	;
	STOP::	MOV	#HALT,(R1)+
		BR	CEND
	;
	END::	MOV	#ENDPRG,(R1)+
	CEND:	RETURN
	;
	;
	DATA::	
		MOV	#JMP,(R1)+		; Код перехода
		PUSH	R1			
		CLR	(R1)+			; Место для адреса след. оператора
		MOV	R1,@DATPTR		; Заполнить указатель предыдущего DATA
	1$:	MOVB	(R3)+,(R1)+		; Переписать данные
		CMPB	#12,-1(R3)
		BNE	1$

	 	INC	R1			; DATPTR = ((WORD *)(R1)+1)
		BIC	#1,R1
		MOV	R1,DATPTR
		CLR	(R1)+			; Место для указатель на следующий DATA
		MOV	R1,@(SP)+		; Заполнить адрес след. команды
		DEC	R3
		RETURN
	;
	; Оператор RESTORE
	
	RESTOR::
		TRAP	110			; Метка присутствует ?
		BR	1$			; Нет 1$ ->
		MOV	#RESTV,(R1)+		; RESTORE <LINE NUMBER>	
		JMP	TO1
	1$:	MOV	#REST0,(R1)+		; DEFAULT RESTORE.
		RETURN
		
		



	;
	READ::
		MOV	#READV,(1)+
		CLR	-(SP)
		BR	INPENT
	;
	INPUT::
		TRAP	120
		BR	10$
		MOV	#LIT,(R1)+
		TRAP	112
		CMPB	(R3)+,#';
		BNE	SYNERR
		TRAP	112
		CLR	-(SP)
		MOV	#GETLIT,(R1)+
		BR	INPENT
	
	10$:	JSR	R2,TSTFLN
	11$:	MOV	#GET,(R1)+
	
	INPENT:	MOV	R1,-(SP)
		TST	(R1)+
	1$:	CLR	R4
		MOV	R1,-(SP)
		TST	(R1)+
		TRAP	107
		NOP
		TSTB	R5
		BMI	2$

		TST	R5
		BEQ	4$
		MOV	R4,@(SP)+
	3$:	TRAP	112
		CMPB	(R3)+,#',
		BEQ	1$
		MOV	R1,@(SP)+
		DEC	R3
		JSR	R2,TSTFIL
		BR	CEND
	2$:	MOV	#GETARR,(R1)+
		MOV	R1,@(SP)+
		BR	3$
	4$:	TRAP	2
	;
	CLEAR::	CMPB	@R3,#12
		BEQ	1$
		CMPB	@R3,#',
		BNE	3$
		MOV	#IVAR,(R1)+
		MOV	#STRSIZ,(R1)+
		BR	4$
	3$:	TRAP	125
	4$:	TRAP	116
		BR	2$
		CALL	CINT
		MOV	#CLRMEM,(R1)+
		BR	CEND
	2$:	MOV	#CLRSTR,(R1)+
		BR	CEND
	1$:	MOV	#CLR,(R1)+
		BR	CEND2
	;
	DIM::
		MOV	#10,R4
		TRAP	107
		NOP
	1$:	TST	R5
		BEQ	4$
		TRAP	112
		CMPB	(R3)+,#',
		BEQ	DIM
	2$:	DEC	R3
		BR	CEND2
	4$:	TRAP	2
	;
	POKE::	TRAP	124
	;
		MOV	#POKJMP,(R1)+
		BR	CEND2
	;
	OUT::	TRAP	123
		MOV	#OUTJMP,(R1)+
	CEND2:	RETURN

COLOR::	CMPB	@R3,#',
	BEQ	10$
	TRAP	125
1$:	TRAP	116
	BR	20$
	CALL	CINT
2$:	TRAP	116
	BR	30$
	CALL	CINT
3$:	MOV	#COL3,(1)+
	BR	CEND2
10$:	MOV	#COLCHR,(1)+
	BR	1$
20$:	MOV	#COLPAP,(1)+
	CMPB	@R3,#',
	BNE	2$
	INC	R3
	BR	2$
30$:	MOV	#COLBOX,(1)+
	BR	3$

BEEP::	MOV	#SIGNAL,(R1)+
	Return

CLS::	MOV	#JCLS,(R1)+
	Return

PSET::	CLR	R2
	BR	PNT

PRESET::MOV	#2,R2
PNT:	CALL	KOORD
	TRAP	116
	BR	6$
	CALL	CINT
	MOV	#SPFORM,(R1)+
	MOV	#SPSET,(R1)+
	MOV	#SET,(R1)+
	BR	7$
6$:	MOV	#RSP,(R1)+
	MOV	#SPSET,(R1)+
	MOV	APOINT(R2),(R1)+
7$:	RETURN

APOINT:	.WORD	SET,RESET

LINE::	CMPB	(R3),#'-
	BEQ	1$
	CALL	KOORD
	BR	2$
1$:	MOV	#CURCOR,(R1)+
2$:	CMPB	(R3)+,#'-
	BNE	SYNER3
	TRAP	112
	CALL	KOORD

	TST	R4
	BEQ	4$
	MOV	#LSTP,-2(R1)
4$:
	CALL	SPL
	CMP	-2(1),#RSP
	BNE	5$
	MOV	#SPFORM,(1)+
5$:
	MOV #SPSET,(R1)+
	CMPB	@R3,#',
	BEQ	10$
	TST	R2
	BEQ	L7
	TRAP	24.
10$:	INC	R3
	TRAP	113
	.WORD	RWLINE
	.BYTE	2,2
SYNER3:	TRAP	2
	ADD	R5,PC
	BR	L8
	MOV	#RECSET,(R1)+
	BR	L9
L7:	MOV	#LSET,(R1)+
	BR	L9
L8:	MOV	#BOXSET,(R1)+
L9:

	RETURN

KOORD:	CLR	-(SP)
	CMPB	(R3)+,#'@
	BEQ	1$
	DEC	R3
	TRAP	113
	.WORD	RWFOR+3
	.BYTE	2,0
	BR	3$
1$:	INC	@SP
3$:	TRAP	127
	TRAP	124
	TRAP	130
	MOV	(SP)+,R4
	BEQ	8$
	MOV	#STP,(R1)+
8$:	RETURN


DRAW::	MOV	#2,R2

DR:	TRAP	115
	BR	2$
	CMP	R2,#10
	BLT	1$
	CALL	TSTRUN
	MOV	-(R1),@(SP)+
1$:	MOV	#$DRAW,(R1)+
	RETURN
2$:
	TST	R2
	BNE	B1
	MOV	#SCONST,(R1)+
	CLR	(R1)+
	CLR	(R1)+
	BR	1$

BSAVE::	TRAP	115
B1:	TRAP	13.
	TRAP	126
	TRAP	124
	MOV	#$BSAVE,R2
	Br	Bend

BLOAD::	MOV	R1,-(SP)
	TST	(R1)+
	TRAP	115
	TRAP	13.
	CLR	R2
	CALL	TSTRUN
	MOV	-(R1),@(SP)+
	TRAP	116
	BR	1$
	TST	(R2)+
	CALL	CINT
1$:
	TST	R2
	BNE	2$
	MOV	#$BL0,(R1)+
2$:	MOV	#$BLOAD,R2

BEND:
	MOV	R2,(R1)+
	RETURN

TSTRUN:	CMPB	@R3,#',
	BNE	2$
	MOV	R3,-(SP)
	INC	R3
	TRAP	101
	.WORD	RDRM
	BR	1$
	TST	(SP)+
	MOV	#TRUE,(R1)+
	RETURN
1$:	MOV	(SP)+,R3
2$:	MOV	#FALSE,(R1)+
	RETURN

RDRM:	.BYTE	'R,'Р,0
.EVEN

PAINT::	CALL	KOORD
	CALL	SPL
	CALL	SPL
	CMP	-(R1),#RSP
	BNE	10$
	MOV	#VIDSP,@R1
10$:	TST	(R1)+
	TST	R2
	BEQ	5$
	TRAP	24.
5$:	MOV	#$PAINT,(R1)+
	RETURN

SPL:	CLR	R2
	TRAP	116
	BR	1$
	CALL	CINT
	MOV	#SPFORM,(R1)+
	BR	2$
1$:	MOV	#RSP,(R1)+
	CMPB	@R3,#',
	BNE	2$
	INC	R3
	MOV	PC,R2
2$:	RETURN

KEY::

3$:	TRAP	125
	CMPB	(R3)+,#',
	BNE	SYNER4
	TRAP	115
KEY3:	TRAP	13.
	MOV	#$KEY,(R1)+
KEY4:	RETURN


	TRAP	2
CIRCLE::
	CALL	KOORD
	TRAP	116
SYNER4:	TRAP	2
	CALL	CINT
	CALL	SPL
	TRAP	116
	BR	1$
	CALL	CSNG
	MOV	#ANG1,(R1)+
	CLR	R2
	BR	2$
1$:	MOV	#ANG01,(R1)+
	CMPB	@R3,#',
	BNE	2$
	INC	R3
	MOV	PC,R2
2$:	TRAP	116
	BR	3$
	CALL	CSNG
	MOV	#ANG2,(R1)+
	CLR	R2
	BR	4$
3$:	MOV	#ANG02,(R1)+
	CMPB	@R3,#',
	BNE	4$
	INC	R3
	MOV	PC,R2
4$:	TRAP	116
	BR	10$
	MOV	TYPE,R4
	ASL	R4
	MOV	7$(R4),(R1)+
	CLR	R2
	BR	6$
10$:	MOV	#ASP0,(R1)+
	CMPB	@R3,#',
	BNE	6$
	INC	R3
	MOV	PC,R2
6$:	TST	R2
	BEQ	8$
	TRAP	24.
8$:	MOV	#$ARC,(R1)+
	RETURN
7$:	.WORD	ASPSNG,ASPINT

DEF::
	TRAP	113
	.WORD	RWDEF
	.BYTE	3,10	;12 SU DEFTYP
DEFERR:	TRAP	2
DEFUSR:	TRAP	112
	TRAP	102
	BR	1$
	BR	DEFFN
	MOVB	(R3)+,R2
	SUB	#'0,R2
	ASL	R2
2$:	TST	R5
	BNE	DEFERR
	ADD	#USRTAB,R2
	TRAP	112
	CMPB	(R3)+,#'=
	BNE	DEFERR
	TRAP	125
	MOV	#$DEFUS,(R1)+
	MOV	R2,(R1)+
	RETURN
1$:	CLR	R2
	BR	2$

DEFFN:	SUB	#2,R5
	BMI	DEFERR
	BGT	DEFTYP

11$:	MOV	#DFN,(R1)+
	MOV	R0,-(SP)
	MOV	R1,-(SP)
	TST	(R1)+
	TRAP	105
	TRAP	2
	TRAP	2
	NOP
	BIS	#100,R5
	BIC	#100000,R5
	MOV	TYPE,R0
	CLR	TYPE
	TRAP	104
	MOV	R4,(R1)+
	TST	(R4)+
	MOV	R4,-(SP)
	CLR	R2
	CLR	-(SP)
	CMPB	@R3,#'(
	BNE	6$
1$:	INC	R3
	
	TRAP	102
	TRAP	2
	BR	3$
2$:	TRAP	2
3$:	TRAP	105
	TRAP	2
	TRAP	2
	NOP
	MOV	@SP,R4
	MOV	R5,-(SP)
	BMI	5$
4$:	TST	(R4)+
5$:	TST	(R4)+
	MOV	TYPE,-(SP)
	MOV	R4,-(SP)
	INC	R2
	TRAP	112
	CMPB	@R3,#',
	BEQ	1$
	TRAP	130
6$:	MOV	R2,(R1)+
	CMPB	(R3)+,#'=
	BNE	2$
	MOV	SP,PFACT
	MOV	R1,-(SP)
	ASL	R2
	ADD	R2,R1
	TST	R0
	BPL	7$
	TRAP	115
	TRAP	13.
	CLR	R0
	TST	R4
	BGT	8$
	MOV	#NEWSTR,(1)+
	BR	8$
7$:	TRAP	100
	ASL	R0
	CALL	 @ATCONV(R0)
8$:	CLR	PFACT
	MOV	(SP)+,R4
9$:	TST	(SP)+
	BEQ	10$
	MOV	(SP)+,(R4)+
	TST	(SP)+
	BR	9$
10$:	MOV	ARET(R0),(R1)+
	MOV	(SP)+,(R1)+
	MOV	R1,@(SP)+
	MOV	(SP)+,R0
	RETURN
ARET:	.WORD	SFNRET,IFNRET
	
DEFTYP:	TST	-(R5)
	PUSH	R1
	CLR	R1
	DEC	R3
1$:	INC	R3

	PUSH	R5
	TRAP	112
	TRAP	105
	TRAP	2
	TRAP	2
	NOP
	MOV	R5,R4
	SWAB	R4
	BIC	#177740,R4
	POP	R5
	TRAP	112
	CMPB	#',,(R3)
	BNE	2$
	CALL	3$	
	BR	1$
2$:	CMPB	#'-,(R3)
	BNE	10$	
	MOV	R4,R1
	BR	1$
		
10$:	CALL	3$
	POP	R1
	RETURN

3$:	TST	R1
	BNE	4$
7$:	MOVB	R5,APRL-1(R4)
	BR	6$
4$:	SUB	R4,R1
	BEQ	7$
	BPL	8$
	NEG	R1
	SUB	R1,R4
8$:	ADD	#APRL-1,R4
	INC	R1
9$:	MOVB	R5,(R4)+
	SOB	R1,9$
6$:	CLR	R1
	RETURN
	
ON::	TRAP	113
	.WORD	RWON1

	.BYTE	3,0
	BR	2$

3$:	CALL	PAR
	TRAP	113
	.WORD	RWON
	.BYTE	3,0
	TRAP	2
	MOV	#ONTRG$,(R1)+
	MOV	R1,-(SP)
	TST	(R1)+
	CLR	(R1)+
	CLR	(R1)+
	MOV	#4537,(R1)+
	MOV	#SREG,(R1)+
	MOV	#12704,(R1)+
	TST	(R1)+
	MOV	#5037,(R1)+
	MOV	#SAVJMP,(R1)+
	MOV	#134,(R1)+
	MOV	R1,-10(R1)
	CALL	GOSUB
	TST	(R1)+
	MOV	R1,-2(R1)
	MOV	#4537,(R1)+
	MOV	#RREG,(R1)+
	MOV	#2,(R1)+
	MOV	R1,@(SP)+
	RETURN

2$:	TRAP	100
	CALL	CINT
	TRAP	113
	.WORD	RWON
	.BYTE	3,2
	TRAP	2
	MOV	ADRON(R5),(R1)+
	MOV	R0,-(SP)
	CLR	R0
	CLR	R2
	MOV	R1,-(SP)
	TST	(R1)+
1$:	CALL	TO
	INC	R2
	TRAP	112
	CMPB	(R3)+,#',
	BEQ	1$
	DEC	R3
	MOV	R2,@(SP)+
	MOV	(SP)+,R0
	RETURN

ADRON:	.WORD	ONJSR,ONJMP


PAR:	TRAP	127
	TRAP	100
	TRAP	130
	CALL	CINT
	RETURN

TRAP:
	CALL	PAR
	TRAP	113
	.WORD	RWTRAP
	.BYTE	3,0
	TRAP	2
	MOV	#TRPOF$,(R1)+
	RETURN

OPEN::	TRAP	115
	TRAP	56.
	CLR	R2
	TRAP	113
	.WORD	OPFOR
	.BYTE	3,0
	BR	1$
	TRAP	113
	.WORD	RWOPEN
	.BYTE	6,4
	TRAP	2
	MOV	R5,R2
1$:	MOV	OP(R2),(R1)+
	RETURN

OP:	.WORD	OPOUT,OPINP,OPAPD

CLOSE::
	MOV	#CLOFIL,(R1)+

	RETURN

TSTFLN:	CLR	@SP
	CMPB	@R3,#'#
	BNE	1$
	DEC	@SP
	INC	R3
	MOV	#DEVICE,(R1)+
1$:	MOV	R2,PC

TSTFIL:	TST	(SP)+
	TST	@SP
	BEQ	1$
	MOV	#CLRDEV,(R1)+
1$:	RTS	R2



SCREEN::
	TRAP	125
	MOV	#SMODE,(1)+
	RETURN

REPEAT::MOV	#$REPT,(R1)+
	RETURN
		
UNTIL::	TRAP	125
	MOV	#$UNTIL,(R1)+	
	RETURN

WHILE::
	PUSH	R1
	TRAP	125
	MOV	#$WHILE,(R1)+
	POP	(R1)+
	RETURN
	
WEND::
	MOV	#$WEND,(R1)+
	CLR	(R1)+
	RETURN

SGET::	
	CALL KORD1
		
	CMPB	#'-,(R3)+
E2:	BEQ	1$
	TRAP	2
1$:	CALL	KORD1
	CALL	TAKE
	MOV	#$GET,(R1)+
	RETURN
		
		
TAKE:	CMPB	#',,(R3)+
	BNE	E2
	TRAP	125
	RETURN
	
KORD1:	TRAP	127
	TRAP	124
	TRAP	130
	RETURN
		
SPUT::
	CALL	KORD1
	CALL	TAKE
	CALL	TAKE
	MOV 	#$PUT,(R1)+
	RETURN


PALETX::
	TRAP	124
	MOV	#$PALET,(R1)+
	RETURN		

SOUND::
	TRAP	124
	MOV	#$SOUND,(R1)+
	RETURN

FSOUND::TRAP	124
	MOV	#$FSOUN,(R1)+
	RETURN
	
NOSOUN::
	MOV	#$NSOUN,(R1)+
	RETURN	
	
PAGE::	
	TRAP	124
	MOV	#$PAGE,(R1)+
	RETURN

Delay::
	Trap	100
	Call	CSng
	Mov	#$Delay,(r1)+
	Return

FPut:	
	Trap	124
	Mov	#$FPut,(r1)+
	Return
		
Fget:	Trap	124
	Mov	#$FGet,(r1)+
	Return

FLoad:	Trap	115
	Trap	13.
	Mov	#$Fload,(r1)+
	Return

Fsave:	Trap	115
	Trap	13.
	Trap	126
	Trap	124
	Mov	#$Fsave,(r1)+
	Return

CLoad:	Trap	115
	Trap	13.
	Mov	#$Cload,(r1)+
	Return


SmodeG:
	Trap	125
	Mov	#$Smode,(r1)+
	Return
	
..Create:
	Trap	125
	Trap	126
	Trap	115
	Trap	13.
	Mov	#.$Create,(r1)+
	Return

..Open:
	Trap	125
	Trap	126
	Trap	115
	Trap	13.
	Mov	#.$Open,(r1)+
	Return

..Close:
	Trap	125
	Mov	#.$Close,(r1)+
	Return
..Purge:
	Trap	125
	Mov	#.$Purge,(r1)+
	Return

..Read:
	Trap	124
	Trap	126
	Trap	124
	Mov	#.$Read,(r1)+
	Return

..Write:
	Trap	124
	Trap	126
	Trap	124
	Mov	#.$Write,(r1)+
	Return

Width:
	Mov	#JCLS,(r1)+
	Jmp	Rem


CISLO::	MOV	(SP)+,R2
	TST	(R2)+
	TRAP	101
	.WORD	SPECHR
	BR	1$
	ADD	R4,PC
	BR	10$
	BR	13$
	TST	(R2)+
	MOV	R2,PC
10$:	CALL	BOHPAP
12$:	MOV	#1,R4
15$:	CMP	(R2)+,(R2)+
	MOV	R2,PC
1$:	TRAP	102
	BR	16$
	MOV	R2,PC
	BR	2$
16$:;	TST	LYGIS
	BR	2$
	TST	-(R2)
	MOV	R2,PC
13$:	DEC	R3
2$:	MOV	R3,-(SP)
	CLR	-(SP)
	TRAP	101
	.WORD	PLMI
	NEG	R4
	MOV	R4,@SP
	TRAP	117
	TRAP	101
	.WORD	TYPCHR+1
	NEG	R4
	TST	R4
	BLE	20$
	MOV	(SP)+,R4
	BMI	21$
	INC	@SP
21$:	MOV	(SP)+,R3
	MOV	R4,-(SP)
	TRAP	110
	CLR	R5
	TRAP	117
	INC	R3
	TST	R5
	BMI	24$
	TST	(SP)+
	BLE	12$
26$:	NEG	R5
	BMI	12$
	BR	27$
24$:	TST	(SP)+
	BGT	26$
27$:	TRAP	6
20$:	MOV	R4,R5
	TST	(SP)+


	MOV	@SP,R3
	MOV	#500,-(SP)
	CALL	PACK
	CLR	R4
	TST	R5
	BNE	15$
	INC	R3
	BR	15$

BOHPAP::TRAP	102
	BR	14$
	BR	11$
14$:	MOV	6(SP),R4
	TRAP	2
11$:	TRAP	101
	.WORD	TYPBOH
	BR	14$
	CALL	@ABOH(R4)
	RETURN

CHEX:	CLR	R5
6$:	TRAP	102
	BR	C1
	BR	7$
	SUB	#77,R4
8$:	ADD	#15.,R4
	INC	R3
	CMP	R5,#10000
	BHIS	C3
	ASL	R5
	ROL	R5
	ROL	R5
	ROL	R5
	BIS	R4,R5
	BR	6$
7$:	SUB	#'F,R4
	BLE	8$
C1:	RETURN

COCT:	CLR	R5
5$:	MOVB	@R3,R4
	SUB	#60,R4
	BIT	#177770,R4
	BNE	C1
	INC	R3
	ASL	R5
	BCS	C3
	ROL	R5
	BCS	C3
	ROL	R5
	BCS	C3
	BIS	R4,R5
	BR	5$

CBIN:	CLR	R5
2$:	MOVB	@R3,R4
	SUB	#60,R4

	ROR	R4
	BNE	C1
	INC	R3
	ROL	R5
	BCC	2$
C3:	TRAP	6

ABOH:	.WORD	CBIN,COCT,CHEX
SPECHR:	.BYTE	'&,'.,'(,0
TYPBOH:	.BYTE	'B,'O,'H,0

.EVEN
	.END

                                                                                                                                                                                                                                                                                                                                                                                