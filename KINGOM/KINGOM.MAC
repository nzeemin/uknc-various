;
; Это восстановленный в ассемблер MACRO-11 код игры
; "Королевство Эйфория", файл игры обычно назвался KINGOM.SAV.
; Игра в жанре экономической стратагии.
; Написана на Паскале ДВК (OMSI Pascal 1) для советских PDP11-
; совместимых машин, таких как ДВК и УКНЦ.
; Автор оригинала неизвестен, время создания предположительно 1986 год.
;
; Этот исходник компилируется в точную побайтовую копию игры командами:
;	MACRO KINGOM.MAC
;	LINK/STACK:1000 KINGOM
;
	.TITLE	KINGOM

	.ASECT
	.=001000
;
;
L01000:	JMP	L65754		; Работа с KING.DAT
L01004:	JMP	L57170
L01010:	JMP	L57412		; ESC161
L01014:	JMP	L57444		; ESCJ - Очистить до конца экрана
L01020:	JMP	L57476		; CURSORTO - Установить позицию курсора
L01024:	JMP	L57632
L01030:	JMP	L57660
L01034:	JMP	L60060
L01040:	JMP	L62010
;
; Процедура ??, два слова на стеке
L01044:	JSR	R0, L76342		; SVREG
; IF parameter > 32000.0
L01050:	MOV	000016(SP), -(SP)
L01054:	MOV	000016(SP), -(SP)
L01060:	CLR	-(SP)			; 32000 float const
L01062:	MOV	#043772, -(SP)		;
L01066:	CALL	L76446			; FLCOMP
L01072:	BGT	L01100
L01074:	JMP	L01112
; THEN
L01100:	MOV	#076400, 000020(SP)	; 32000.
L01106:	JMP	L01132
; ELSE
L01112:	MOV	000016(SP), -(SP)
L01116:	MOV	000016(SP), -(SP)
L01122:	CALL	L76012			; TRUNC
L01126:	MOV	(SP)+, 000020(SP)
; END IF
L01132:	JSR	R0, L76372		; UNREG
L01136:	MOV	(SP), 000004(SP)
L01142:	ADD	#000004, SP
L01146:	RETURN
;
; $BEGIN: Сюда переходим из START; R5 = 102420
$BEGIN::
L01150:	ADD	#000436, L70050		; $KORE += 286.
L01156:	CALL	L76410			; STKCHK
L01162:	CLR	-(SP)			; 0
L01164:	CALL	L75640			; $FLOAT
L01170:	MOV	(SP)+, 000316(R5)
L01174:	MOV	(SP)+, 000320(R5)
L01200:	CLR	-(SP)			; 0
L01202:	CALL	L75640			; $FLOAT
L01206:	MOV	(SP)+, 000322(R5)
L01212:	MOV	(SP)+, 000324(R5)
L01216:	CLR	-(SP)			; 0
L01220:	CALL	L75640			; $FLOAT
L01224:	MOV	(SP)+, 000336(R5)
L01230:	MOV	(SP)+, 000340(R5)
L01234:	CLR	-(SP)			; 0
L01236:	CALL	L75640			; $FLOAT
L01242:	MOV	(SP)+, 000342(R5)
L01246:	MOV	(SP)+, 000344(R5)
L01252:	CLR	-(SP)			; 0
L01254:	CALL	L75640			; $FLOAT
L01260:	MOV	(SP)+, 000326(R5)
L01264:	MOV	(SP)+, 000330(R5)
L01270:	CLR	-(SP)			; 0
L01272:	CALL	L75640			; $FLOAT
L01276:	MOV	(SP)+, 000332(R5)
L01302:	MOV	(SP)+, 000334(R5)
L01306:	CLR	000146(R5)
L01312:	CLR	000150(R5)
L01316:	CLR	000152(R5)
L01322:	CLR	000154(R5)
L01326:	CLR	000156(R5)
L01332:	CLR	000160(R5)
L01336:	CLR	000162(R5)
L01342:	CLR	000164(R5)
L01346:	CLR	000166(R5)
L01352:	CLR	000170(R5)
L01356:	CLR	000124(R5)
L01362:	CLR	000126(R5)
L01366:	CLR	000130(R5)
L01372:	CLR	000132(R5)
L01376:	CLR	000134(R5)
L01402:	CLR	000136(R5)
L01406:	CLR	000140(R5)
L01412:	CLR	000142(R5)
L01416:	CLR	000144(R5)
L01422:	CLR	000212(R5)
L01426:	CLR	000214(R5)
L01432:	CALL	L01024			; L57632
L01436:	MOV	#000012, -(SP)		; 10.
L01442:	MOV	#000017, -(SP)		; 15.
L01446:	CALL	L01020			; Установить позицию курсора
L01452:	MOV	#L44044, -(SP)		; "Королевство Эйфория"
L01456:	MOV	#000046, -(SP)
L01462:	CLR	-(SP)
L01464:	CALL	L75120			; WRSTG
L01470:	MOV	#000024, -(SP)		; 20.
L01474:	CLR	-(SP)			; 0
L01476:	CALL	L01020			; Установить позицию курсора
L01502:	MOV	#L44114, -(SP)		; "Сколько лет собираетесь править?"
L01506:	MOV	#000050, -(SP)
L01512:	CLR	-(SP)
L01514:	CALL	L75120			; WRSTG
L01520:	CALL	L73036			; RDNM
L01524:	MOV	(SP)+, 000176(R5)
L01530:	CALL	L72760			; RDLN
L01534:	MOV	#L44166, -(SP)		; "==> Ваш псевдоним?"
L01540:	MOV	#000024, -(SP)
L01544:	CLR	-(SP)
L01546:	CALL	L75120			; WRSTG
L01552:	MOV	R5, R0
L01554:	ADD	#000030, R0
L01560:	MOV	R0, -(SP)
L01562:	MOV	#000012, -(SP)		; 10.
L01566:	CALL	L74264			; RDSTG
L01572:	CALL	L72760			; RDLN
; VAR102 := ROUND(L57170(1177, VAR224))
L01576:	CMP	-(SP), -(SP)
L01600:	MOV	#002231, -(SP)		; 1177.
L01604:	MOV	R5, R0
L01606:	ADD	#000224, R0
L01612:	MOV	R0, -(SP)
L01614:	CALL	L01004			; L57170
L01620:	CALL	L75746			; ROUND
L01624:	MOV	(SP)+, 000102(R5)
; VAR104 := VAR30 + VAR31
L01630:	MOVB	000030(R5), R0
L01634:	MOVB	000031(R5), R1
L01640:	ADD	R0, R1
L01642:	MOV	R1, 000104(R5)
; VAR106 := VAR104 + VAR176
L01646:	MOV	000104(R5), R0
L01652:	ADD	000176(R5), R0
L01656:	MOV	R0, 000106(R5)
; FOR VAR216 := 1 TO VAR106
L01662:	MOV	R5, R0
L01664:	ADD	#000216, R0
L01670:	MOV	R0, -(SP)
L01672:	MOV	#000001, -(SP)
L01676:	MOV	000106(R5), -(SP)
L01702:	MOV	000002(SP), @000004(SP)
L01710:	CMP	@000004(SP), (SP)
L01714:	BLE	L01722
L01716:	JMP	L01762
; DO
L01722:	CMP	-(SP), -(SP)
L01724:	CLR	-(SP)
L01726:	MOV	R5, R0
L01730:	ADD	#000224, R0
L01734:	MOV	R0, -(SP)
L01736:	CALL	L01004			; L57170
L01742:	CALL	L75746			; ROUND
L01746:	MOV	(SP)+, 000102(R5)
;
L01752:	INC	@000004(SP)
L01756:	JMP	L01710
L01762:	ADD	#000006, SP
; END FOR
L01766:	MOV	#003702, 000172(R5)	; 1986. - год правления
L01774:	MOV	#000001, 000174(R5)	; номер года правления
L02002:	MOV	#001750, 000042(R5)	; 1000.
L02010:	MOV	#000144, 000044(R5)	; 100.
L02016:	MOV	#000012, 000046(R5)	; 10.
L02024:	MOV	#000144, 000050(R5)	; 100.
L02032:	MOV	#000310, 000052(R5)	; 200.
; VAR236 : = 0
L02040:	CLR	-(SP)
L02042:	CALL	L75640			; $FLOAT
L02046:	MOV	(SP)+, 000236(R5)
L02052:	MOV	(SP)+, 000240(R5)
; VAR242 := TRUNC(100 * (L57170(0,VAR224) + 0.5))
L02056:	MOV	#000144, -(SP)		; 100.
L02062:	CALL	L75640			; $FLOAT
L02066:	CMP	-(SP), -(SP)
L02070:	CLR	-(SP)
L02072:	MOV	R5, R0
L02074:	ADD	#000224, R0
L02100:	MOV	R0, -(SP)
L02102:	CALL	L01004			; L57170
L02106:	CLR	-(SP)			; 0.5 float const
L02110:	MOV	#040000, -(SP)		;
L02114:	FADD	SP
L02116:	FMUL	SP
L02120:	CALL	L76012			; TRUNC
L02124:	CALL	L75640			; $FLOAT
L02130:	MOV	(SP)+, 000242(R5)
L02134:	MOV	(SP)+, 000244(R5)
; VAR246 := TRUNC(100 * (L57170(0,VAR224) + 0.5))
L02140:	MOV	#000144, -(SP)		; 100.
L02144:	CALL	L75640			; $FLOAT
L02150:	CMP	-(SP), -(SP)
L02152:	CLR	-(SP)
L02154:	MOV	R5, R0
L02156:	ADD	#000224, R0
L02162:	MOV	R0, -(SP)
L02164:	CALL	L01004			; L57170
L02170:	CLR	-(SP)			; 0.5 float const
L02172:	MOV	#040000, -(SP)		;
L02176:	FADD	SP
L02200:	FMUL	SP
L02202:	CALL	L76012			; TRUNC
L02206:	CALL	L75640			; $FLOAT
L02212:	MOV	(SP)+, 000246(R5)
L02216:	MOV	(SP)+, 000250(R5)
; VAR252 := TRUNC(300 * (L57170(0,VAR224) + 0.5))
L02222:	MOV	#000454, -(SP)		; 300.
L02226:	CALL	L75640			; $FLOAT
L02232:	CMP	-(SP), -(SP)
L02234:	CLR	-(SP)
L02236:	MOV	R5, R0
L02240:	ADD	#000224, R0
L02244:	MOV	R0, -(SP)
L02246:	CALL	L01004			; L57170
L02252:	CLR	-(SP)
L02254:	MOV	#040000, -(SP)
L02260:	FADD	SP
L02262:	FMUL	SP
L02264:	CALL	L76012			; TRUNC
L02270:	CALL	L75640			; $FLOAT
L02274:	MOV	(SP)+, 000252(R5)
L02300:	MOV	(SP)+, 000254(R5)
; VAR256 := TRUNC(100 * (L57170(0,VAR224) + 0.5))
L02304:	MOV	#000144, -(SP)		; 100.
L02310:	CALL	L75640			; $FLOAT
L02314:	CMP	-(SP), -(SP)
L02316:	CLR	-(SP)
L02320:	MOV	R5, R0
L02322:	ADD	#000224, R0
L02326:	MOV	R0, -(SP)
L02330:	CALL	L01004			; L57170
L02334:	CLR	-(SP)
L02336:	MOV	#040000, -(SP)
L02342:	FADD	SP
L02344:	FMUL	SP
L02346:	CALL	L76012			; TRUNC
L02352:	CALL	L75640			; $FLOAT
L02356:	MOV	(SP)+, 000256(R5)
L02362:	MOV	(SP)+, 000260(R5)
; VAR262 := TRUNC(100 * (L57170(0,VAR224) + 0.5))
L02366:	MOV	#000144, -(SP)		; 100.
L02372:	CALL	L75640			; $FLOAT
L02376:	CMP	-(SP), -(SP)
L02400:	CLR	-(SP)
L02402:	MOV	R5, R0
L02404:	ADD	#000224, R0
L02410:	MOV	R0, -(SP)
L02412:	CALL	L01004			; L57170
L02416:	CLR	-(SP)
L02420:	MOV	#040000, -(SP)
L02424:	FADD	SP
L02426:	FMUL	SP
L02430:	CALL	L76012			; TRUNC
L02434:	CALL	L75640			; $FLOAT
L02440:	MOV	(SP)+, 000262(R5)
L02444:	MOV	(SP)+, 000264(R5)
;
L02450:	MOV	#000001, 000200(R5)
L02456:	MOV	#000001, 000202(R5)
L02464:	MOV	#000004, 000204(R5)
L02472:	MOV	#000001, 000206(R5)
L02500:	MOV	#000012, 000210(R5)
L02506:	CALL	L01024			; L57632
; LABEL 0
; VAR54 := ROUND(VAR42 * (L57170(0,VAR224) * L57170(0,VAR224) + 0.8))
L02512:	MOV	000042(R5), -(SP)
L02516:	CALL	L75640			; $FLOAT
L02522:	CMP	-(SP), -(SP)
L02524:	CLR	-(SP)
L02526:	MOV	R5, R0
L02530:	ADD	#000224, R0
L02534:	MOV	R0, -(SP)
L02536:	CALL	L01004			; L57170
L02542:	CMP	-(SP), -(SP)
L02544:	CLR	-(SP)
L02546:	MOV	R5, R0
L02550:	ADD	#000224, R0
L02554:	MOV	R0, -(SP)
L02556:	CALL	L01004			; L57170
L02562:	FMUL	SP
L02564:	MOV	#146315, -(SP)		; 0.8 float const
L02570:	MOV	#040114, -(SP)		;
L02574:	FADD	SP
L02576:	FMUL	SP
L02600:	CALL	L75746			; ROUND
L02604:	MOV	(SP)+, 000054(R5)
; VAR56 := ROUND(VAR44 * (L57170(0,VAR224) * 0.4 + 0.8))
L02610:	MOV	000044(R5), -(SP)
L02614:	CALL	L75640			; $FLOAT
L02620:	CMP	-(SP), -(SP)
L02622:	CLR	-(SP)
L02624:	MOV	R5, R0
L02626:	ADD	#000224, R0
L02632:	MOV	R0, -(SP)
L02634:	CALL	L01004			; L57170
L02640:	MOV	#146315, -(SP)		; 0.4 float conts
L02644:	MOV	#037714, -(SP)		;
L02650:	FMUL	SP
L02652:	MOV	#146315, -(SP)		; 0.8 float const
L02656:	MOV	#040114, -(SP)		;
L02662:	FADD	SP
L02664:	FMUL	SP
L02666:	CALL	L75746			; ROUND
L02672:	MOV	(SP)+, 000056(R5)
; VAR60 := ROUND(VAR46 * (L57170(0,VAR224) + 0.5))
L02676:	MOV	000046(R5), -(SP)
L02702:	CALL	L75640			; $FLOAT
L02706:	CMP	-(SP), -(SP)
L02710:	CLR	-(SP)
L02712:	MOV	R5, R0
L02714:	ADD	#000224, R0
L02720:	MOV	R0, -(SP)
L02722:	CALL	L01004			; L57170
L02726:	CLR	-(SP)
L02730:	MOV	#040000, -(SP)
L02734:	FADD	SP
L02736:	FMUL	SP
L02740:	CALL	L75746			; ROUND
L02744:	MOV	(SP)+, 000060(R5)
; VAR62 := ROUND(VAR50 * (L57170(0,VAR224) + 0.5))
L02750:	MOV	000050(R5), -(SP)
L02754:	CALL	L75640			; $FLOAT
L02760:	CMP	-(SP), -(SP)
L02762:	CLR	-(SP)
L02764:	MOV	R5, R0
L02766:	ADD	#000224, R0
L02772:	MOV	R0, -(SP)
L02774:	CALL	L01004			; L57170
L03000:	CLR	-(SP)
L03002:	MOV	#040000, -(SP)
L03006:	FADD	SP
L03010:	FMUL	SP
L03012:	CALL	L75746			; ROUND
L03016:	MOV	(SP)+, 000062(R5)
; VAR64 := ROUND(VAR52 * (L57170(0,VAR224) + 0.5))
L03022:	MOV	000052(R5), -(SP)
L03026:	CALL	L75640			; $FLOAT
L03032:	CMP	-(SP), -(SP)
L03034:	CLR	-(SP)
L03036:	MOV	R5, R0
L03040:	ADD	#000224, R0
L03044:	MOV	R0, -(SP)
L03046:	CALL	L01004			; L57170
L03052:	CLR	-(SP)
L03054:	MOV	#040000, -(SP)
L03060:	FADD	SP
L03062:	FMUL	SP
L03064:	CALL	L75746			; ROUND
L03070:	MOV	(SP)+, 000064(R5)
; VAR66 := ROUND(VAR54 / VAR42 * 100)
L03074:	MOV	000054(R5), -(SP)
L03100:	CALL	L75640			; $FLOAT
L03104:	MOV	000042(R5), -(SP)
L03110:	CALL	L75640			; $FLOAT
L03114:	FDIV	SP
L03116:	MOV	#000144, -(SP)		; 100.
L03122:	CALL	L75640			; $FLOAT
L03126:	FMUL	SP
L03130:	CALL	L75746			; ROUND
L03134:	MOV	(SP)+, 000066(R5)
; VAR70 := ROUND(VAR56 / VAR44 * 100)
L03140:	MOV	000056(R5), -(SP)
L03144:	CALL	L75640			; $FLOAT
L03150:	MOV	000044(R5), -(SP)
L03154:	CALL	L75640			; $FLOAT
L03160:	FDIV	SP
L03162:	MOV	#000144, -(SP)		; 100.
L03166:	CALL	L75640			; $FLOAT
L03172:	FMUL	SP
L03174:	CALL	L75746			; ROUND
L03200:	MOV	(SP)+, 000070(R5)
; VAR72 := ROUND(VAR60 / VAR46 * 100)
L03204:	MOV	000060(R5), -(SP)
L03210:	CALL	L75640			; $FLOAT
L03214:	MOV	000046(R5), -(SP)
L03220:	CALL	L75640			; $FLOAT
L03224:	FDIV	SP
L03226:	MOV	#000144, -(SP)		; 100.
L03232:	CALL	L75640			; $FLOAT
L03236:	FMUL	SP
L03240:	CALL	L75746			; ROUND
L03244:	MOV	(SP)+, 000072(R5)
; VAR74 := ROUND(VAR62 / VAR50 * 100)
L03250:	MOV	000062(R5), -(SP)
L03254:	CALL	L75640			; $FLOAT
L03260:	MOV	000050(R5), -(SP)
L03264:	CALL	L75640			; $FLOAT
L03270:	FDIV	SP
L03272:	MOV	#000144, -(SP)		; 100.
L03276:	CALL	L75640			; $FLOAT
L03302:	FMUL	SP
L03304:	CALL	L75746			; ROUND
L03310:	MOV	(SP)+, 000074(R5)
; VAR76 := ROUND(VAR64 / VAR52 * 100)
L03314:	MOV	000064(R5), -(SP)
L03320:	CALL	L75640			; $FLOAT
L03324:	MOV	000052(R5), -(SP)
L03330:	CALL	L75640			; $FLOAT
L03334:	FDIV	SP
L03336:	MOV	#000144, -(SP)		; 100.
L03342:	CALL	L75640			; $FLOAT
L03346:	FMUL	SP
L03350:	CALL	L75746			; ROUND
L03354:	MOV	(SP)+, 000076(R5)
;
L03360:	CALL	L01024			; L57632
L03364:	MOV	R5, R0
L03366:	ADD	#000242, R0
L03372:	MOV	R0, -(SP)
L03374:	MOV	R5, R0
L03376:	ADD	#000236, R0		; Золото
L03402:	MOV	R0, -(SP)
L03404:	MOV	R5, R0
L03406:	ADD	#000246, R0		; Земля
L03412:	MOV	R0, -(SP)
L03414:	MOV	R5, R0
L03416:	ADD	#000252, R0		; Рабочие
L03422:	MOV	R0, -(SP)
L03424:	MOV	R5, R0
L03426:	ADD	#000256, R0		; Солдаты
L03432:	MOV	R0, -(SP)
L03434:	MOV	R5, R0
L03436:	ADD	#000262, R0
L03442:	MOV	R0, -(SP)
L03444:	MOV	000054(R5), -(SP)
L03450:	MOV	000056(R5), -(SP)
L03454:	MOV	000060(R5), -(SP)
L03460:	MOV	000062(R5), -(SP)
L03464:	MOV	000064(R5), -(SP)
L03470:	MOV	000066(R5), -(SP)
L03474:	MOV	000070(R5), -(SP)
L03500:	MOV	000072(R5), -(SP)
L03504:	MOV	000074(R5), -(SP)
L03510:	MOV	000076(R5), -(SP)
L03514:	MOV	000172(R5), -(SP)	; Год правления
L03520:	MOV	000174(R5), -(SP)	; Номер года правления
L03524:	CALL	L01040			; L62010
; LABEL 1
L03530:	MOV	#000017, -(SP)		; 15.
L03534:	CLR	-(SP)			; 0
L03536:	CALL	L01020			; Установить позицию курсора
L03542:	CALL	L01014			; ESCJ
; VAR346 := L57170(0,VAR224)
L03546:	CMP	-(SP), -(SP)
L03550:	CLR	-(SP)
L03552:	MOV	R5, R0
L03554:	ADD	#000224, R0
L03560:	MOV	R0, -(SP)
L03562:	CALL	L01004			; L57170
L03566:	MOV	(SP)+, 000346(R5)
L03572:	MOV	(SP)+, 000350(R5)
; IF VAR346 < 0.5
L03576:	MOV	000350(R5), -(SP)
L03602:	MOV	000346(R5), -(SP)
L03606:	CLR	-(SP)			; 0.5 float const
L03610:	MOV	#040000, -(SP)		;
L03614:	CALL	L76446			; FLCOMP			; FLCOMP
L03620:	BLT	L03626
L03622:	JMP	L03650
; THEN
L03626:	MOV	#L44214, -(SP)		; "Торговля - двигатель прогресса"
L03632:	MOV	#000072, -(SP)
L03636:	CLR	-(SP)
L03640:	CALL	L75120			; WRSTG
L03644:	CALL	L74452			; WRLN
; END IF
; VAR352 := L57170(0,VAR224)
L03650:	CMP	-(SP), -(SP)
L03652:	CLR	-(SP)
L03654:	MOV	R5, R0
L03656:	ADD	#000224, R0
L03662:	MOV	R0, -(SP)
L03664:	CALL	L01004			; L57170
L03670:	MOV	(SP)+, 000352(R5)
L03674:	MOV	(SP)+, 000354(R5)
; IF (VAR346 > 0.5) AND (VAR352 > 0.5)
L03700:	MOV	000350(R5), -(SP)
L03704:	MOV	000346(R5), -(SP)
L03710:	CLR	-(SP)			; 0.5 float
L03712:	MOV	#040000, -(SP)		;
L03716:	CALL	L76446			; FLCOMP			; FLCOMP
L03722:	BGT	L03730
L03724:	CLR	R0
L03726:	BR	L03734
L03730:	MOV	#000001, R0
L03734:	MOV	000354(R5), -(SP)
L03740:	MOV	000352(R5), -(SP)
L03744:	CLR	-(SP)			; 0.5 float
L03746:	MOV	#040000, -(SP)		;
L03752:	CALL	L76446			; FLCOMP			; FLCOMP
L03756:	BGT	L03764
L03760:	CLR	R1
L03762:	BR	L03770
L03764:	MOV	#000001, R1
L03770:	COMB	R1
L03772:	BICB	R1, R0
L03774:	BNE	L04002
L03776:	JMP	L04034
; THEN
L04002:	MOV	#L44310, -(SP)		; "ЧП! Экономическая блокада"
L04006:	MOV	#000072, -(SP)
L04012:	CLR	-(SP)
L04014:	CALL	L75120			; WRSTG
L04020:	CALL	L74452			; WRLN
; GOTO LABEL 3
L04024:	MOV	L70056, SP		; $RESR6
L04030:	JMP	L14064
; END IF
L04034:	MOV	#000022, -(SP)		; 18.
L04040:	CLR	-(SP)			; 0
L04042:	CALL	L01020			; Установить позицию курсора
L04046:	CALL	L01014			; ESCJ
; VAR346 := VAR242 * L57170(0,VAR224)
L04052:	MOV	000244(R5), -(SP)
L04056:	MOV	000242(R5), -(SP)
L04062:	CMP	-(SP), -(SP)
L04064:	CLR	-(SP)
L04066:	MOV	R5, R0
L04070:	ADD	#000224, R0
L04074:	MOV	R0, -(SP)
L04076:	CALL	L01004			; L57170
L04102:	FMUL	SP
L04104:	MOV	(SP)+, 000346(R5)
L04110:	MOV	(SP)+, 000350(R5)
; L57660(VAR102,VAR104,VAR346)
L04114:	MOV	R5, R0
L04116:	ADD	#000102, R0
L04122:	MOV	R0, -(SP)
L04124:	MOV	R5, R0
L04126:	ADD	#000104, R0
L04132:	MOV	R0, -(SP)
L04134:	MOV	R5, R0
L04136:	ADD	#000346, R0
L04142:	MOV	R0, -(SP)
L04144:	CALL	L01030			; L57660
;
L04150:	MOV	#L44404, -(SP)		; "Маклер просит :"
L04154:	MOV	#000026, -(SP)
L04160:	CLR	-(SP)
L04162:	CALL	L75120			; WRSTG
L04166:	MOV	000102(R5), -(SP)
L04172:	CLR	-(SP)
L04174:	CALL	L74562			; WRNM
L04200:	MOV	#L44434, -(SP)		; " tysq~"
L04204:	MOV	#000006, -(SP)
L04210:	CLR	-(SP)
L04212:	CALL	L75120			; WRSTG
L04216:	MOV	000104(R5), -(SP)
L04222:	CLR	-(SP)
L04224:	CALL	L74562			; WRNM
L04230:	MOV	#L44444, -(SP)		; " rublej\r\n==> velaete ispolxzowatx maklera ? (0/1)"
L04234:	MOV	#000061, -(SP)
L04240:	CLR	-(SP)
L04242:	CALL	L75120			; WRSTG
L04246:	CALL	L73036			; RDNM
L04252:	MOV	(SP)+, 000102(R5)
L04256:	CALL	L72760			; RDLN
; IF VAR102 = 1
L04262:	CMP	000102(R5), #000001
L04270:	BEQ	L04276
L04272:	JMP	L11630			; LABEL 2
; THEN
L04276:	MOV	#000022, -(SP)		; 18.
L04302:	CLR	-(SP)			; 0
L04304:	CALL	L01020			; Установить позицию курсора
L04310:	CALL	L01014			; ESCJ
; VAR242 := VAR242 - VAR346
L04314:	MOV	000244(R5), -(SP)
L04320:	MOV	000242(R5), -(SP)
L04324:	MOV	000350(R5), -(SP)
L04330:	MOV	000346(R5), -(SP)
L04334:	FSUB	SP
L04336:	MOV	(SP)+, 000242(R5)
L04342:	MOV	(SP)+, 000244(R5)
; VAR352 := 0;
L04346:	CLR	-(SP)			; 0
L04350:	CALL	L75640			; $FLOAT
L04354:	MOV	(SP)+, 000352(R5)
L04360:	MOV	(SP)+, 000354(R5)
; VAR356 := 0
L04364:	CLR	-(SP)			; 0
L04366:	CALL	L75640			; $FLOAT
L04372:	MOV	(SP)+, 000356(R5)
L04376:	MOV	(SP)+, 000360(R5)
; VAR362 := 0
L04402:	CLR	-(SP)			; 0
L04404:	CALL	L75640			; $FLOAT
L04410:	MOV	(SP)+, 000362(R5)
L04414:	MOV	(SP)+, 000364(R5)
; VAR366 := 0
L04420:	CLR	-(SP)			; 0
L04422:	CALL	L75640			; $FLOAT
L04426:	MOV	(SP)+, 000366(R5)
L04432:	MOV	(SP)+, 000370(R5)
; VAR372 := 0
L04436:	CLR	-(SP)			; 0
L04440:	CALL	L75640			; $FLOAT
L04444:	MOV	(SP)+, 000372(R5)
L04450:	MOV	(SP)+, 000374(R5)
; IF (VAR236 > 0) AND (VAR66 > 100)
L04454:	MOV	000240(R5), -(SP)
L04460:	MOV	000236(R5), -(SP)
L04464:	CLR	-(SP)
L04466:	CALL	L75640			; $FLOAT
L04472:	CALL	L76446			; FLCOMP			; FLCOMP
L04476:	BGT	L04504
L04500:	CLR	R0
L04502:	BR	L04510
L04504:	MOV	#000001, R0
L04510:	CMP	000066(R5), #000144	; 100.
L04516:	BGT	L04524
L04520:	CLR	R1
L04522:	BR	L04530
L04524:	MOV	#000001, R1
L04530:	COMB	R1
L04532:	BICB	R1, R0
L04534:	BNE	L04542
L04536:	JMP	L04600
; THEN
L04542:	MOV	#L44526, -(SP)		; " zoloto,"
L04546:	MOV	#000010, -(SP)
L04552:	CLR	-(SP)
L04554:	CALL	L75120			; WRSTG
; VAR352 := VAR236
L04560:	MOV	000240(R5), -(SP)
L04564:	MOV	000236(R5), -(SP)
L04570:	MOV	(SP)+, 000352(R5)
L04574:	MOV	(SP)+, 000354(R5)
; END IF
; IF (VAR246 > 0) AND (VAR70 > 100) AND (VAR246 > VAR256 + 50)
L04600:	MOV	000250(R5), -(SP)
L04604:	MOV	000246(R5), -(SP)
L04610:	CLR	-(SP)			; 0
L04612:	CALL	L75640			; $FLOAT
L04616:	CALL	L76446			; FLCOMP			; FLCOMP
L04622:	BGT	L04630
L04624:	CLR	R0
L04626:	BR	L04634
L04630:	MOV	#000001, R0
L04634:	CMP	000070(R5), #000144
L04642:	BGT	L04650
L04644:	CLR	R1
L04646:	BR	L04654
L04650:	MOV	#000001, R1
L04654:	COMB	R1
L04656:	BICB	R1, R0
L04660:	MOV	000250(R5), -(SP)
L04664:	MOV	000246(R5), -(SP)
L04670:	MOV	000260(R5), -(SP)
L04674:	MOV	000256(R5), -(SP)
L04700:	MOV	#000062, -(SP)		; 50.
L04704:	CALL	L75640			; $FLOAT
L04710:	FADD	SP
L04712:	CALL	L76446			; FLCOMP
L04716:	BGT	L04724
L04720:	CLR	R1
L04722:	BR	L04730
L04724:	MOV	#000001, R1
L04730:	COMB	R1
L04732:	BICB	R1, R0
L04734:	BNE	L04742
L04736:	JMP	L05024
; THEN
L04742:	MOV	#L44540, -(SP)		; " zeml`,"
L04746:	MOV	#000007, -(SP)
L04752:	CLR	-(SP)
L04754:	CALL	L75120			; WRSTG
; VAR356 := VAR246 - VAR256 - 50
L04760:	MOV	000250(R5), -(SP)
L04764:	MOV	000246(R5), -(SP)
L04770:	MOV	000260(R5), -(SP)
L04774:	MOV	000256(R5), -(SP)
L05000:	FSUB	SP
L05002:	MOV	#177716, -(SP)		; -50;
L05006:	CALL	L75640			; $FLOAT
L05012:	FADD	SP
L05014:	MOV	(SP)+, 000356(R5)
L05020:	MOV	(SP)+, 000360(R5)
; END IF
; IF VAR256 < VAR246
L05024:	MOV	000260(R5), -(SP)
L05030:	MOV	000256(R5), -(SP)
L05034:	MOV	000250(R5), -(SP)
L05040:	MOV	000246(R5), -(SP)
L05044:	CALL	L76446			; FLCOMP
L05050:	BLT	L05056
L05052:	JMP	L05102
; THEN
L05056:	MOV	000260(R5), -(SP)
L05062:	MOV	000256(R5), -(SP)
L05066:	MOV	(SP)+, 000346(R5)
L05072:	MOV	(SP)+, 000350(R5)
L05076:	JMP	L05122
; ELSE
L05102:	MOV	000250(R5), -(SP)
L05106:	MOV	000246(R5), -(SP)
L05112:	MOV	(SP)+, 000346(R5)
L05116:	MOV	(SP)+, 000350(R5)
; END IF
; VAR376 := VAR252 - (VAR346 * VAR200) + (VAR256 + VAR262) * VAR202
L05122:	MOV	000254(R5), -(SP)
L05126:	MOV	000252(R5), -(SP)
L05132:	MOV	000350(R5), -(SP)
L05136:	MOV	000346(R5), -(SP)
L05142:	MOV	000200(R5), -(SP)
L05146:	CALL	L75640			; $FLOAT
L05152:	FMUL	SP
L05154:	MOV	000260(R5), -(SP)
L05160:	MOV	000256(R5), -(SP)
L05164:	MOV	000264(R5), -(SP)
L05170:	MOV	000262(R5), -(SP)
L05174:	FADD	SP
L05176:	MOV	000202(R5), -(SP)
L05202:	CALL	L75640			; $FLOAT
L05206:	FMUL	SP
L05210:	FADD	SP
L05212:	FSUB	SP
L05214:	MOV	(SP)+, 000376(R5)
L05220:	MOV	(SP)+, 000400(R5)
; IF (VAR252 > 0) AND (VAR72 > 100) AND (VAR376 > 0)
L05224:	MOV	000254(R5), -(SP)
L05230:	MOV	000252(R5), -(SP)
L05234:	CLR	-(SP)
L05236:	CALL	L75640			; $FLOAT
L05242:	CALL	L76446			; FLCOMP
L05246:	BGT	L05254
L05250:	CLR	R0
L05252:	BR	L05260
L05254:	MOV	#000001, R0
L05260:	CMP	000072(R5), #000144	; 100.
L05266:	BGT	L05274
L05270:	CLR	R1
L05272:	BR	L05300
L05274:	MOV	#000001, R1
L05300:	COMB	R1
L05302:	BICB	R1, R0
L05304:	MOV	000400(R5), -(SP)
L05310:	MOV	000376(R5), -(SP)
L05314:	CLR	-(SP)
L05316:	CALL	L75640			; $FLOAT
L05322:	CALL	L76446			; FLCOMP
L05326:	BGT	L05334
L05330:	CLR	R1
L05332:	BR	L05340
L05334:	MOV	#000001, R1
L05340:	COMB	R1
L05342:	BICB	R1, R0
L05344:	BNE	L05352
L05346:	JMP	L05410
; THEN
L05352:	MOV	#L44550, -(SP)		; " hleb,"
L05356:	MOV	#000006, -(SP)
L05362:	CLR	-(SP)
L05364:	CALL	L75120			; WRSTG
L05370:	MOV	000400(R5), -(SP)
L05374:	MOV	000376(R5), -(SP)
L05400:	MOV	(SP)+, 000362(R5)
L05404:	MOV	(SP)+, 000364(R5)
; END IF
; IF (VAR256 > 0) AND (VAR256 > VAR246) AND (VAR74 > 100)
L05410:	MOV	000260(R5), -(SP)
L05414:	MOV	000256(R5), -(SP)
L05420:	CLR	-(SP)
L05422:	CALL	L75640			; $FLOAT
L05426:	CALL	L76446			; FLCOMP
L05432:	BGT	L05440
L05434:	CLR	R0
L05436:	BR	L05444
L05440:	MOV	#000001, R0
L05444:	MOV	000260(R5), -(SP)
L05450:	MOV	000256(R5), -(SP)
L05454:	MOV	000250(R5), -(SP)
L05460:	MOV	000246(R5), -(SP)
L05464:	CALL	L76446			; FLCOMP
L05470:	BGT	L05476
L05472:	CLR	R1
L05474:	BR	L05502
L05476:	MOV	#000001, R1
L05502:	COMB	R1
L05504:	BICB	R1, R0
L05506:	CMP	000074(R5), #000144	; > 100. ?
L05514:	BGT	L05522
L05516:	CLR	R1
L05520:	BR	L05526
L05522:	MOV	#000001, R1
L05526:	COMB	R1
L05530:	BICB	R1, R0
L05532:	BNE	L05540
L05534:	JMP	L05610
; THEN
L05540:	MOV	#L44560, -(SP)		; " rabo~ih,"
L05544:	MOV	#000011, -(SP)
L05550:	CLR	-(SP)
L05552:	CALL	L75120			; WRSTG
L05556:	MOV	000260(R5), -(SP)
L05562:	MOV	000256(R5), -(SP)
L05566:	MOV	000250(R5), -(SP)
L05572:	MOV	000246(R5), -(SP)
L05576:	FSUB	SP
L05600:	MOV	(SP)+, 000366(R5)
L05604:	MOV	(SP)+, 000370(R5)
; END IF
; IF (VAR262 > 0) AND (VAR76 > 100)
L05610:	MOV	000264(R5), -(SP)
L05614:	MOV	000262(R5), -(SP)
L05620:	CLR	-(SP)
L05622:	CALL	L75640			; $FLOAT
L05626:	CALL	L76446			; FLCOMP
L05632:	BGT	L05640
L05634:	CLR	R0
L05636:	BR	L05644
L05640:	MOV	#000001, R0
L05644:	CMP	000076(R5), #000144
L05652:	BGT	L05660
L05654:	CLR	R1
L05656:	BR	L05664
L05660:	MOV	#000001, R1
L05664:	COMB	R1
L05666:	BICB	R1, R0
L05670:	BNE	L05676
L05672:	JMP	L05734
; THEN
L05676:	MOV	#L44572, -(SP)		; " soldat"
L05702:	MOV	#000007, -(SP)
L05706:	CLR	-(SP)
L05710:	CALL	L75120			; WRSTG
L05714:	MOV	000264(R5), -(SP)
L05720:	MOV	000262(R5), -(SP)
L05724:	MOV	(SP)+, 000372(R5)
L05730:	MOV	(SP)+, 000374(R5)
; END IF
L05734:	CLR	000102(R5)
; IF (VAR352 <> 0) OR (VAR356 <> 0) OR (VAR362 <> 0) OR (VAR366 <> 0) OR (VAR372 <> 0)
L05740:	MOV	000354(R5), -(SP)
L05744:	MOV	000352(R5), -(SP)
L05750:	CLR	-(SP)			; 0
L05752:	CALL	L75640			; $FLOAT
L05756:	CALL	L76446			; FLCOMP
L05762:	BNE	L05770
L05764:	CLR	R0
L05766:	BR	L05774
L05770:	MOV	#000001, R0
L05774:	MOV	000360(R5), -(SP)
L06000:	MOV	000356(R5), -(SP)
L06004:	CLR	-(SP)			; 0
L06006:	CALL	L75640			; $FLOAT
L06012:	CALL	L76446			; FLCOMP
L06016:	BNE	L06024
L06020:	CLR	R1
L06022:	BR	L06030
L06024:	MOV	#000001, R1
L06030:	BISB	R0, R1
L06032:	MOV	000364(R5), -(SP)
L06036:	MOV	000362(R5), -(SP)
L06042:	CLR	-(SP)			; 0
L06044:	CALL	L75640			; $FLOAT
L06050:	CALL	L76446			; FLCOMP
L06054:	BNE	L06062
L06056:	CLR	R0
L06060:	BR	L06066
L06062:	MOV	#000001, R0
L06066:	BISB	R1, R0
L06070:	MOV	000370(R5), -(SP)
L06074:	MOV	000366(R5), -(SP)
L06100:	CLR	-(SP)
L06102:	CALL	L75640			; $FLOAT
L06106:	CALL	L76446			; FLCOMP
L06112:	BNE	L06120
L06114:	CLR	R1
L06116:	BR	L06124
L06120:	MOV	#000001, R1
L06124:	BISB	R0, R1
L06126:	MOV	000374(R5), -(SP)
L06132:	MOV	000372(R5), -(SP)
L06136:	CLR	-(SP)
L06140:	CALL	L75640			; $FLOAT
L06144:	CALL	L76446			; FLCOMP
L06150:	BNE	L06156
L06152:	CLR	R0
L06154:	BR	L06162
L06156:	MOV	#000001, R0
L06162:	BISB	R1, R0
L06164:	BNE	L06172
L06166:	JMP	L06246
; THEN
L06172:	MOV	#L44602, -(SP)		; " predlaga` wygodno prodatx. soglasny ? (0/1) "
L06176:	MOV	#000055, -(SP)
L06202:	CLR	-(SP)
L06204:	CALL	L75120			; WRSTG
L06210:	CALL	L73036			; RDNM
L06214:	MOV	(SP)+, 000102(R5)
L06220:	CALL	L72760			; RDLN
; IF VAR102 = 0
L06224:	TST	000102(R5)
L06230:	BEQ	L06236
L06232:	JMP	L06246
; GOTO LABEL 2
L06236:	MOV	L70056, SP		; $RESR6
L06242:	JMP	L11630
; IF VAR102 = 1
L06246:	CMP	000102(R5), #000001
L06254:	BEQ	L06262
L06256:	JMP	L07034
; THEN
; VAR346 := VAR352 * VAR54 + VAR356 * VAR56 + VAR362 * VAR60 + VAR366 * VAR62 + VAR372 * VAR64
L06262:	MOV	000354(R5), -(SP)
L06266:	MOV	000352(R5), -(SP)
L06272:	MOV	000054(R5), -(SP)
L06276:	CALL	L75640			; $FLOAT
L06302:	FMUL	SP
L06304:	MOV	000360(R5), -(SP)
L06310:	MOV	000356(R5), -(SP)
L06314:	MOV	000056(R5), -(SP)
L06320:	CALL	L75640			; $FLOAT
L06324:	FMUL	SP
L06326:	FADD	SP
L06330:	MOV	000364(R5), -(SP)
L06334:	MOV	000362(R5), -(SP)
L06340:	MOV	000060(R5), -(SP)
L06344:	CALL	L75640			; $FLOAT
L06350:	FMUL	SP
L06352:	FADD	SP
L06354:	MOV	000370(R5), -(SP)
L06360:	MOV	000366(R5), -(SP)
L06364:	MOV	000062(R5), -(SP)
L06370:	CALL	L75640			; $FLOAT
L06374:	FMUL	SP
L06376:	FADD	SP
L06400:	MOV	000374(R5), -(SP)
L06404:	MOV	000372(R5), -(SP)
L06410:	MOV	000064(R5), -(SP)
L06414:	CALL	L75640			; $FLOAT
L06420:	FMUL	SP
L06422:	FADD	SP
L06424:	MOV	(SP)+, 000346(R5)
L06430:	MOV	(SP)+, 000350(R5)
; VAR242 := VAR242 + VAR346
L06434:	MOV	000244(R5), -(SP)
L06440:	MOV	000242(R5), -(SP)
L06444:	MOV	000350(R5), -(SP)
L06450:	MOV	000346(R5), -(SP)
L06454:	FADD	SP
L06456:	MOV	(SP)+, 000242(R5)
L06462:	MOV	(SP)+, 000244(R5)
; VAR236 := VAR236 - VAR352
L06466:	MOV	000240(R5), -(SP)
L06472:	MOV	000236(R5), -(SP)
L06476:	MOV	000354(R5), -(SP)
L06502:	MOV	000352(R5), -(SP)
L06506:	FSUB	SP
L06510:	MOV	(SP)+, 000236(R5)
L06514:	MOV	(SP)+, 000240(R5)
; VAR246 := VAR246 - VAR356
L06520:	MOV	000250(R5), -(SP)
L06524:	MOV	000246(R5), -(SP)
L06530:	MOV	000360(R5), -(SP)
L06534:	MOV	000356(R5), -(SP)
L06540:	FSUB	SP
L06542:	MOV	(SP)+, 000246(R5)
L06546:	MOV	(SP)+, 000250(R5)
; VAR252 := VAR254 - VAR362
L06552:	MOV	000254(R5), -(SP)
L06556:	MOV	000252(R5), -(SP)
L06562:	MOV	000364(R5), -(SP)
L06566:	MOV	000362(R5), -(SP)
L06572:	FSUB	SP
L06574:	MOV	(SP)+, 000252(R5)
L06600:	MOV	(SP)+, 000254(R5)
; VAR256 := VAR256 - VAR366
L06604:	MOV	000260(R5), -(SP)
L06610:	MOV	000256(R5), -(SP)
L06614:	MOV	000370(R5), -(SP)
L06620:	MOV	000366(R5), -(SP)
L06624:	FSUB	SP
L06626:	MOV	(SP)+, 000256(R5)
L06632:	MOV	(SP)+, 000260(R5)
; VAR262 := VAR262 - VAR372
L06636:	MOV	000264(R5), -(SP)
L06642:	MOV	000262(R5), -(SP)
L06646:	MOV	000374(R5), -(SP)
L06652:	MOV	000372(R5), -(SP)
L06656:	FSUB	SP
L06660:	MOV	(SP)+, 000262(R5)
L06664:	MOV	(SP)+, 000264(R5)
;
L06670:	MOV	R5, R0
L06672:	ADD	#000242, R0
L06676:	MOV	R0, -(SP)
L06700:	MOV	R5, R0
L06702:	ADD	#000236, R0
L06706:	MOV	R0, -(SP)
L06710:	MOV	R5, R0
L06712:	ADD	#000246, R0
L06716:	MOV	R0, -(SP)
L06720:	MOV	R5, R0
L06722:	ADD	#000252, R0
L06726:	MOV	R0, -(SP)
L06730:	MOV	R5, R0
L06732:	ADD	#000256, R0
L06736:	MOV	R0, -(SP)
L06740:	MOV	R5, R0
L06742:	ADD	#000262, R0
L06746:	MOV	R0, -(SP)
L06750:	MOV	000054(R5), -(SP)
L06754:	MOV	000056(R5), -(SP)
L06760:	MOV	000060(R5), -(SP)
L06764:	MOV	000062(R5), -(SP)
L06770:	MOV	000064(R5), -(SP)
L06774:	MOV	000066(R5), -(SP)
L07000:	MOV	000070(R5), -(SP)
L07004:	MOV	000072(R5), -(SP)
L07010:	MOV	000074(R5), -(SP)
L07014:	MOV	000076(R5), -(SP)
L07020:	MOV	000172(R5), -(SP)	; Год правления
L07024:	MOV	000174(R5), -(SP)	; Номер года правления
L07030:	CALL	L01040			; L62010
; VAR402 := VAR242 - VAR262 * VAR210
L07034:	MOV	000244(R5), -(SP)
L07040:	MOV	000242(R5), -(SP)
L07044:	MOV	000264(R5), -(SP)
L07050:	MOV	000262(R5), -(SP)
L07054:	MOV	000210(R5), -(SP)
L07060:	CALL	L75640			; $FLOAT
L07064:	FMUL	SP
L07066:	FSUB	SP
L07070:	MOV	(SP)+, 000402(R5)
L07074:	MOV	(SP)+, 000404(R5)
; IF (VAR402 < VAR54) AND (VAR402 > VAR60)
L07100:	MOV	000404(R5), -(SP)
L07104:	MOV	000402(R5), -(SP)
L07110:	MOV	000054(R5), -(SP)
L07114:	CALL	L75640			; $FLOAT
L07120:	CALL	L76446			; FLCOMP
L07124:	BLT	L07132
L07126:	CLR	R0
L07130:	BR	L07136
L07132:	MOV	#000001, R0
L07136:	MOV	000404(R5), -(SP)
L07142:	MOV	000402(R5), -(SP)
L07146:	MOV	000060(R5), -(SP)
L07152:	CALL	L75640			; $FLOAT
L07156:	CALL	L76446			; FLCOMP
L07162:	BLT	L07170
L07164:	CLR	R1
L07166:	BR	L07174
L07170:	MOV	#000001, R1
L07174:	COMB	R1
L07176:	BICB	R1, R0
L07200:	BNE	L07206
L07202:	JMP	L07216
; THEN
; GOTO LABEL 3
L07206:	MOV	L70056, SP		; $RESR6
L07212:	JMP	L14064
;
L07216:	MOV	#000022, -(SP)		; 18.
L07222:	CLR	-(SP)			; 0
L07224:	CALL	L01020			; Установить позицию курсора
L07230:	CALL	L01014			; ESCJ
;
L07234:	MOV	R5, R0
L07236:	ADD	#000102, R0
L07242:	MOV	R0, -(SP)
L07244:	MOV	R5, R0
L07246:	ADD	#000104, R0
L07252:	MOV	R0, -(SP)
L07254:	MOV	R5, R0
L07256:	ADD	#000402, R0
L07262:	MOV	R0, -(SP)
L07264:	CALL	L01030			; L57660
;
L07270:	MOV	#L44660, -(SP)		; "\r\n  w kazne"
L07274:	MOV	#000013, -(SP)
L07300:	CLR	-(SP)
L07302:	CALL	L75120			; WRSTG
L07306:	MOV	000102(R5), -(SP)
L07312:	CLR	-(SP)
L07314:	CALL	L74562			; WRNM
L07320:	MOV	#L44674, -(SP)		; " t."
L07324:	MOV	#000003, -(SP)
L07330:	CLR	-(SP)
L07332:	CALL	L75120			; WRSTG
L07336:	MOV	000104(R5), -(SP)
L07342:	CLR	-(SP)
L07344:	CALL	L74562			; WRNM
L07350:	MOV	#L44700, -(SP)
L07354:	MOV	#000125, -(SP)
L07360:	CLR	-(SP)
L07362:	CALL	L75120			; WRSTG
L07366:	CALL	L73272			; RDRL
L07372:	MOV	(SP)+, 000346(R5)
L07376:	MOV	(SP)+, 000350(R5)
L07402:	CALL	L72760			; RDLN
; IF VAR346 > VAR402
L07406:	MOV	000350(R5), -(SP)
L07412:	MOV	000346(R5), -(SP)
L07416:	MOV	000404(R5), -(SP)
L07422:	MOV	000402(R5), -(SP)
L07426:	CALL	L76446			; FLCOMP
L07432:	BLT	L07440
L07434:	JMP	L07460
; THEN VAR402 := VAR346
L07440:	MOV	000350(R5), -(SP)
L07444:	MOV	000346(R5), -(SP)
L07450:	MOV	(SP)+, 000402(R5)
L07454:	MOV	(SP)+, 000404(R5)
; END IF
L07460:	MOV	#000022, -(SP)		; 18.
L07464:	CLR	-(SP)			; 0
L07466:	CALL	L01020			; Установить позицию курсора
L07472:	CALL	L01014			; ESCJ
;
L07476:	CLR	-(SP)			; 0
L07500:	CALL	L75640			; $FLOAT
L07504:	MOV	(SP)+, 000352(R5)
L07510:	MOV	(SP)+, 000354(R5)
L07514:	CLR	-(SP)			; 0
L07516:	CALL	L75640			; $FLOAT
L07522:	MOV	(SP)+, 000356(R5)
L07526:	MOV	(SP)+, 000360(R5)
L07532:	CLR	-(SP)			; 0
L07534:	CALL	L75640			; $FLOAT
L07540:	MOV	(SP)+, 000362(R5)
L07544:	MOV	(SP)+, 000364(R5)
; IF VAR256 > VAR246
L07550:	MOV	000260(R5), -(SP)
L07554:	MOV	000256(R5), -(SP)
L07560:	MOV	000250(R5), -(SP)
L07564:	MOV	000246(R5), -(SP)
L07570:	CALL	L76446			; FLCOMP
L07574:	BGT	L07602
L07576:	JMP	L07626
; THEN
L07602:	MOV	000250(R5), -(SP)
L07606:	MOV	000246(R5), -(SP)
L07612:	MOV	(SP)+, 000346(R5)
L07616:	MOV	(SP)+, 000350(R5)
L07622:	JMP	L07646
; ELSE
L07626:	MOV	000260(R5), -(SP)
L07632:	MOV	000256(R5), -(SP)
L07636:	MOV	(SP)+, 000346(R5)
L07642:	MOV	(SP)+, 000350(R5)
; END IF
; VAR346 := VAR346 * VAR200 + (VAR256 + VAR262) * VAR202
L07646:	MOV	000350(R5), -(SP)
L07652:	MOV	000346(R5), -(SP)
L07656:	MOV	000200(R5), -(SP)
L07662:	CALL	L75640			; $FLOAT
L07666:	FMUL	SP
L07670:	MOV	000260(R5), -(SP)
L07674:	MOV	000256(R5), -(SP)
L07700:	MOV	000264(R5), -(SP)
L07704:	MOV	000262(R5), -(SP)
L07710:	FADD	SP
L07712:	MOV	000202(R5), -(SP)
L07716:	CALL	L75640			; $FLOAT
L07722:	FMUL	SP
L07724:	FADD	SP
L07726:	MOV	(SP)+, 000346(R5)
L07732:	MOV	(SP)+, 000350(R5)
; IF (VAR72 < 100) AND (VAR346 > VAR252)
L07736:	CMP	000072(R5), #000144
L07744:	BLT	L07752
L07746:	CLR	R0
L07750:	BR	L07756
L07752:	MOV	#000001, R0
L07756:	MOV	000350(R5), -(SP)
L07762:	MOV	000346(R5), -(SP)
L07766:	MOV	000254(R5), -(SP)
L07772:	MOV	000252(R5), -(SP)
L07776:	CALL	L76446			; FLCOMP
L10002:	BGT	L10010
L10004:	CLR	R1
L10006:	BR	L10014
L10010:	MOV	#000001, R1
L10014:	COMB	R1
L10016:	BICB	R1, R0
L10020:	BNE	L10026
L10022:	JMP	L10250
; THEN
L10026:	MOV	#L45026, -(SP)		; " zerno,"
L10032:	MOV	#000007, -(SP)
L10036:	CLR	-(SP)
L10040:	CALL	L75120			; WRSTG
; VAR352 := TRUNC(VAR402 / VAR60)
L10044:	MOV	000404(R5), -(SP)
L10050:	MOV	000402(R5), -(SP)
L10054:	MOV	000060(R5), -(SP)
L10060:	CALL	L75640			; $FLOAT
L10064:	FDIV	SP
L10066:	CALL	L76012			; TRUNC
L10072:	CALL	L75640			; $FLOAT
L10076:	MOV	(SP)+, 000352(R5)
L10102:	MOV	(SP)+, 000354(R5)
; IF VAR352 > VAR350 - VAR254
L10106:	MOV	000354(R5), -(SP)
L10112:	MOV	000352(R5), -(SP)
L10116:	MOV	000350(R5), -(SP)
L10122:	MOV	000346(R5), -(SP)
L10126:	MOV	000254(R5), -(SP)
L10132:	MOV	000252(R5), -(SP)
L10136:	FSUB	SP
L10140:	CALL	L76446			; FLCOMP
L10144:	BGT	L10152
L10146:	JMP	L10204
; THEN
; VAR352 := VAR350 - VAR252
L10152:	MOV	000350(R5), -(SP)
L10156:	MOV	000346(R5), -(SP)
L10162:	MOV	000254(R5), -(SP)
L10166:	MOV	000252(R5), -(SP)
L10172:	FSUB	SP
L10174:	MOV	(SP)+, 000352(R5)
L10200:	MOV	(SP)+, 000354(R5)
; END IF
; VAR402 := VAR402 - VAR352 * VAR60
L10204:	MOV	000404(R5), -(SP)
L10210:	MOV	000402(R5), -(SP)
L10214:	MOV	000354(R5), -(SP)
L10220:	MOV	000352(R5), -(SP)
L10224:	MOV	000060(R5), -(SP)
L10230:	CALL	L75640			; $FLOAT
L10234:	FMUL	SP
L10236:	FSUB	SP
L10240:	MOV	(SP)+, 000402(R5)
L10244:	MOV	(SP)+, 000404(R5)
; END IF
; IF (VAR66 < 100) AND (VAR402 > VAR54) AND (VAR66 < VAR70)
L10250:	CMP	000066(R5), #000144
L10256:	BLT	L10264
L10260:	CLR	R0
L10262:	BR	L10270
L10264:	MOV	#000001, R0
L10270:	MOV	000404(R5), -(SP)
L10274:	MOV	000402(R5), -(SP)
L10300:	MOV	000054(R5), -(SP)
L10304:	CALL	L75640			; $FLOAT
L10310:	CALL	L76446			; FLCOMP
L10314:	BGT	L10322
L10316:	CLR	R1
L10320:	BR	L10326
L10322:	MOV	#000001, R1
L10326:	COMB	R1
L10330:	BICB	R1, R0
L10332:	CMP	000066(R5), 000070(R5)
L10340:	BLT	L10346
L10342:	CLR	R1
L10344:	BR	L10352
L10346:	MOV	#000001, R1
L10352:	COMB	R1
L10354:	BICB	R1, R0
L10356:	BNE	L10364
L10360:	JMP	L10510
; THEN
L10364:	MOV	#L45036, -(SP)		; " zoloto"
L10370:	MOV	#000007, -(SP)
L10374:	CLR	-(SP)
L10376:	CALL	L75120			; WRSTG
; VAR356 := TRUNC(VAR402 / VAR54)
L10402:	MOV	000404(R5), -(SP)
L10406:	MOV	000402(R5), -(SP)
L10412:	MOV	000054(R5), -(SP)
L10416:	CALL	L75640			; $FLOAT
L10422:	FDIV	SP
L10424:	CALL	L76012			; TRUNC
L10430:	CALL	L75640			; $FLOAT
L10434:	MOV	(SP)+, 000356(R5)
L10440:	MOV	(SP)+, 000360(R5)
; VAR402 := VAR402 - VAR356 * VAR54
L10444:	MOV	000404(R5), -(SP)
L10450:	MOV	000402(R5), -(SP)
L10454:	MOV	000360(R5), -(SP)
L10460:	MOV	000356(R5), -(SP)
L10464:	MOV	000054(R5), -(SP)
L10470:	CALL	L75640			; $FLOAT
L10474:	FMUL	SP
L10476:	FSUB	SP
L10500:	MOV	(SP)+, 000402(R5)
L10504:	MOV	(SP)+, 000404(R5)
; END IF
; IF (VAR70 < 100) AND (VAR402 > VAR56) AND (VAR70 < VAR66)
L10510:	CMP	000070(R5), #000144
L10516:	BLT	L10524
L10520:	CLR	R0
L10522:	BR	L10530
L10524:	MOV	#000001, R0
L10530:	MOV	000404(R5), -(SP)
L10534:	MOV	000402(R5), -(SP)
L10540:	MOV	000056(R5), -(SP)
L10544:	CALL	L75640			; $FLOAT
L10550:	CALL	L76446			; FLCOMP
L10554:	BGT	L10562
L10556:	CLR	R1
L10560:	BR	L10566
L10562:	MOV	#000001, R1
L10566:	COMB	R1
L10570:	BICB	R1, R0
L10572:	CMP	000070(R5), 000066(R5)
L10600:	BLT	L10606
L10602:	CLR	R1
L10604:	BR	L10612
L10606:	MOV	#000001, R1
L10612:	COMB	R1
L10614:	BICB	R1, R0
L10616:	BNE	L10624
L10620:	JMP	L10750
; THEN
;
L10624:	MOV	#L45046, -(SP)		; " zeml`"
L10630:	MOV	#000006, -(SP)
L10634:	CLR	-(SP)
L10636:	CALL	L75120			; WRSTG
; VAR362 := TRUNC(VAR402 / VAR56)
L10642:	MOV	000404(R5), -(SP)
L10646:	MOV	000402(R5), -(SP)
L10652:	MOV	000056(R5), -(SP)
L10656:	CALL	L75640			; $FLOAT
L10662:	FDIV	SP
L10664:	CALL	L76012			; TRUNC
L10670:	CALL	L75640			; $FLOAT
L10674:	MOV	(SP)+, 000362(R5)
L10700:	MOV	(SP)+, 000364(R5)
; VAR402 := VAR402 - VAR362 * VAR56
L10704:	MOV	000404(R5), -(SP)
L10710:	MOV	000402(R5), -(SP)
L10714:	MOV	000364(R5), -(SP)
L10720:	MOV	000362(R5), -(SP)
L10724:	MOV	000056(R5), -(SP)
L10730:	CALL	L75640			; $FLOAT
L10734:	FMUL	SP
L10736:	FSUB	SP
L10740:	MOV	(SP)+, 000402(R5)
L10744:	MOV	(SP)+, 000404(R5)
; END IF
L10750:	CLR	000102(R5)
; IF (VAR352 <> 0) OR (VAR356 <> 0) OR (VAR362 <> 0)
L10754:	MOV	000354(R5), -(SP)
L10760:	MOV	000352(R5), -(SP)
L10764:	CLR	-(SP)			; 0
L10766:	CALL	L75640			; $FLOAT
L10772:	CALL	L76446			; FLCOMP
L10776:	BNE	L11004
L11000:	CLR	R0
L11002:	BR	L11010
L11004:	MOV	#000001, R0
L11010:	MOV	000360(R5), -(SP)
L11014:	MOV	000356(R5), -(SP)
L11020:	CLR	-(SP)			; 0
L11022:	CALL	L75640			; $FLOAT
L11026:	CALL	L76446			; FLCOMP
L11032:	BNE	L11040
L11034:	CLR	R1
L11036:	BR	L11044
L11040:	MOV	#000001, R1
L11044:	BISB	R0, R1
L11046:	MOV	000364(R5), -(SP)
L11052:	MOV	000362(R5), -(SP)
L11056:	CLR	-(SP)			; 0
L11060:	CALL	L75640			; $FLOAT
L11064:	CALL	L76446			; FLCOMP
L11070:	BNE	L11076
L11072:	CLR	R0
L11074:	BR	L11102
L11076:	MOV	#000001, R0
L11102:	BISB	R1, R0
L11104:	BNE	L11112
L11106:	JMP	L11166
; THEN
L11112:	MOV	#L45056, -(SP)		; " predlaga` wygodno kupitx. soglasny ? (0/1) "
L11116:	MOV	#000054, -(SP)
L11122:	CLR	-(SP)
L11124:	CALL	L75120			; WRSTG
L11130:	CALL	L73036			; RDNM
L11134:	MOV	(SP)+, 000102(R5)
L11140:	CALL	L72760			; RDLN
; IF VAR102 = 0
L11144:	TST	000102(R5)
L11150:	BEQ	L11156
L11152:	JMP	L11166
; GOTO LABEL 2
L11156:	MOV	L70056, SP		; $RESR6
L11162:	JMP	L11630
; END IF
; IF VAR102 = 1
L11166:	CMP	000102(R5), #000001
L11174:	BEQ	L11202
L11176:	JMP	L11620
; THEN
; VAR346 := VAR352 * VAR60 + VAR356 * VAR54 + VAR362 * VAR56
L11202:	MOV	000354(R5), -(SP)
L11206:	MOV	000352(R5), -(SP)
L11212:	MOV	000060(R5), -(SP)
L11216:	CALL	L75640			; $FLOAT
L11222:	FMUL	SP
L11224:	MOV	000360(R5), -(SP)
L11230:	MOV	000356(R5), -(SP)
L11234:	MOV	000054(R5), -(SP)
L11240:	CALL	L75640			; $FLOAT
L11244:	FMUL	SP
L11246:	FADD	SP
L11250:	MOV	000364(R5), -(SP)
L11254:	MOV	000362(R5), -(SP)
L11260:	MOV	000056(R5), -(SP)
L11264:	CALL	L75640			; $FLOAT
L11270:	FMUL	SP
L11272:	FADD	SP
L11274:	MOV	(SP)+, 000346(R5)
L11300:	MOV	(SP)+, 000350(R5)
; VAR242 := VAR242 - VAR346
L11304:	MOV	000244(R5), -(SP)
L11310:	MOV	000242(R5), -(SP)
L11314:	MOV	000350(R5), -(SP)
L11320:	MOV	000346(R5), -(SP)
L11324:	FSUB	SP
L11326:	MOV	(SP)+, 000242(R5)
L11332:	MOV	(SP)+, 000244(R5)
; VAR252 := VAR252 + VAR352
L11336:	MOV	000254(R5), -(SP)
L11342:	MOV	000252(R5), -(SP)
L11346:	MOV	000354(R5), -(SP)
L11352:	MOV	000352(R5), -(SP)
L11356:	FADD	SP
L11360:	MOV	(SP)+, 000252(R5)
L11364:	MOV	(SP)+, 000254(R5)
; VAR236 := VAR236 + VAR356
L11370:	MOV	000240(R5), -(SP)
L11374:	MOV	000236(R5), -(SP)
L11400:	MOV	000360(R5), -(SP)
L11404:	MOV	000356(R5), -(SP)
L11410:	FADD	SP
L11412:	MOV	(SP)+, 000236(R5)
L11416:	MOV	(SP)+, 000240(R5)
; VAR246 := VAR246 + VAR362
L11422:	MOV	000250(R5), -(SP)
L11426:	MOV	000246(R5), -(SP)
L11432:	MOV	000364(R5), -(SP)
L11436:	MOV	000362(R5), -(SP)
L11442:	FADD	SP
L11444:	MOV	(SP)+, 000246(R5)
L11450:	MOV	(SP)+, 000250(R5)
;
L11454:	MOV	R5, R0
L11456:	ADD	#000242, R0
L11462:	MOV	R0, -(SP)
L11464:	MOV	R5, R0
L11466:	ADD	#000236, R0
L11472:	MOV	R0, -(SP)
L11474:	MOV	R5, R0
L11476:	ADD	#000246, R0
L11502:	MOV	R0, -(SP)
L11504:	MOV	R5, R0
L11506:	ADD	#000252, R0
L11512:	MOV	R0, -(SP)
L11514:	MOV	R5, R0
L11516:	ADD	#000256, R0
L11522:	MOV	R0, -(SP)
L11524:	MOV	R5, R0
L11526:	ADD	#000262, R0
L11532:	MOV	R0, -(SP)
L11534:	MOV	000054(R5), -(SP)
L11540:	MOV	000056(R5), -(SP)
L11544:	MOV	000060(R5), -(SP)
L11550:	MOV	000062(R5), -(SP)
L11554:	MOV	000064(R5), -(SP)
L11560:	MOV	000066(R5), -(SP)
L11564:	MOV	000070(R5), -(SP)
L11570:	MOV	000072(R5), -(SP)
L11574:	MOV	000074(R5), -(SP)
L11600:	MOV	000076(R5), -(SP)
L11604:	MOV	000172(R5), -(SP)	; Год правления
L11610:	MOV	000174(R5), -(SP)	; Номер года правления
L11614:	CALL	L01040			; L62010
; END IF
; GOTO LABEL 3
L11620:	MOV	L70056, SP		; $RESR6
L11624:	JMP	L14064
; END IF
; LABEL 2
L11630:	MOV	#000022, -(SP)		; 18.
L11634:	CLR	-(SP)			; 0
L11636:	CALL	L01020			; Установить позицию курсора
L11642:	CALL	L01014			; ESCJ
;
L11646:	MOV	#L45134, -(SP)		; "==> velaete sami torgowatx ? (0/1) "
L11652:	MOV	#000043, -(SP)
L11656:	CLR	-(SP)
L11660:	CALL	L75120			; WRSTG
L11664:	CALL	L73036			; RDNM
L11670:	MOV	(SP)+, 000102(R5)
L11674:	CALL	L72760			; RDLN
; IF VAR102 = 0
L11700:	TST	000102(R5)
L11704:	BEQ	L11712
L11706:	JMP	L11722
; GOTO LABEL 3
L11712:	MOV	L70056, SP		; $RESR6
L11716:	JMP	L14064
; END IF
L11722:	MOV	#000022, -(SP)		; 18.
L11726:	CLR	-(SP)			; 0
L11730:	CALL	L01020			; Установить позицию курсора
L11734:	CALL	L01014			; ESCJ
L11740:	MOV	#L45200, -(SP)		; "  (+) pokupajte / prodawajte (-) :"
L11744:	MOV	#000054, -(SP)
L11750:	CLR	-(SP)
L11752:	CALL	L75120			; WRSTG
L11756:	CALL	L74452			; WRLN
L11762:	MOV	#L45256, -(SP)		; "  zoloto(kg),zemlq(ga),zerno(t),rabo~ie,soldaty(~el)?"
L11766:	MOV	#000065, -(SP)
L11772:	CLR	-(SP)
L11774:	CALL	L75120			; WRSTG
L12000:	CALL	L74452			; WRLN
L12004:	MOV	#L45344, -(SP)		; "==> "
L12010:	MOV	#000004, -(SP)
L12014:	CLR	-(SP)
L12016:	CALL	L75120			; WRSTG
; READLN(VAR266,VAR276,VAR302,VAR306,VAR312)
L12022:	CALL	L73272			; RDRL
L12026:	MOV	(SP)+, 000266(R5)
L12032:	MOV	(SP)+, 000270(R5)
L12036:	CALL	L73272			; RDRL
L12042:	MOV	(SP)+, 000276(R5)
L12046:	MOV	(SP)+, 000300(R5)
L12052:	CALL	L73272			; RDRL
L12056:	MOV	(SP)+, 000302(R5)
L12062:	MOV	(SP)+, 000304(R5)
L12066:	CALL	L73272			; RDRL
L12072:	MOV	(SP)+, 000306(R5)
L12076:	MOV	(SP)+, 000310(R5)
L12102:	CALL	L73272			; RDRL
L12106:	MOV	(SP)+, 000312(R5)
L12112:	MOV	(SP)+, 000314(R5)
L12116:	CALL	L72760			; RDLN
; VAR346 := VAR236 + VAR266
L12122:	MOV	000240(R5), -(SP)
L12126:	MOV	000236(R5), -(SP)
L12132:	MOV	000270(R5), -(SP)
L12136:	MOV	000266(R5), -(SP)
L12142:	FADD	SP
L12144:	MOV	(SP)+, 000346(R5)
L12150:	MOV	(SP)+, 000350(R5)
; VAR352 := VAR246 + VAR276
L12154:	MOV	000250(R5), -(SP)
L12160:	MOV	000246(R5), -(SP)
L12164:	MOV	000300(R5), -(SP)
L12170:	MOV	000276(R5), -(SP)
L12174:	FADD	SP
L12176:	MOV	(SP)+, 000352(R5)
L12202:	MOV	(SP)+, 000354(R5)
; VAR356 := VAR252 + VAR302
L12206:	MOV	000254(R5), -(SP)
L12212:	MOV	000252(R5), -(SP)
L12216:	MOV	000304(R5), -(SP)
L12222:	MOV	000302(R5), -(SP)
L12226:	FADD	SP
L12230:	MOV	(SP)+, 000356(R5)
L12234:	MOV	(SP)+, 000360(R5)
; VAR362 := VAR256 + VAR306
L12240:	MOV	000260(R5), -(SP)
L12244:	MOV	000256(R5), -(SP)
L12250:	MOV	000310(R5), -(SP)
L12254:	MOV	000306(R5), -(SP)
L12260:	FADD	SP
L12262:	MOV	(SP)+, 000362(R5)
L12266:	MOV	(SP)+, 000364(R5)
; VAR366 := VAR262 + VAR312
L12272:	MOV	000264(R5), -(SP)
L12276:	MOV	000262(R5), -(SP)
L12302:	MOV	000314(R5), -(SP)
L12306:	MOV	000312(R5), -(SP)
L12312:	FADD	SP
L12314:	MOV	(SP)+, 000366(R5)
L12320:	MOV	(SP)+, 000370(R5)
; IF (VAR346 < 0) OR (VAR352 < 0) OR (VAR352 < 0) OR (VAR356 < 0) OR (VAR366 < 0)
L12324:	MOV	000350(R5), -(SP)
L12330:	MOV	000346(R5), -(SP)
L12334:	CLR	-(SP)			; 0
L12336:	CALL	L75640			; $FLOAT
L12342:	CALL	L76446			; FLCOMP
L12346:	BLT	L12354
L12350:	CLR	R0
L12352:	BR	L12360
L12354:	MOV	#000001, R0
L12360:	MOV	000354(R5), -(SP)
L12364:	MOV	000352(R5), -(SP)
L12370:	CLR	-(SP)
L12372:	CALL	L75640			; $FLOAT
L12376:	CALL	L76446			; FLCOMP
L12402:	BLT	L12410
L12404:	CLR	R1
L12406:	BR	L12414
L12410:	MOV	#000001, R1
L12414:	BISB	R0, R1
L12416:	MOV	000360(R5), -(SP)
L12422:	MOV	000356(R5), -(SP)
L12426:	CLR	-(SP)
L12430:	CALL	L75640			; $FLOAT
L12434:	CALL	L76446			; FLCOMP
L12440:	BLT	L12446
L12442:	CLR	R0
L12444:	BR	L12452
L12446:	MOV	#000001, R0
L12452:	BISB	R1, R0
L12454:	MOV	000364(R5), -(SP)
L12460:	MOV	000362(R5), -(SP)
L12464:	CLR	-(SP)
L12466:	CALL	L75640			; $FLOAT
L12472:	CALL	L76446			; FLCOMP
L12476:	BLT	L12504
L12500:	CLR	R1
L12502:	BR	L12510
L12504:	MOV	#000001, R1
L12510:	BISB	R0, R1
L12512:	MOV	000370(R5), -(SP)
L12516:	MOV	000366(R5), -(SP)
L12522:	CLR	-(SP)
L12524:	CALL	L75640			; $FLOAT
L12530:	CALL	L76446			; FLCOMP
L12534:	BLT	L12542
L12536:	CLR	R0
L12540:	BR	L12546
L12542:	MOV	#000001, R0
L12546:	BISB	R1, R0
L12550:	BNE	L12556
L12552:	JMP	L12666
; THEN
L12556:	MOV	#000022, -(SP)		; 18.
L12562:	CLR	-(SP)			; 0
L12564:	CALL	L01020			; Установить позицию курсора
L12570:	CALL	L01014			; ESCJ
L12574:	MOV	#L45352, -(SP)		; "  wy prodaete towara bolx{e, ~em u was estx !"
L12600:	MOV	#000105, -(SP)
L12604:	CLR	-(SP)
L12606:	CALL	L75120			; WRSTG
L12612:	CALL	L73036			; RDNM
L12616:	MOV	(SP)+, 000102(R5)
L12622:	CALL	L72760			; RDLN
; IF VAR102 = 1
L12626:	CMP	000102(R5), #000001
L12634:	BEQ	L12642
L12636:	JMP	L12656
; GOTO LABEL 1
L12642:	MOV	L70056, SP		; $RESR6
L12646:	JMP	L03530
;
L12652:	JMP	L12666
; END IF
; GOTO LABEL 3
L12656:	MOV	L70056, SP		; $RESR6
L12662:	JMP	L14064
; END IF
; VAR346 := -(VAR242 - VAR266 * VAR54 - VAR276 * VAR56
;	- VAR302 * VAR60 - VAR306 * VAR62 - VAR312 * VAR64)
L12666:	MOV	000244(R5), -(SP)
L12672:	MOV	000242(R5), -(SP)
L12676:	MOV	000270(R5), -(SP)
L12702:	MOV	000266(R5), -(SP)
L12706:	MOV	000054(R5), -(SP)
L12712:	CALL	L75640			; $FLOAT
L12716:	FMUL	SP
L12720:	FSUB	SP
L12722:	MOV	000300(R5), -(SP)
L12726:	MOV	000276(R5), -(SP)
L12732:	MOV	000056(R5), -(SP)
L12736:	CALL	L75640			; $FLOAT
L12742:	FMUL	SP
L12744:	FSUB	SP
L12746:	MOV	000304(R5), -(SP)
L12752:	MOV	000302(R5), -(SP)
L12756:	MOV	000060(R5), -(SP)
L12762:	CALL	L75640			; $FLOAT
L12766:	FMUL	SP
L12770:	FSUB	SP
L12772:	MOV	000310(R5), -(SP)
L12776:	MOV	000306(R5), -(SP)
L13002:	MOV	000062(R5), -(SP)
L13006:	CALL	L75640			; $FLOAT
L13012:	FMUL	SP
L13014:	FSUB	SP
L13016:	MOV	000314(R5), -(SP)
L13022:	MOV	000312(R5), -(SP)
L13026:	MOV	000064(R5), -(SP)
L13032:	CALL	L75640			; $FLOAT
L13036:	FMUL	SP
L13040:	FSUB	SP
L13042:	ADD	#100000, (SP)		; изменение знака
L13046:	MOV	(SP)+, 000346(R5)
L13052:	MOV	(SP)+, 000350(R5)
; IF VAR346 > 0
L13056:	MOV	000350(R5), -(SP)
L13062:	MOV	000346(R5), -(SP)
L13066:	CLR	-(SP)			; 0
L13070:	CALL	L75640			; $FLOAT
L13074:	CALL	L76446			; FLCOMP
L13100:	BGT	L13106
L13102:	JMP	L13332
; THEN
L13106:	MOV	#000022, -(SP)		; 18.
L13112:	CLR	-(SP)			; 0
L13114:	CALL	L01020			; Установить позицию курсора
L13120:	CALL	L01014			; ESCJ
; L57660(VAR102,VAR104,VAR346)
L13124:	MOV	R5, R0
L13126:	ADD	#000102, R0
L13132:	MOV	R0, -(SP)
L13134:	MOV	R5, R0
L13136:	ADD	#000104, R0
L13142:	MOV	R0, -(SP)
L13144:	MOV	R5, R0
L13146:	ADD	#000346, R0
L13152:	MOV	R0, -(SP)
L13154:	CALL	L01030			; L57660
;
L13160:	MOV	#L45460, -(SP)		; "  sdelka rastorgnuta - nehwataet"
L13164:	MOV	#000040, -(SP)
L13170:	CLR	-(SP)
L13172:	CALL	L75120			; WRSTG
L13176:	MOV	000102(R5), -(SP)
L13202:	CLR	-(SP)
L13204:	CALL	L74562			; WRNM
L13210:	MOV	#L45522, -(SP)		; " tys."
L13214:	MOV	#000005, -(SP)
L13220:	CLR	-(SP)
L13222:	CALL	L75120			; WRSTG
L13226:	MOV	000104(R5), -(SP)
L13232:	CLR	-(SP)
L13234:	CALL	L74562			; WRNM
L13240:	MOV	#L45530, -(SP)		; " rub.\r\n==> powtoritx ? (0/1) "
L13244:	MOV	#000035, -(SP)
L13250:	CLR	-(SP)
L13252:	CALL	L75120			; WRSTG
L13256:	CALL	L73036			; RDNM
L13262:	MOV	(SP)+, 000102(R5)
L13266:	CALL	L72760			; RDLN
; IF VAR102 = 1
L13272:	CMP	000102(R5), #000001
L13300:	BEQ	L13306
L13302:	JMP	L13322
; GOTO LABEL 1
L13306:	MOV	L70056, SP		; $RESR6
L13312:	JMP	L03530
;
L13316:	JMP	L13332
; GOTO LABEL 3
L13322:	MOV	L70056, SP		; $RESR6
L13326:	JMP	L14064
; END IF
; VAR242 := VAR242 - VAR266 * VAR54 - VAR276 * VAR56
;	- VAR302 * VAR60 - VAR306 * VAR62 - VAR312 * VAR64
L13332:	MOV	000244(R5), -(SP)
L13336:	MOV	000242(R5), -(SP)
L13342:	MOV	000270(R5), -(SP)
L13346:	MOV	000266(R5), -(SP)
L13352:	MOV	000054(R5), -(SP)
L13356:	CALL	L75640			; $FLOAT
L13362:	FMUL	SP
L13364:	FSUB	SP
L13366:	MOV	000300(R5), -(SP)
L13372:	MOV	000276(R5), -(SP)
L13376:	MOV	000056(R5), -(SP)
L13402:	CALL	L75640			; $FLOAT
L13406:	FMUL	SP
L13410:	FSUB	SP
L13412:	MOV	000304(R5), -(SP)
L13416:	MOV	000302(R5), -(SP)
L13422:	MOV	000060(R5), -(SP)
L13426:	CALL	L75640			; $FLOAT
L13432:	FMUL	SP
L13434:	FSUB	SP
L13436:	MOV	000310(R5), -(SP)
L13442:	MOV	000306(R5), -(SP)
L13446:	MOV	000062(R5), -(SP)
L13452:	CALL	L75640			; $FLOAT
L13456:	FMUL	SP
L13460:	FSUB	SP
L13462:	MOV	000314(R5), -(SP)
L13466:	MOV	000312(R5), -(SP)
L13472:	MOV	000064(R5), -(SP)
L13476:	CALL	L75640			; $FLOAT
L13502:	FMUL	SP
L13504:	FSUB	SP
L13506:	MOV	(SP)+, 000242(R5)
L13512:	MOV	(SP)+, 000244(R5)
; VAR236 := VAR236 + VAR266
L13516:	MOV	000240(R5), -(SP)
L13522:	MOV	000236(R5), -(SP)
L13526:	MOV	000270(R5), -(SP)
L13532:	MOV	000266(R5), -(SP)
L13536:	FADD	SP
L13540:	MOV	(SP)+, 000236(R5)
L13544:	MOV	(SP)+, 000240(R5)
; VAR246 := VAR246 + VAR276
L13550:	MOV	000250(R5), -(SP)
L13554:	MOV	000246(R5), -(SP)
L13560:	MOV	000300(R5), -(SP)
L13564:	MOV	000276(R5), -(SP)
L13570:	FADD	SP
L13572:	MOV	(SP)+, 000246(R5)
L13576:	MOV	(SP)+, 000250(R5)
; VAR252 := VAR252 + VAR302
L13602:	MOV	000254(R5), -(SP)
L13606:	MOV	000252(R5), -(SP)
L13612:	MOV	000304(R5), -(SP)
L13616:	MOV	000302(R5), -(SP)
L13622:	FADD	SP
L13624:	MOV	(SP)+, 000252(R5)
L13630:	MOV	(SP)+, 000254(R5)
; VAR256 := VAR256 + VAR306
L13634:	MOV	000260(R5), -(SP)
L13640:	MOV	000256(R5), -(SP)
L13644:	MOV	000310(R5), -(SP)
L13650:	MOV	000306(R5), -(SP)
L13654:	FADD	SP
L13656:	MOV	(SP)+, 000256(R5)
L13662:	MOV	(SP)+, 000260(R5)
; VAR262 := VAR262 + VAR312
L13666:	MOV	000264(R5), -(SP)
L13672:	MOV	000262(R5), -(SP)
L13676:	MOV	000314(R5), -(SP)
L13702:	MOV	000312(R5), -(SP)
L13706:	FADD	SP
L13710:	MOV	(SP)+, 000262(R5)
L13714:	MOV	(SP)+, 000264(R5)
;
L13720:	MOV	R5, R0
L13722:	ADD	#000242, R0
L13726:	MOV	R0, -(SP)
L13730:	MOV	R5, R0
L13732:	ADD	#000236, R0
L13736:	MOV	R0, -(SP)
L13740:	MOV	R5, R0
L13742:	ADD	#000246, R0
L13746:	MOV	R0, -(SP)
L13750:	MOV	R5, R0
L13752:	ADD	#000252, R0
L13756:	MOV	R0, -(SP)
L13760:	MOV	R5, R0
L13762:	ADD	#000256, R0
L13766:	MOV	R0, -(SP)
L13770:	MOV	R5, R0
L13772:	ADD	#000262, R0
L13776:	MOV	R0, -(SP)
L14000:	MOV	000054(R5), -(SP)
L14004:	MOV	000056(R5), -(SP)
L14010:	MOV	000060(R5), -(SP)
L14014:	MOV	000062(R5), -(SP)
L14020:	MOV	000064(R5), -(SP)
L14024:	MOV	000066(R5), -(SP)
L14030:	MOV	000070(R5), -(SP)
L14034:	MOV	000072(R5), -(SP)
L14040:	MOV	000074(R5), -(SP)
L14044:	MOV	000076(R5), -(SP)
L14050:	MOV	000172(R5), -(SP)	; Год правления
L14054:	MOV	000174(R5), -(SP)	; Номер года правления
L14060:	CALL	L01040			; L62010
; LABEL 3
L14064:	MOV	#000022, -(SP)		; 18.
L14070:	CLR	-(SP)			; 0
L14072:	CALL	L01020			; Установить позицию курсора
L14076:	CALL	L01014			; ESCJ
L14102:	MOV	#L45566, -(SP)
L14106:	MOV	#000066, -(SP)
L14112:	CLR	-(SP)
L14114:	CALL	L75120			; WRSTG
L14120:	CALL	L73036			; RDNM
L14124:	MOV	(SP)+, 000102(R5)
L14130:	CALL	L72760			; RDLN
; IF VAR256 < VAR246
L14134:	MOV	000260(R5), -(SP)
L14140:	MOV	000256(R5), -(SP)
L14144:	MOV	000250(R5), -(SP)
L14150:	MOV	000246(R5), -(SP)
L14154:	CALL	L76446			; FLCOMP
L14160:	BLT	L14166
L14162:	JMP	L14212
; THEN VAR352 := VAR256
L14166:	MOV	000260(R5), -(SP)
L14172:	MOV	000256(R5), -(SP)
L14176:	MOV	(SP)+, 000352(R5)
L14202:	MOV	(SP)+, 000354(R5)
L14206:	JMP	L14232
; ELSE VAR352 := VAR246
L14212:	MOV	000250(R5), -(SP)
L14216:	MOV	000246(R5), -(SP)
L14222:	MOV	(SP)+, 000352(R5)
L14226:	MOV	(SP)+, 000354(R5)
; END IF
; VAR356 := VAR200 * VAR352
L14232:	MOV	000200(R5), -(SP)
L14236:	CALL	L75640			; $FLOAT
L14242:	MOV	000354(R5), -(SP)
L14246:	MOV	000352(R5), -(SP)
L14252:	FMUL	SP
L14254:	MOV	(SP)+, 000356(R5)
L14260:	MOV	(SP)+, 000360(R5)
; VAR362 := VAR202 * (VAR256 + VAR262)
L14264:	MOV	000202(R5), -(SP)
L14270:	CALL	L75640			; $FLOAT
L14274:	MOV	000260(R5), -(SP)
L14300:	MOV	000256(R5), -(SP)
L14304:	MOV	000264(R5), -(SP)
L14310:	MOV	000262(R5), -(SP)
L14314:	FADD	SP
L14316:	FMUL	SP
L14320:	MOV	(SP)+, 000362(R5)
L14324:	MOV	(SP)+, 000364(R5)
; VAR366 := VAR356 + VAR262
L14330:	MOV	000360(R5), -(SP)
L14334:	MOV	000356(R5), -(SP)
L14340:	MOV	000364(R5), -(SP)
L14344:	MOV	000362(R5), -(SP)
L14350:	FADD	SP
L14352:	MOV	(SP)+, 000366(R5)
L14356:	MOV	(SP)+, 000370(R5)
; VAR112 := L01044(VAR366)
L14362:	CLR	-(SP)
L14364:	MOV	000370(R5), -(SP)
L14370:	MOV	000366(R5), -(SP)
L14374:	CALL	L01044
L14400:	MOV	(SP)+, R0
L14402:	MOV	R0, 000112(R5)
;
L14406:	MOV	#000022, -(SP)		; 18.
L14412:	CLR	-(SP)			; 0
L14414:	CALL	L01020			; Установить позицию курсора
L14420:	CALL	L01014			; ESCJ
; IF VAR102 = 0
L14424:	TST	000102(R5)
L14430:	BEQ	L14436
L14432:	JMP	L15014
; THEN
; IF (VAR366 < VAR252) OR (VAR366 = VAR252)
L14436:	MOV	000370(R5), -(SP)
L14442:	MOV	000366(R5), -(SP)
L14446:	MOV	000254(R5), -(SP)
L14452:	MOV	000252(R5), -(SP)
L14456:	CALL	L76446			; FLCOMP
L14462:	BLT	L14470
L14464:	CLR	R0
L14466:	BR	L14474
L14470:	MOV	#000001, R0
L14474:	MOV	000370(R5), -(SP)
L14500:	MOV	000366(R5), -(SP)
L14504:	MOV	000254(R5), -(SP)
L14510:	MOV	000252(R5), -(SP)
L14514:	CALL	L76446			; FLCOMP
L14520:	BEQ	L14526
L14522:	CLR	R1
L14524:	BR	L14532
L14526:	MOV	#000001, R1
L14532:	BISB	R0, R1
L14534:	BNE	L14542
L14536:	JMP	L15014
; THEN
L14542:	MOV	#L45656, -(SP)		; "--->  wydelena norma :"
L14546:	MOV	#000026, -(SP)
L14552:	CLR	-(SP)
L14554:	CALL	L75120			; WRSTG
L14560:	MOV	000112(R5), -(SP)
L14564:	CLR	-(SP)
L14566:	CALL	L74562			; WRNM
L14572:	MOV	#L45706, -(SP)		; " t. zerna"
L14576:	MOV	#000011, -(SP)
L14602:	CLR	-(SP)
L14604:	CALL	L75120			; WRSTG
L14610:	CALL	L74452			; WRLN
; VAR252 := VAR252 - VAR366
L14614:	MOV	000254(R5), -(SP)
L14620:	MOV	000252(R5), -(SP)
L14624:	MOV	000370(R5), -(SP)
L14630:	MOV	000366(R5), -(SP)
L14634:	FSUB	SP
L14636:	MOV	(SP)+, 000252(R5)
L14642:	MOV	(SP)+, 000254(R5)
; VAR226 := VAR356
L14646:	MOV	000360(R5), -(SP)
L14652:	MOV	000356(R5), -(SP)
L14656:	MOV	(SP)+, 000226(R5)
L14662:	MOV	(SP)+, 000230(R5)
; VAR232 := VAR362
L14666:	MOV	000364(R5), -(SP)
L14672:	MOV	000362(R5), -(SP)
L14676:	MOV	(SP)+, 000232(R5)
L14702:	MOV	(SP)+, 000234(R5)
; VAR102 := L01044(VAR252)
L14706:	CLR	-(SP)
L14710:	MOV	000254(R5), -(SP)
L14714:	MOV	000252(R5), -(SP)
L14720:	CALL	L01044
L14724:	MOV	(SP)+, R0
L14726:	MOV	R0, 000102(R5)
;
L14732:	MOV	#L45720, -(SP)		; "  izli{ki zerna w ambarah :"
L14736:	MOV	#000033, -(SP)
L14742:	CLR	-(SP)
L14744:	CALL	L75120			; WRSTG
L14750:	MOV	000102(R5), -(SP)
L14754:	CLR	-(SP)
L14756:	CALL	L74562			; WRNM
L14762:	MOV	#L45754, -(SP)
L14766:	MOV	#000006, -(SP)
L14772:	CLR	-(SP)
L14774:	CALL	L75120			; WRSTG
L15000:	CALL	L74452			; WRLN
; GOTO LABEL 4
L15004:	MOV	L70056, SP		; $RESR6
L15010:	JMP	L15440
; END IF
L15014:	MOV	#000022, -(SP)		; 18.
L15020:	CLR	-(SP)			; 0
L15022:	CALL	L01020			; Установить позицию курсора
L15026:	CALL	L01014			; ESCJ
L15032:	MOV	#L45764, -(SP)		; "==> skolxko tonn zerna na edu, skolxko na posew ? "
L15036:	MOV	#000062, -(SP)
L15042:	CLR	-(SP)
L15044:	CALL	L75120			; WRSTG
L15050:	CALL	L73272			; RDRL
L15054:	MOV	(SP)+, 000232(R5)
L15060:	MOV	(SP)+, 000234(R5)
L15064:	CALL	L73272			; RDRL
L15070:	MOV	(SP)+, 000226(R5)
L15074:	MOV	(SP)+, 000230(R5)
L15100:	CALL	L72760			; RDLN
; VAR346 := VAR226 + VAR232
L15104:	MOV	000230(R5), -(SP)
L15110:	MOV	000226(R5), -(SP)
L15114:	MOV	000234(R5), -(SP)
L15120:	MOV	000232(R5), -(SP)
L15124:	FADD	SP
L15126:	MOV	(SP)+, 000346(R5)
L15132:	MOV	(SP)+, 000350(R5)
; IF VAR346 > VAR252
L15136:	MOV	000350(R5), -(SP)
L15142:	MOV	000346(R5), -(SP)
L15146:	MOV	000254(R5), -(SP)
L15152:	MOV	000252(R5), -(SP)
L15156:	CALL	L76446			; FLCOMP
L15162:	BGT	L15170
L15164:	JMP	L15310
; THEN
; VAR102 := L01044(VAR346 - VAR252)
L15170:	CLR	-(SP)
L15172:	MOV	000350(R5), -(SP)
L15176:	MOV	000346(R5), -(SP)
L15202:	MOV	000254(R5), -(SP)
L15206:	MOV	000252(R5), -(SP)
L15212:	FSUB	SP
L15214:	CALL	L01044
L15220:	MOV	(SP)+, R0
L15222:	MOV	R0, 000102(R5)
;
L15226:	MOV	#L46050, -(SP)		; "  razberitesx! nehwataet"
L15232:	MOV	#000030, -(SP)
L15236:	CLR	-(SP)
L15240:	CALL	L75120			; WRSTG
L15244:	MOV	000102(R5), -(SP)
L15250:	CLR	-(SP)
L15252:	CALL	L74562			; WRNM
L15256:	MOV	#L46102, -(SP)		; " tonn zerna."
L15262:	MOV	#000014, -(SP)
L15266:	CLR	-(SP)
L15270:	CALL	L75120			; WRSTG
L15274:	CALL	L74452			; WRLN
; GOTO LABEL 3
L15300:	MOV	L70056, SP		; $RESR6
L15304:	JMP	L14064
; END IF
; VAR252 := VAR252 - VAR346
L15310:	MOV	000254(R5), -(SP)
L15314:	MOV	000252(R5), -(SP)
L15320:	MOV	000350(R5), -(SP)
L15324:	MOV	000346(R5), -(SP)
L15330:	FSUB	SP
L15332:	MOV	(SP)+, 000252(R5)
L15336:	MOV	(SP)+, 000254(R5)
; VAR102 := L01044(VAR252)
L15342:	CLR	-(SP)
L15344:	MOV	000254(R5), -(SP)
L15350:	MOV	000252(R5), -(SP)
L15354:	CALL	L01044
L15360:	MOV	(SP)+, R0
L15362:	MOV	R0, 000102(R5)
;
L15366:	MOV	#L46120, -(SP)		; "  ostatok zerna w ambarah"
L15372:	MOV	#000031, -(SP)
L15376:	CLR	-(SP)
L15400:	CALL	L75120			; WRSTG
L15404:	MOV	000102(R5), -(SP)
L15410:	CLR	-(SP)
L15412:	CALL	L74562			; WRNM
L15416:	MOV	#L46152, -(SP)
L15422:	MOV	#000006, -(SP)
L15426:	CLR	-(SP)
L15430:	CALL	L75120			; WRSTG
L15434:	CALL	L74452			; WRLN
; LABEL 4
L15440:	CLR	000124(R5)
L15444:	CLR	000126(R5)
L15450:	CLR	000130(R5)
L15454:	CLR	000132(R5)
L15460:	CLR	000134(R5)
L15464:	CLR	000136(R5)
L15470:	CLR	000140(R5)
L15474:	CLR	000142(R5)
L15500:	CLR	000144(R5)
; VAR346 := VAR232 / VAR202 - VAR262 - VAR256
L15504:	MOV	000234(R5), -(SP)
L15510:	MOV	000232(R5), -(SP)
L15514:	MOV	000202(R5), -(SP)
L15520:	CALL	L75640			; $FLOAT
L15524:	FDIV	SP
L15526:	MOV	000264(R5), -(SP)
L15532:	MOV	000262(R5), -(SP)
L15536:	FSUB	SP
L15540:	MOV	000260(R5), -(SP)
L15544:	MOV	000256(R5), -(SP)
L15550:	FSUB	SP
L15552:	MOV	(SP)+, 000346(R5)
L15556:	MOV	(SP)+, 000350(R5)
; VAR322 := -(VAR346 / VAR256)
L15562:	MOV	000350(R5), -(SP)
L15566:	MOV	000346(R5), -(SP)
L15572:	MOV	000260(R5), -(SP)
L15576:	MOV	000256(R5), -(SP)
L15602:	FDIV	SP
L15604:	ADD	#100000, (SP)
L15610:	MOV	(SP)+, 000322(R5)
L15614:	MOV	(SP)+, 000324(R5)
; VAR316 := VAR316 + VAR322
L15620:	MOV	000320(R5), -(SP)
L15624:	MOV	000316(R5), -(SP)
L15630:	MOV	000324(R5), -(SP)
L15634:	MOV	000322(R5), -(SP)
L15640:	FADD	SP
L15642:	MOV	(SP)+, 000316(R5)
L15646:	MOV	(SP)+, 000320(R5)
; IF VAR316 > 0
L15652:	MOV	000320(R5), -(SP)
L15656:	MOV	000316(R5), -(SP)
L15662:	CLR	-(SP)
L15664:	CALL	L75640			; $FLOAT
L15670:	CALL	L76446			; FLCOMP
L15674:	BLT	L15702
L15676:	JMP	L15720
; THEN VAR316 := 0
L15702:	CLR	-(SP)
L15704:	CALL	L75640			; $FLOAT
L15710:	MOV	(SP)+, 000316(R5)
L15714:	MOV	(SP)+, 000320(R5)
; END IF
; IF VAR316 > 1
L15720:	MOV	000320(R5), -(SP)
L15724:	MOV	000316(R5), -(SP)
L15730:	MOV	#000001, -(SP)
L15734:	CALL	L75640			; $FLOAT
L15740:	CALL	L76446			; FLCOMP
L15744:	BGT	L15752
L15746:	JMP	L16026
; THEN
L15752:	CALL	L01024			; L57632
L15756:	MOV	#000012, -(SP)		; 10.
L15762:	CLR	-(SP)			; 0
L15764:	CALL	L01020			; Установить позицию курсора
L15770:	MOV	#L46162, -(SP)		; " n a r o d  w  o  s  s  t  a  l  ! ! !"
L15774:	MOV	#000046, -(SP)
L16000:	CLR	-(SP)
L16002:	CALL	L75120			; WRSTG
L16006:	CALL	L74452			; WRLN
L16012:	CALL	L01014			; ESCJ
; GOTO LABEL 8
L16016:	MOV	L70056, SP		; $RESR6
L16022:	JMP	L42230
; END IF
; VAR346 := VAR232 / VAR202
L16026:	MOV	000234(R5), -(SP)
L16032:	MOV	000232(R5), -(SP)
L16036:	MOV	000202(R5), -(SP)
L16042:	CALL	L75640			; $FLOAT
L16046:	FDIV	SP
L16050:	MOV	(SP)+, 000346(R5)
L16054:	MOV	(SP)+, 000350(R5)
; VAR352 := VAR346 - VAR262
L16060:	MOV	000350(R5), -(SP)
L16064:	MOV	000346(R5), -(SP)
L16070:	MOV	000264(R5), -(SP)
L16074:	MOV	000262(R5), -(SP)
L16100:	FSUB	SP
L16102:	MOV	(SP)+, 000352(R5)
L16106:	MOV	(SP)+, 000354(R5)
; IF VAR352 < 0
L16112:	MOV	000354(R5), -(SP)
L16116:	MOV	000352(R5), -(SP)
L16122:	CLR	-(SP)			; 0
L16124:	CALL	L75640			; $FLOAT
L16130:	CALL	L76446			; FLCOMP
L16134:	BLT	L16142
L16136:	JMP	L16216
; THEN
L16142:	CALL	L01024			; L57632
L16146:	MOV	#000012, -(SP)		; 10.
L16152:	CLR	-(SP)			; 0
L16154:	CALL	L01020			; Установить позицию курсора
L16160:	MOV	#L46232, -(SP)
L16164:	MOV	#000051, -(SP)
L16170:	CLR	-(SP)
L16172:	CALL	L75120			; WRSTG
L16176:	CALL	L74452			; WRLN
L16202:	CALL	L01014			; ESCJ
; GOTO LABEL 8
L16206:	MOV	L70056, SP		; $RESR6
L16212:	JMP	L42230
; VAR362 := VAR256
L16216:	MOV	000260(R5), -(SP)
L16222:	MOV	000256(R5), -(SP)
L16226:	MOV	(SP)+, 000362(R5)
L16232:	MOV	(SP)+, 000364(R5)
; IF VAR352 - VAR256 < 0
L16236:	MOV	000354(R5), -(SP)
L16242:	MOV	000352(R5), -(SP)
L16246:	MOV	000260(R5), -(SP)
L16252:	MOV	000256(R5), -(SP)
L16256:	FSUB	SP
L16260:	CLR	-(SP)			; 0
L16262:	CALL	L75640			; $FLOAT
L16266:	CALL	L76446			; FLCOMP
L16272:	BLT	L16300
L16274:	JMP	L16442
; THEN
; VAR256 := VAR352 + (VAR256 - VAR352) * L57170(0,VAR224) * 0.5
L16300:	MOV	000354(R5), -(SP)
L16304:	MOV	000352(R5), -(SP)
L16310:	MOV	000260(R5), -(SP)
L16314:	MOV	000256(R5), -(SP)
L16320:	MOV	000354(R5), -(SP)
L16324:	MOV	000352(R5), -(SP)
L16330:	FSUB	SP
L16332:	CMP	-(SP), -(SP)
L16334:	CLR	-(SP)			; 0
L16336:	MOV	R5, R0
L16340:	ADD	#000224, R0
L16344:	MOV	R0, -(SP)
L16346:	CALL	L01004			; L57170
L16352:	FMUL	SP
L16354:	CLR	-(SP)			; 0.5 float const
L16356:	MOV	#040000, -(SP)		;
L16362:	FMUL	SP
L16364:	FADD	SP
L16366:	MOV	(SP)+, 000256(R5)
L16372:	MOV	(SP)+, 000260(R5)
; VAR130 := L01044(VAR362 - VAR362)
L16376:	CLR	-(SP)
L16400:	MOV	000364(R5), -(SP)
L16404:	MOV	000362(R5), -(SP)
L16410:	MOV	000260(R5), -(SP)
L16414:	MOV	000256(R5), -(SP)
L16420:	FSUB	SP
L16422:	CALL	L01044
L16426:	MOV	(SP)+, R0
L16430:	MOV	R0, 000130(R5)
;
L16434:	ADD	000130(R5), 000212(R5)
; END IF
; VAR346 := VAR226 / VAR200
L16442:	MOV	000230(R5), -(SP)
L16446:	MOV	000226(R5), -(SP)
L16452:	MOV	000200(R5), -(SP)
L16456:	CALL	L75640			; $FLOAT
L16462:	FDIV	SP
L16464:	MOV	(SP)+, 000346(R5)
L16470:	MOV	(SP)+, 000350(R5)
; IF VAR346 > VAR246
L16474:	MOV	000350(R5), -(SP)
L16500:	MOV	000346(R5), -(SP)
L16504:	MOV	000250(R5), -(SP)
L16510:	MOV	000246(R5), -(SP)
L16514:	CALL	L76446			; FLCOMP
L16520:	BGT	L16526
L16522:	JMP	L16546
; THEN
L16526:	MOV	000250(R5), -(SP)
L16532:	MOV	000246(R5), -(SP)
L16536:	MOV	(SP)+, 000346(R5)
L16542:	MOV	(SP)+, 000350(R5)
; END IF
; IF VAR346 > VAR256
L16546:	MOV	000350(R5), -(SP)
L16552:	MOV	000346(R5), -(SP)
L16556:	MOV	000260(R5), -(SP)
L16562:	MOV	000256(R5), -(SP)
L16566:	CALL	L76446			; FLCOMP
L16572:	BGT	L16600
L16574:	JMP	L16624
; THEN VAR346 := VAR256
L16600:	MOV	000260(R5), -(SP)
L16604:	MOV	000256(R5), -(SP)
L16610:	MOV	(SP)+, 000346(R5)
L16614:	MOV	(SP)+, 000350(R5)
L16620:	JMP	L16736
; ELSE
; VAR124 := L01044((VAR256 - VAR346) * L57170(0,VAR224))
L16624:	CLR	-(SP)
L16626:	MOV	000260(R5), -(SP)
L16632:	MOV	000256(R5), -(SP)
L16636:	MOV	000350(R5), -(SP)
L16642:	MOV	000346(R5), -(SP)
L16646:	FSUB	SP
L16650:	CMP	-(SP), -(SP)
L16652:	CLR	-(SP)			; 0
L16654:	MOV	R5, R0
L16656:	ADD	#000224, R0
L16662:	MOV	R0, -(SP)
L16664:	CALL	L01004			; L57170
L16670:	FMUL	SP
L16672:	CALL	L01044
L16676:	MOV	(SP)+, R0
L16700:	MOV	R0, 000124(R5)
; VAR256 := VAR256 - VAR124
L16704:	MOV	000260(R5), -(SP)
L16710:	MOV	000256(R5), -(SP)
L16714:	MOV	000124(R5), -(SP)
L16720:	CALL	L75640			; $FLOAT
L16724:	FSUB	SP
L16726:	MOV	(SP)+, 000256(R5)
L16732:	MOV	(SP)+, 000260(R5)
; END IF
; VAR252 := VAR252 + VAR204 * VAR346 * (L01004(0,VAR224) + 0.5)
L16736:	MOV	000254(R5), -(SP)
L16742:	MOV	000252(R5), -(SP)
L16746:	MOV	000204(R5), -(SP)
L16752:	CALL	L75640			; $FLOAT
L16756:	MOV	000350(R5), -(SP)
L16762:	MOV	000346(R5), -(SP)
L16766:	FMUL	SP
L16770:	CMP	-(SP), -(SP)
L16772:	CLR	-(SP)			; 0
L16774:	MOV	R5, R0
L16776:	ADD	#000224, R0
L17002:	MOV	R0, -(SP)
L17004:	CALL	L01004			; L57170
L17010:	CLR	-(SP)			; 0.5 float const
L17012:	MOV	#040000, -(SP)		;
L17016:	FADD	SP
L17020:	FMUL	SP
L17022:	FADD	SP
L17024:	MOV	(SP)+, 000252(R5)
L17030:	MOV	(SP)+, 000254(R5)
; VAR152 := L01044(VAR256 / 10 * VAR206 * (L57170(0,VAR224) + 0.5))
L17034:	CLR	-(SP)
L17036:	MOV	000260(R5), -(SP)
L17042:	MOV	000256(R5), -(SP)
L17046:	MOV	#000012, -(SP)		; 10.
L17052:	CALL	L75640			; $FLOAT
L17056:	FDIV	SP
L17060:	MOV	000206(R5), -(SP)
L17064:	CALL	L75640			; $FLOAT
L17070:	FMUL	SP
L17072:	CMP	-(SP), -(SP)
L17074:	CLR	-(SP)			; 0
L17076:	MOV	R5, R0
L17100:	ADD	#000224, R0
L17104:	MOV	R0, -(SP)
L17106:	CALL	L01004			; L57170
L17112:	CLR	-(SP)			; 0.5 float const
L17114:	MOV	#040000, -(SP)		;
L17120:	FADD	SP
L17122:	FMUL	SP
L17124:	CALL	L01044
L17130:	MOV	(SP)+, R0
L17132:	MOV	R0, 000152(R5)
; VAR256 := VAR256 + VAR152
L17136:	MOV	000260(R5), -(SP)
L17142:	MOV	000256(R5), -(SP)
L17146:	MOV	000152(R5), -(SP)
L17152:	CALL	L75640			; $FLOAT
L17156:	FADD	SP
L17160:	MOV	(SP)+, 000256(R5)
L17164:	MOV	(SP)+, 000260(R5)
; VAR346 := L57170(0,VAR224)
L17170:	CMP	-(SP), -(SP)
L17172:	CLR	-(SP)			; 0
L17174:	MOV	R5, R0
L17176:	ADD	#000224, R0
L17202:	MOV	R0, -(SP)
L17204:	CALL	L01004			; L57170
L17210:	MOV	(SP)+, 000346(R5)
L17214:	MOV	(SP)+, 000350(R5)
; IF VAR346 > 0.8
L17220:	MOV	000350(R5), -(SP)
L17224:	MOV	000346(R5), -(SP)
L17230:	MOV	#146315, -(SP)		; 0.8 float const
L17234:	MOV	#040114, -(SP)		;
L17240:	CALL	L76446			; FLCOMP
L17244:	BGT	L17252
L17246:	JMP	L17332
; THEN
; VAR132 := L01044(VAR252 * L57170(0,VAR224) * 0.3)
L17252:	CLR	-(SP)
L17254:	MOV	000254(R5), -(SP)
L17260:	MOV	000252(R5), -(SP)
L17264:	CMP	-(SP), -(SP)
L17266:	CLR	-(SP)			; 0
L17270:	MOV	R5, R0
L17272:	ADD	#000224, R0
L17276:	MOV	R0, -(SP)
L17300:	CALL	L01004			; L57170
L17304:	FMUL	SP
L17306:	MOV	#114632, -(SP)		; 0.3 float const
L17312:	MOV	#037631, -(SP)		;
L17316:	FMUL	SP
L17320:	CALL	L01044
L17324:	MOV	(SP)+, R0
L17326:	MOV	R0, 000132(R5)
; END IF
; VAR346 := L01004(0,VAR224)
L17332:	CMP	-(SP), -(SP)
L17334:	CLR	-(SP)			; 0
L17336:	MOV	R5, R0
L17340:	ADD	#000224, R0
L17344:	MOV	R0, -(SP)
L17346:	CALL	L01004			; L57170
L17352:	MOV	(SP)+, 000346(R5)
L17356:	MOV	(SP)+, 000350(R5)
; IF VAR346 > 0.8
L17362:	MOV	000350(R5), -(SP)
L17366:	MOV	000346(R5), -(SP)
L17372:	MOV	#146315, -(SP)		; 0.8 float const
L17376:	MOV	#040114, -(SP)		;
L17402:	CALL	L76446			; FLCOMP
L17406:	BGT	L17414
L17410:	JMP	L17474
; THEN
; VAR134 := L01044(VAR252 * L57170(0,VAR224) * 0.3)
L17414:	CLR	-(SP)
L17416:	MOV	000254(R5), -(SP)
L17422:	MOV	000252(R5), -(SP)
L17426:	CMP	-(SP), -(SP)
L17430:	CLR	-(SP)			; 0
L17432:	MOV	R5, R0
L17434:	ADD	#000224, R0
L17440:	MOV	R0, -(SP)
L17442:	CALL	L01004			; L57170
L17446:	FMUL	SP
L17450:	MOV	#114632, -(SP)		; 0.3 float const
L17454:	MOV	#037631, -(SP)		;
L17460:	FMUL	SP
L17462:	CALL	L01044
L17466:	MOV	(SP)+, R0
L17470:	MOV	R0, 000134(R5)
; END IF
; VAR346 := L57170(0,VAR224)
L17474:	CMP	-(SP), -(SP)
L17476:	CLR	-(SP)			; 0
L17500:	MOV	R5, R0
L17502:	ADD	#000224, R0
L17506:	MOV	R0, -(SP)
L17510:	CALL	L01004			; L57170
L17514:	MOV	(SP)+, 000346(R5)
L17520:	MOV	(SP)+, 000350(R5)
; IF VAR346 > 0.8
L17524:	MOV	000350(R5), -(SP)
L17530:	MOV	000346(R5), -(SP)
L17534:	MOV	#146315, -(SP)		; 0.8 float const
L17540:	MOV	#040114, -(SP)		;
L17544:	CALL	L76446			; FLCOMP
L17550:	BGT	L17556
L17552:	JMP	L17636
; THEN
; VAR136 := L01044(VAR252 * L57170(0,VAR224) * 0.3)
L17556:	CLR	-(SP)
L17560:	MOV	000254(R5), -(SP)
L17564:	MOV	000252(R5), -(SP)
L17570:	CMP	-(SP), -(SP)
L17572:	CLR	-(SP)			; 0
L17574:	MOV	R5, R0
L17576:	ADD	#000224, R0
L17602:	MOV	R0, -(SP)
L17604:	CALL	L01004			; L57170
L17610:	FMUL	SP
L17612:	MOV	#114632, -(SP)		; 0.3 float const
L17616:	MOV	#037631, -(SP)		;
L17622:	FMUL	SP
L17624:	CALL	L01044
L17630:	MOV	(SP)+, R0
L17632:	MOV	R0, 000136(R5)
; END IF
; VAR252 := VAR252 - VAR132 - VAR134 - VAR136
L17636:	MOV	000254(R5), -(SP)
L17642:	MOV	000252(R5), -(SP)
L17646:	MOV	000132(R5), -(SP)
L17652:	CALL	L75640			; $FLOAT
L17656:	FSUB	SP
L17660:	MOV	000134(R5), -(SP)
L17664:	CALL	L75640			; $FLOAT
L17670:	FSUB	SP
L17672:	MOV	000136(R5), -(SP)
L17676:	CALL	L75640			; $FLOAT
L17702:	FSUB	SP
L17704:	MOV	(SP)+, 000252(R5)
L17710:	MOV	(SP)+, 000254(R5)
; IF VAR252 < 0
L17714:	MOV	000254(R5), -(SP)
L17720:	MOV	000252(R5), -(SP)
L17724:	CLR	-(SP)
L17726:	CALL	L75640			; $FLOAT
L17732:	CALL	L76446			; FLCOMP
L17736:	BLT	L17744
L17740:	JMP	L17762
; THEN
L17744:	CLR	-(SP)
L17746:	CALL	L75640			; $FLOAT
L17752:	MOV	(SP)+, 000252(R5)
L17756:	MOV	(SP)+, 000254(R5)
; END IF
; VAR242 := VAR242 - VAR262 * VAR210
L17762:	MOV	000244(R5), -(SP)
L17766:	MOV	000242(R5), -(SP)
L17772:	MOV	000264(R5), -(SP)
L17776:	MOV	000262(R5), -(SP)
L20002:	MOV	000210(R5), -(SP)
L20006:	CALL	L75640			; $FLOAT
L20012:	FMUL	SP
L20014:	FSUB	SP
L20016:	MOV	(SP)+, 000242(R5)
L20022:	MOV	(SP)+, 000244(R5)
; IF VAR242 < 0
L20026:	MOV	000244(R5), -(SP)
L20032:	MOV	000242(R5), -(SP)
L20036:	CLR	-(SP)
L20040:	CALL	L75640			; $FLOAT
L20044:	CALL	L76446			; FLCOMP
L20050:	BLT	L20056
L20052:	JMP	L20074
; THEN VAR242 := 0
L20056:	CLR	-(SP)
L20060:	CALL	L75640			; $FLOAT
L20064:	MOV	(SP)+, 000242(R5)
L20070:	MOV	(SP)+, 000244(R5)
; IF VAR242 = 0
L20074:	MOV	000244(R5), -(SP)
L20100:	MOV	000242(R5), -(SP)
L20104:	CLR	-(SP)			; 0
L20106:	CALL	L75640			; $FLOAT
L20112:	CALL	L76446			; FLCOMP
L20116:	BEQ	L20124
L20120:	JMP	L20202
; THEN
; VAR126 := L01044(VAR262 * L57170(0,VAR224) * 0.5)
L20124:	CLR	-(SP)
L20126:	MOV	000264(R5), -(SP)
L20132:	MOV	000262(R5), -(SP)
L20136:	CMP	-(SP), -(SP)
L20140:	CLR	-(SP)
L20142:	MOV	R5, R0
L20144:	ADD	#000224, R0
L20150:	MOV	R0, -(SP)
L20152:	CALL	L01004			; L57170
L20156:	FMUL	SP
L20160:	CLR	-(SP)			; 0.5 float const
L20162:	MOV	#040000, -(SP)		;
L20166:	FMUL	SP
L20170:	CALL	L01044
L20174:	MOV	(SP)+, R0
L20176:	MOV	R0, 000126(R5)
; END IF
; VAR262 := VAR262 - VAR126
L20202:	MOV	000264(R5), -(SP)
L20206:	MOV	000262(R5), -(SP)
L20212:	MOV	000126(R5), -(SP)
L20216:	CALL	L75640			; $FLOAT
L20222:	FSUB	SP
L20224:	MOV	(SP)+, 000262(R5)
L20230:	MOV	(SP)+, 000264(R5)
; VAR346 := L57170(0,VAR224)
L20234:	CMP	-(SP), -(SP)
L20236:	CLR	-(SP)
L20240:	MOV	R5, R0
L20242:	ADD	#000224, R0
L20246:	MOV	R0, -(SP)
L20250:	CALL	L01004			; L57170
L20254:	MOV	(SP)+, 000346(R5)
L20260:	MOV	(SP)+, 000350(R5)
; IF VAR346 < 0.2
L20264:	MOV	000350(R5), -(SP)
L20270:	MOV	000346(R5), -(SP)
L20274:	MOV	#146315, -(SP)		; 0.2 float const
L20300:	MOV	#037514, -(SP)		;
L20304:	CALL	L76446			; FLCOMP
L20310:	BLT	L20316
L20312:	JMP	L20426
; THEN
; VAR140 := L01044(VAR236 * L57170(0,VAR224) * 0.5)
L20316:	CLR	-(SP)
L20320:	MOV	000240(R5), -(SP)
L20324:	MOV	000236(R5), -(SP)
L20330:	CMP	-(SP), -(SP)
L20332:	CLR	-(SP)
L20334:	MOV	R5, R0
L20336:	ADD	#000224, R0
L20342:	MOV	R0, -(SP)
L20344:	CALL	L01004			; L57170
L20350:	FMUL	SP
L20352:	CLR	-(SP)			; 0.5 float const
L20354:	MOV	#040000, -(SP)		;
L20360:	FMUL	SP
L20362:	CALL	L01044
L20366:	MOV	(SP)+, R0
L20370:	MOV	R0, 000140(R5)
; VAR236 := VAR236 - VAR140
L20374:	MOV	000240(R5), -(SP)
L20400:	MOV	000236(R5), -(SP)
L20404:	MOV	000140(R5), -(SP)
L20410:	CALL	L75640			; $FLOAT
L20414:	FSUB	SP
L20416:	MOV	(SP)+, 000236(R5)
L20422:	MOV	(SP)+, 000240(R5)
; END IF
; VAR346 := L57170(0,VAR224)
L20426:	CMP	-(SP), -(SP)
L20430:	CLR	-(SP)
L20432:	MOV	R5, R0
L20434:	ADD	#000224, R0
L20440:	MOV	R0, -(SP)
L20442:	CALL	L01004			; L57170
L20446:	MOV	(SP)+, 000346(R5)
L20452:	MOV	(SP)+, 000350(R5)
; IF (VAR346 < 0.2) AND (VAR342 <> 0)
L20456:	MOV	000350(R5), -(SP)
L20462:	MOV	000346(R5), -(SP)
L20466:	MOV	#146315, -(SP)		; 0.2 float const
L20472:	MOV	#037514, -(SP)		;
L20476:	CALL	L76446			; FLCOMP
L20502:	BLT	L20510
L20504:	CLR	R0
L20506:	BR	L20514
L20510:	MOV	#000001, R0
L20514:	MOV	000344(R5), -(SP)
L20520:	MOV	000342(R5), -(SP)
L20524:	CLR	-(SP)			; 0
L20526:	CALL	L75640			; $FLOAT
L20532:	CALL	L76446			; FLCOMP
L20536:	BNE	L20544
L20540:	CLR	R1
L20542:	BR	L20550
L20544:	MOV	#000001, R1
L20550:	COMB	R1
L20552:	BICB	R1, R0
L20554:	BNE	L20562
L20556:	JMP	L20672
; THEN
; VAR342 := L01044(VAR342 * L57170(0,VAR224) * 0.5)
L20562:	CLR	-(SP)
L20564:	MOV	000344(R5), -(SP)
L20570:	MOV	000342(R5), -(SP)
L20574:	CMP	-(SP), -(SP)
L20576:	CLR	-(SP)
L20600:	MOV	R5, R0
L20602:	ADD	#000224, R0
L20606:	MOV	R0, -(SP)
L20610:	CALL	L01004			; L57170
L20614:	FMUL	SP
L20616:	CLR	-(SP)			; 0.5 float const
L20620:	MOV	#040000, -(SP)
L20624:	FMUL	SP
L20626:	CALL	L01044
L20632:	MOV	(SP)+, R0
L20634:	MOV	R0, 000142(R5)
; VAR342 := VAR342 - VAR142
L20640:	MOV	000344(R5), -(SP)
L20644:	MOV	000342(R5), -(SP)
L20650:	MOV	000142(R5), -(SP)
L20654:	CALL	L75640			; $FLOAT
L20660:	FSUB	SP
L20662:	MOV	(SP)+, 000342(R5)
L20666:	MOV	(SP)+, 000344(R5)
; END IF
; VAR346 := L57170(0,VAR224)
L20672:	CMP	-(SP), -(SP)
L20674:	CLR	-(SP)
L20676:	MOV	R5, R0
L20700:	ADD	#000224, R0
L20704:	MOV	R0, -(SP)
L20706:	CALL	L01004			; L57170
L20712:	MOV	(SP)+, 000346(R5)
L20716:	MOV	(SP)+, 000350(R5)
; IF (VAR346 < 0.2) AND (VAR326 <> 0)
L20722:	MOV	000350(R5), -(SP)
L20726:	MOV	000346(R5), -(SP)
L20732:	MOV	#146315, -(SP)		; 0.2 float const
L20736:	MOV	#037514, -(SP)		;
L20742:	CALL	L76446			; FLCOMP
L20746:	BLT	L20754
L20750:	CLR	R0
L20752:	BR	L20760
L20754:	MOV	#000001, R0
L20760:	MOV	000330(R5), -(SP)
L20764:	MOV	000326(R5), -(SP)
L20770:	CLR	-(SP)			;
L20772:	CALL	L75640			; $FLOAT
L20776:	CALL	L76446			; FLCOMP
L21002:	BNE	L21010
L21004:	CLR	R1
L21006:	BR	L21014
L21010:	MOV	#000001, R1
L21014:	COMB	R1
L21016:	BICB	R1, R0
L21020:	BNE	L21026
L21022:	JMP	L21136
; THEN
; VAR144 := L01044(VAR326 * L57170(0,VAR224) * 0.5)
L21026:	CLR	-(SP)
L21030:	MOV	000330(R5), -(SP)
L21034:	MOV	000326(R5), -(SP)
L21040:	CMP	-(SP), -(SP)
L21042:	CLR	-(SP)
L21044:	MOV	R5, R0
L21046:	ADD	#000224, R0
L21052:	MOV	R0, -(SP)
L21054:	CALL	L01004			; L57170
L21060:	FMUL	SP
L21062:	CLR	-(SP)			; 0.5 float const
L21064:	MOV	#040000, -(SP)
L21070:	FMUL	SP
L21072:	CALL	L01044
L21076:	MOV	(SP)+, R0
L21100:	MOV	R0, 000144(R5)
; VAR326 := VAR326 - VAR144
L21104:	MOV	000330(R5), -(SP)
L21110:	MOV	000326(R5), -(SP)
L21114:	MOV	000144(R5), -(SP)
L21120:	CALL	L75640			; $FLOAT
L21124:	FSUB	SP
L21126:	MOV	(SP)+, 000326(R5)
L21132:	MOV	(SP)+, 000330(R5)
; END IF
L21136:	MOV	#L46304, -(SP)		; "==> wa{e wyso~estwo! pribyl wizirx, wpustitx ? (0/1) "
L21142:	MOV	#000065, -(SP)
L21146:	CLR	-(SP)
L21150:	CALL	L75120			; WRSTG
L21154:	CALL	L73036			; RDNM
L21160:	MOV	(SP)+, 000102(R5)
L21164:	CALL	L72760			; RDLN
; IF VAR102 = 0
L21170:	TST	000102(R5)
L21174:	BEQ	L21202
L21176:	JMP	L21212
; THEN
; GOTO LABEL 5
L21202:	MOV	L70056, SP		; $RESR6
L21206:	JMP	L24036
; END IF
L21212:	CALL	L01024			; L57632
L21216:	MOV	#000002, -(SP)		; 2
L21222:	CLR	-(SP)			; 0
L21224:	CALL	L01020			; Установить позицию курсора
; VAR346 := VAR262 * VAR210
L21230:	MOV	000264(R5), -(SP)
L21234:	MOV	000262(R5), -(SP)
L21240:	MOV	000210(R5), -(SP)
L21244:	CALL	L75640			; $FLOAT
L21250:	FMUL	SP
L21252:	MOV	(SP)+, 000346(R5)
L21256:	MOV	(SP)+, 000350(R5)
; IF VAR346 <> 0
L21262:	MOV	000350(R5), -(SP)
L21266:	MOV	000346(R5), -(SP)
L21272:	CLR	-(SP)
L21274:	CALL	L75640			; $FLOAT
L21300:	CALL	L76446			; FLCOMP
L21304:	BNE	L21312
L21306:	JMP	L21450
; THEN
L21312:	MOV	R5, R0
L21314:	ADD	#000102, R0
L21320:	MOV	R0, -(SP)
L21322:	MOV	R5, R0
L21324:	ADD	#000104, R0
L21330:	MOV	R0, -(SP)
L21332:	MOV	R5, R0
L21334:	ADD	#000346, R0
L21340:	MOV	R0, -(SP)
L21342:	CALL	L01030			; L57660
L21346:	MOV	#L46372, -(SP)		; "\r\n   valowanie soldat :"
L21352:	MOV	#000027, -(SP)
L21356:	CLR	-(SP)
L21360:	CALL	L75120			; WRSTG
L21364:	MOV	000102(R5), -(SP)
L21370:	CLR	-(SP)
L21372:	CALL	L74562			; WRNM
L21376:	MOV	#L46422, -(SP)
L21402:	MOV	#000005, -(SP)
L21406:	CLR	-(SP)
L21410:	CALL	L75120			; WRSTG
L21414:	MOV	000104(R5), -(SP)
L21420:	CLR	-(SP)
L21422:	CALL	L74562			; WRNM
L21426:	MOV	#L46430, -(SP)		; " rublej\r\n  ---------------------------------------------------------------"
L21432:	MOV	#000112, -(SP)
L21436:	CLR	-(SP)
L21440:	CALL	L75120			; WRSTG
L21444:	CALL	L74452			; WRLN
; END IF
; VAR346 := L57170(0,VAR224)
L21450:	CMP	-(SP), -(SP)
L21452:	CLR	-(SP)
L21454:	MOV	R5, R0
L21456:	ADD	#000224, R0
L21462:	MOV	R0, -(SP)
L21464:	CALL	L01004			; L57170
L21470:	MOV	(SP)+, 000346(R5)
L21474:	MOV	(SP)+, 000350(R5)
; IF VAR346 > 0.5
L21500:	MOV	000350(R5), -(SP)
L21504:	MOV	000346(R5), -(SP)
L21510:	CLR	-(SP)			; 0.5 float const
L21512:	MOV	#040000, -(SP)
L21516:	CALL	L76446			; FLCOMP
L21522:	BGT	L21530
L21524:	JMP	L22276
; THEN
L21530:	MOV	#L46544, -(SP)		; "  t a j n a q  k a n c e l q r i q  soob}aet :"
L21534:	MOV	#000056, -(SP)
L21540:	CLR	-(SP)
L21542:	CALL	L75120			; WRSTG
L21546:	CALL	L74452			; WRLN
; VAR102 := ROUND(VAR316 * 100)
L21552:	MOV	000320(R5), -(SP)
L21556:	MOV	000316(R5), -(SP)
L21562:	MOV	#000144, -(SP)		; 100.
L21566:	CALL	L75640			; $FLOAT
L21572:	FMUL	SP
L21574:	CALL	L75746			; ROUND
L21600:	MOV	(SP)+, 000102(R5)
; IF VAR102 > 1
L21604:	CMP	000102(R5), #000001
L21612:	BGT	L21620
L21614:	JMP	L21672
; THEN
L21620:	MOV	#L46624, -(SP)		; "  w narode"
L21624:	MOV	#000012, -(SP)
L21630:	CLR	-(SP)
L21632:	CALL	L75120			; WRSTG
L21636:	MOV	000102(R5), -(SP)
L21642:	CLR	-(SP)
L21644:	CALL	L74562			; WRNM
L21650:	MOV	#L46640, -(SP)		; " procentow zagowor}ikow !!"
L21654:	MOV	#000032, -(SP)
L21660:	CLR	-(SP)
L21662:	CALL	L75120			; WRSTG
L21666:	CALL	L74452			; WRLN
; END IF
; IF VAR316 > 0.8
L21672:	MOV	000320(R5), -(SP)
L21676:	MOV	000316(R5), -(SP)
L21702:	MOV	#146315, -(SP)		; 0.8 float const
L21706:	MOV	#040114, -(SP)		;
L21712:	CALL	L76446			; FLCOMP
L21716:	BGT	L21724
L21720:	JMP	L21746
; THEN
L21724:	MOV	#L46674, -(SP)		; "  polovenie  o ~ e n x  opasnoe, wozmoven pereworot."
L21730:	MOV	#000064, -(SP)
L21734:	CLR	-(SP)
L21736:	CALL	L75120			; WRSTG
L21742:	CALL	L74452			; WRLN
; END IF
; IF (VAR316 > 0.5) AND (VAR316 < 0.8)
L21746:	MOV	000320(R5), -(SP)
L21752:	MOV	000316(R5), -(SP)
L21756:	CLR	-(SP)			; 0.5 float const
L21760:	MOV	#040000, -(SP)
L21764:	CALL	L76446			; FLCOMP
L21770:	BGT	L21776
L21772:	CLR	R0
L21774:	BR	L22002
L21776:	MOV	#000001, R0
L22002:	MOV	000320(R5), -(SP)
L22006:	MOV	000316(R5), -(SP)
L22012:	MOV	#146315, -(SP)		; 0.8 float const
L22016:	MOV	#040114, -(SP)
L22022:	CALL	L76446			; FLCOMP
L22026:	BLT	L22034
L22030:	CLR	R1
L22032:	BR	L22040
L22034:	MOV	#000001, R1
L22040:	COMB	R1
L22042:	BICB	R1, R0
L22044:	BNE	L22052
L22046:	JMP	L22074
; THEN
L22052:	MOV	#L46762, -(SP)		; "  polovenie opasnoe, sdelajte }edru` poda~ku."
L22056:	MOV	#000055, -(SP)
L22062:	CLR	-(SP)
L22064:	CALL	L75120			; WRSTG
L22070:	CALL	L74452			; WRLN
; END IF
; IF (VAR316 > 0.2) AND (VAR316 < 0.5)
L22074:	MOV	000320(R5), -(SP)
L22100:	MOV	000316(R5), -(SP)
L22104:	MOV	#146315, -(SP)		; 0.2 float const
L22110:	MOV	#037514, -(SP)		;
L22114:	CALL	L76446			; FLCOMP
L22120:	BGT	L22126
L22122:	CLR	R0
L22124:	BR	L22132
L22126:	MOV	#000001, R0
L22132:	MOV	000320(R5), -(SP)
L22136:	MOV	000316(R5), -(SP)
L22142:	CLR	-(SP)			; 0.5 float const
L22144:	MOV	#040000, -(SP)
L22150:	CALL	L76446			; FLCOMP
L22154:	BLT	L22162
L22156:	CLR	R1
L22160:	BR	L22166
L22162:	MOV	#000001, R1
L22166:	COMB	R1
L22170:	BICB	R1, R0
L22172:	BNE	L22200
L22174:	JMP	L22222
; THEN
L22200:	MOV	#L47040, -(SP)		; "  w narode golod, rastet nedowolxstwo."
L22204:	MOV	#000046, -(SP)
L22210:	CLR	-(SP)
L22212:	CALL	L75120			; WRSTG
L22216:	CALL	L74452			; WRLN
; END IF
; IF VAR316 < 0.2
L22222:	MOV	000320(R5), -(SP)
L22226:	MOV	000316(R5), -(SP)
L22232:	MOV	#146315, -(SP)		; 0.2 float const
L22236:	MOV	#037514, -(SP)		;
L22242:	CALL	L76446			; FLCOMP
L22246:	BLT	L22254
L22250:	JMP	L22276
; THEN
L22254:	MOV	#L47110, -(SP)		; "  narod dowolen, wysok awtoritet wa{ego weli~estwa."
L22260:	MOV	#000063, -(SP)
L22264:	CLR	-(SP)
L22266:	CALL	L75120			; WRSTG
L22272:	CALL	L74452			; WRLN
; END IF
; IF VAR132 <> 0
L22276:	TST	000132(R5)
L22302:	BNE	L22310
L22304:	JMP	L22362
; THEN
L22310:	MOV	#L47174, -(SP)		; "  -  krysy sovrali"
L22314:	MOV	#000022, -(SP)
L22320:	CLR	-(SP)
L22322:	CALL	L75120			; WRSTG
L22326:	MOV	000132(R5), -(SP)
L22332:	CLR	-(SP)
L22334:	CALL	L74562			; WRNM
L22340:	MOV	#L47220, -(SP)		; " tonn zerna."
L22344:	MOV	#000014, -(SP)
L22350:	CLR	-(SP)
L22352:	CALL	L75120			; WRSTG
L22356:	CALL	L74452			; WRLN
; END IF
; IF VAR134 <> 0
L22362:	TST	000134(R5)
L22366:	BNE	L22374
L22370:	JMP	L22416
; THEN
L22374:	MOV	#L47236, -(SP)		; "  -  stra{naq  z a s u h a  porazila posewy."
L22400:	MOV	#000054, -(SP)
L22404:	CLR	-(SP)
L22406:	CALL	L75120			; WRSTG
L22412:	CALL	L74452			; WRLN
; END IF
; IF VAR136 <> 0
L22416:	TST	000136(R5)
L22422:	BNE	L22430
L22424:	JMP	L22452
; THEN
L22430:	MOV	#L47314, -(SP)		; "  -  gigantskie  p o v a r y  pogubili urovaj."
L22434:	MOV	#000056, -(SP)
L22440:	CLR	-(SP)
L22442:	CALL	L75120			; WRSTG
L22446:	CALL	L74452			; WRLN
; END IF
; IF VAR132 + VAR134 + VAR136 = 0
L22452:	MOV	000132(R5), R0
L22456:	ADD	000134(R5), R0
L22462:	ADD	000136(R5), R0
L22466:	BEQ	L22474
L22470:	JMP	L22516
; THEN
L22474:	MOV	#L47374, -(SP)		; " -  u r o v a j n y j   g o d"
L22500:	MOV	#000035, -(SP)
L22504:	CLR	-(SP)
L22506:	CALL	L75120			; WRSTG
L22512:	CALL	L74452			; WRLN
; END IF
; IF VAR124 <> 0
L22516:	TST	000124(R5)
L22522:	BNE	L22530
L22524:	JMP	L22602
; THEN
L22530:	MOV	#L47432, -(SP)		; "  - rabo~im nehwataet zemli. sbevalo"
L22534:	MOV	#000044, -(SP)
L22540:	CLR	-(SP)
L22542:	CALL	L75120			; WRSTG
L22546:	MOV	000124(R5), -(SP)
L22552:	CLR	-(SP)
L22554:	CALL	L74562			; WRNM
L22560:	MOV	#L47500, -(SP)		; " ~elowek."
L22564:	MOV	#000011, -(SP)
L22570:	CLR	-(SP)
L22572:	CALL	L75120			; WRSTG
L22576:	CALL	L74452			; WRLN
; END iF
; IF VAR126 <> 0
L22602:	TST	000126(R5)
L22606:	BNE	L22614
L22610:	JMP	L22666
; THEN
L22614:	MOV	#L47512, -(SP)		; "  - gwardiq ne polu~ila denevnogo dowolxstwiq,\r\n   "
L22620:	MOV	#000063, -(SP)
L22624:	CLR	-(SP)
L22626:	CALL	L75120			; WRSTG
L22632:	MOV	000126(R5), -(SP)
L22636:	CLR	-(SP)
L22640:	CALL	L74562			; WRNM
L22644:	MOV	#L47576, -(SP)		; " soldat pokinuli kazarmy i u{li za kordon."
L22650:	MOV	#000052, -(SP)
L22654:	CLR	-(SP)
L22656:	CALL	L75120			; WRSTG
L22662:	CALL	L74452			; WRLN
; END IF
; IF VAR130 <> 0
L22666:	TST	000130(R5)
L22672:	BNE	L22700
L22674:	JMP	L22752
; THEN
L22700:	MOV	#L47652, -(SP)		; "  - wy zamorili golodom"
L22704:	MOV	#000027, -(SP)
L22710:	CLR	-(SP)
L22712:	CALL	L75120			; WRSTG
L22716:	MOV	000130(R5), -(SP)
L22722:	CLR	-(SP)
L22724:	CALL	L74562			; WRNM
L22730:	MOV	#L47702, -(SP)		; " wa{ih wernopoddannyh !"
L22734:	MOV	#000027, -(SP)
L22740:	CLR	-(SP)
L22742:	CALL	L75120			; WRSTG
L22746:	CALL	L74452			; WRLN
; END IF
; IF VAR140 <> 0
L22752:	TST	000140(R5)
L22756:	BNE	L22764
L22760:	JMP	L23036
; THEN
L22764:	MOV	#L47732, -(SP)
L22770:	MOV	#000036, -(SP)
L22774:	CLR	-(SP)
L22776:	CALL	L75120			; WRSTG
L23002:	MOV	000140(R5), -(SP)
L23006:	CLR	-(SP)
L23010:	CALL	L74562			; WRNM
L23014:	MOV	#L47772, -(SP)		; " kg zolota !!!"
L23020:	MOV	#000016, -(SP)
L23024:	CLR	-(SP)
L23026:	CALL	L75120			; WRSTG
L23032:	CALL	L74452			; WRLN
; END IF
; IF VAR142 <> 0
L23036:	TST	000142(R5)
L23042:	BNE	L23050
L23044:	JMP	L23122
; THEN
L23050:	MOV	#L50012, -(SP)
L23054:	MOV	#000043, -(SP)
L23060:	CLR	-(SP)
L23062:	CALL	L75120			; WRSTG
L23066:	MOV	000142(R5), -(SP)
L23072:	CLR	-(SP)
L23074:	CALL	L74562			; WRNM
L23100:	MOV	#L50056, -(SP)
L23104:	MOV	#000010, -(SP)
L23110:	CLR	-(SP)
L23112:	CALL	L75120			; WRSTG
L23116:	CALL	L74452			; WRLN
; END IF
; IF VAR144 <> 0
L23122:	TST	000144(R5)
L23126:	BNE	L23134
L23130:	JMP	L23206
; THEN
L23134:	MOV	#L50070, -(SP)		; "  - p o z o r ! ! !  iz hrama ukrali"
L23140:	MOV	#000044, -(SP)
L23144:	CLR	-(SP)
L23146:	CALL	L75120			; WRSTG
L23152:	MOV	000144(R5), -(SP)
L23156:	CLR	-(SP)
L23160:	CALL	L74562			; WRNM
L23164:	MOV	#L50136, -(SP)		; " rublej."
L23170:	MOV	#000010, -(SP)
L23174:	CLR	-(SP)
L23176:	CALL	L75120			; WRSTG
L23202:	CALL	L74452			; WRLN
; END IF
; IF VAR152 <> 0
L23206:	TST	000152(R5)
L23212:	BNE	L23220
L23214:	JMP	L23272
; THEN
L23220:	MOV	#L50150, -(SP)		; "  - w gosudarstwe rodilosx"
L23224:	MOV	#000032, -(SP)
L23230:	CLR	-(SP)
L23232:	CALL	L75120			; WRSTG
L23236:	MOV	000152(R5), -(SP)
L23242:	CLR	-(SP)
L23244:	CALL	L74562			; WRNM
L23250:	MOV	#L50204, -(SP)		; " detej."
L23254:	MOV	#000007, -(SP)
L23260:	CLR	-(SP)
L23262:	CALL	L75120			; WRSTG
L23266:	CALL	L74452			; WRLN
; END IF
; VAR346 := L57170(0,VAR224)
L23272:	CMP	-(SP), -(SP)
L23274:	CLR	-(SP)
L23276:	MOV	R5, R0
L23300:	ADD	#000224, R0
L23304:	MOV	R0, -(SP)
L23306:	CALL	L01004			; L57170
L23312:	MOV	(SP)+, 000346(R5)
L23316:	MOV	(SP)+, 000350(R5)
; IF VAR346 < 0.05
L23322:	MOV	000350(R5), -(SP)
L23326:	MOV	000346(R5), -(SP)
L23332:	MOV	#146315, -(SP)		; 0.05 float const
L23336:	MOV	#037114, -(SP)		;
L23342:	CALL	L76446			; FLCOMP
L23346:	BLT	L23354
L23350:	JMP	L23606
; THEN
L23354:	CMP	-(SP), -(SP)
L23356:	CLR	-(SP)
L23360:	MOV	R5, R0
L23362:	ADD	#000224, R0
L23366:	MOV	R0, -(SP)
L23370:	CALL	L01004			; L57170
L23374:	MOV	000244(R5), -(SP)
L23400:	MOV	000242(R5), -(SP)
L23404:	FMUL	SP
L23406:	MOV	(SP)+, 000346(R5)
L23412:	MOV	(SP)+, 000350(R5)
; L57660(VAR102,VAR104,VAR346)
L23416:	MOV	R5, R0
L23420:	ADD	#000102, R0
L23424:	MOV	R0, -(SP)
L23426:	MOV	R5, R0
L23430:	ADD	#000104, R0
L23434:	MOV	R0, -(SP)
L23436:	MOV	R5, R0
L23440:	ADD	#000346, R0
L23444:	MOV	R0, -(SP)
L23446:	CALL	L01030			; L57660
; VAR242 := VAR242 - VAR346
L23452:	MOV	000244(R5), -(SP)
L23456:	MOV	000242(R5), -(SP)
L23462:	MOV	000350(R5), -(SP)
L23466:	MOV	000346(R5), -(SP)
L23472:	FSUB	SP
L23474:	MOV	(SP)+, 000242(R5)
L23500:	MOV	(SP)+, 000244(R5)
;
L23504:	MOV	#L50214, -(SP)		; "  - wizirx  u k r a l  "
L23510:	MOV	#000027, -(SP)
L23514:	CLR	-(SP)
L23516:	CALL	L75120			; WRSTG
L23522:	MOV	000102(R5), -(SP)
L23526:	CLR	-(SP)
L23530:	CALL	L74562			; WRNM
L23534:	MOV	#L50244, -(SP)		; " tys."
L23540:	MOV	#000005, -(SP)
L23544:	CLR	-(SP)
L23546:	CALL	L75120			; WRSTG
L23552:	MOV	000104(R5), -(SP)
L23556:	CLR	-(SP)
L23560:	CALL	L74562			; WRNM
L23564:	MOV	#L50252, -(SP)		; " rub. i skrylsq !!!"
L23570:	MOV	#000023, -(SP)
L23574:	CLR	-(SP)
L23576:	CALL	L75120			; WRSTG
L23602:	CALL	L74452			; WRLN
; END IF
; VAR346 := L57170(0,VAR224)
L23606:	CMP	-(SP), -(SP)
L23610:	CLR	-(SP)
L23612:	MOV	R5, R0
L23614:	ADD	#000224, R0
L23620:	MOV	R0, -(SP)
L23622:	CALL	L01004			; L57170
L23626:	MOV	(SP)+, 000346(R5)
L23632:	MOV	(SP)+, 000350(R5)
; IF VAR346 < 0.1
L23636:	MOV	000350(R5), -(SP)
L23642:	MOV	000346(R5), -(SP)
L23646:	MOV	#146315, -(SP)		; 0.1 float const
L23652:	MOV	#037314, -(SP)		;
L23656:	CALL	L76446			; FLCOMP
L23662:	BLT	L23670
L23664:	JMP	L24036			; LABEL 5
; THEN
; VAR102 := ROUND(VAR256 * L57170(0,VAR224))
L23670:	MOV	000260(R5), -(SP)
L23674:	MOV	000256(R5), -(SP)
L23700:	CMP	-(SP), -(SP)
L23702:	CLR	-(SP)
L23704:	MOV	R5, R0
L23706:	ADD	#000224, R0
L23712:	MOV	R0, -(SP)
L23714:	CALL	L01004			; L57170
L23720:	FMUL	SP
L23722:	CALL	L75746			; ROUND
L23726:	MOV	(SP)+, 000102(R5)
; VAR256 := VAR256 - VAR102
L23732:	MOV	000260(R5), -(SP)
L23736:	MOV	000256(R5), -(SP)
L23742:	MOV	000102(R5), -(SP)
L23746:	CALL	L75640			; $FLOAT
L23752:	FSUB	SP
L23754:	MOV	(SP)+, 000256(R5)
L23760:	MOV	(SP)+, 000260(R5)
;
L23764:	MOV	#L50276, -(SP)		; "  - |pidemiq  ~ u m y  pogubila"
L23770:	MOV	#000037, -(SP)
L23774:	CLR	-(SP)
L23776:	CALL	L75120			; WRSTG
L24002:	MOV	000102(R5), -(SP)
L24006:	CLR	-(SP)
L24010:	CALL	L74562			; WRNM
L24014:	MOV	#L50336, -(SP)		; " rabo~ih."
L24020:	MOV	#000011, -(SP)
L24024:	CLR	-(SP)
L24026:	CALL	L75120			; WRSTG
L24032:	CALL	L74452			; WRLN
; END IF
; LABEL 5
; VAR346 := L57170(0,VAR224)
L24036:	CMP	-(SP), -(SP)
L24040:	CLR	-(SP)
L24042:	MOV	R5, R0
L24044:	ADD	#000224, R0
L24050:	MOV	R0, -(SP)
L24052:	CALL	L01004			; L57170
L24056:	MOV	(SP)+, 000346(R5)
L24062:	MOV	(SP)+, 000350(R5)
; IF (VAR346 < 0.3) AND (VAR242 > 10000)
L24066:	MOV	000350(R5), -(SP)
L24072:	MOV	000346(R5), -(SP)
L24076:	MOV	#114632, -(SP)		; 0.3 float const
L24102:	MOV	#037631, -(SP)
L24106:	CALL	L76446			; FLCOMP
L24112:	BLT	L24120
L24114:	CLR	R0
L24116:	BR	L24124
L24120:	MOV	#000001, R0
L24124:	MOV	000244(R5), -(SP)
L24130:	MOV	000242(R5), -(SP)
L24134:	MOV	#023420, -(SP)		; 10000.
L24140:	CALL	L75640			; $FLOAT
L24144:	CALL	L76446			; FLCOMP
L24150:	BGT	L24156
L24152:	CLR	R1
L24154:	BR	L24162
L24156:	MOV	#000001, R1
L24162:	COMB	R1
L24164:	BICB	R1, R0
L24166:	BNE	L24174
L24170:	JMP	L25630
; THEN
L24174:	MOV	R5, R0
L24176:	ADD	#000102, R0
L24202:	MOV	R0, -(SP)
L24204:	MOV	R5, R0
L24206:	ADD	#000104, R0
L24212:	MOV	R0, -(SP)
L24214:	MOV	R5, R0
L24216:	ADD	#000242, R0
L24222:	MOV	R0, -(SP)
L24224:	CALL	L01030			; L57660
;
L24230:	MOV	#L50350, -(SP)		; "\r\n mitropolit wa{ego gosudarstwa ovidaet sredstw dlq postrojki"
L24234:	MOV	#000172, -(SP)
L24240:	CLR	-(SP)
L24242:	CALL	L75120			; WRSTG
L24246:	MOV	000102(R5), -(SP)
L24252:	CLR	-(SP)
L24254:	CALL	L74562			; WRNM
L24260:	MOV	#L50544, -(SP)		; " tysq~"
L24264:	MOV	#000006, -(SP)
L24270:	CLR	-(SP)
L24272:	CALL	L75120			; WRSTG
L24276:	MOV	000104(R5), -(SP)
L24302:	CLR	-(SP)
L24304:	CALL	L74562			; WRNM
L24310:	MOV	#L50554, -(SP)		; " rublej. skolxko wydelqete ? "
L24314:	MOV	#000035, -(SP)
L24320:	CLR	-(SP)
L24322:	CALL	L75120			; WRSTG
L24326:	CALL	L73272			; RDRL
L24332:	MOV	(SP)+, 000332(R5)
L24336:	MOV	(SP)+, 000334(R5)
L24342:	CALL	L72760			; RDLN
; IF VAR332 > VAR242
L24346:	MOV	000334(R5), -(SP)
L24352:	MOV	000332(R5), -(SP)
L24356:	MOV	000244(R5), -(SP)
L24362:	MOV	000242(R5), -(SP)
L24366:	CALL	L76446			; FLCOMP
L24372:	BGT	L24400
L24374:	JMP	L24436
; THEN
L24400:	CALL	L01024			; L57632
L24404:	MOV	#L50612, -(SP)		; "u was net stolxko deneg!"
L24410:	MOV	#000030, -(SP)
L24414:	CLR	-(SP)
L24416:	CALL	L75120			; WRSTG
L24422:	CALL	L74452			; WRLN
; GOTO LABEL 5
L24426:	MOV	L70056, SP		; $RESR6
L24432:	JMP	L24036
; END IF
L24436:	CALL	L01024			; L57632
; VAR242 := VAR242 - VAR342
L24442:	MOV	000244(R5), -(SP)
L24446:	MOV	000242(R5), -(SP)
L24452:	MOV	000334(R5), -(SP)
L24456:	MOV	000332(R5), -(SP)
L24462:	FSUB	SP
L24464:	MOV	(SP)+, 000242(R5)
L24470:	MOV	(SP)+, 000244(R5)
; VAR326 := VAR326 + VAR332
L24474:	MOV	000330(R5), -(SP)
L24500:	MOV	000326(R5), -(SP)
L24504:	MOV	000334(R5), -(SP)
L24510:	MOV	000332(R5), -(SP)
L24514:	FADD	SP
L24516:	MOV	(SP)+, 000326(R5)
L24522:	MOV	(SP)+, 000330(R5)
; IF VAR242 <> 0
L24526:	MOV	000244(R5), -(SP)
L24532:	MOV	000242(R5), -(SP)
L24536:	CLR	-(SP)
L24540:	CALL	L75640			; $FLOAT
L24544:	CALL	L76446			; FLCOMP
L24550:	BNE	L24556
L24552:	JMP	L24614
; THEN VAR346 := VAR332 / VAR242
L24556:	MOV	000334(R5), -(SP)
L24562:	MOV	000332(R5), -(SP)
L24566:	MOV	000244(R5), -(SP)
L24572:	MOV	000242(R5), -(SP)
L24576:	FDIV	SP
L24600:	MOV	(SP)+, 000346(R5)
L24604:	MOV	(SP)+, 000350(R5)
L24610:	JMP	L24634
; ELSE VAR346 := 1
L24614:	MOV	#000001, -(SP)
L24620:	CALL	L75640			; $FLOAT
L24624:	MOV	(SP)+, 000346(R5)
L24630:	MOV	(SP)+, 000350(R5)
; END IF
; IF VAR346 < 0.1
L24634:	MOV	000350(R5), -(SP)
L24640:	MOV	000346(R5), -(SP)
L24644:	MOV	#146315, -(SP)		; 0.1 float const
L24650:	MOV	#037314, -(SP)		;
L24654:	CALL	L76446			; FLCOMP
L24660:	BLT	L24666
L24662:	JMP	L24710
; THEN
L24666:	MOV	#L50644, -(SP)		; "wy ~to nasmehaetesx ?! skrqga !!!"
L24672:	MOV	#000041, -(SP)
L24676:	CLR	-(SP)
L24700:	CALL	L75120			; WRSTG
L24704:	CALL	L74452			; WRLN
; END IF
; IF (VAR346 > 0.1) AND (VAR346 < 0.3)
L24710:	MOV	000350(R5), -(SP)
L24714:	MOV	000346(R5), -(SP)
L24720:	MOV	#146315, -(SP)		; 0.1 float const
L24724:	MOV	#037314, -(SP)		;
L24730:	CALL	L76446			; FLCOMP
L24734:	BGT	L24742
L24736:	CLR	R0
L24740:	BR	L24746
L24742:	MOV	#000001, R0
L24746:	MOV	000350(R5), -(SP)
L24752:	MOV	000346(R5), -(SP)
L24756:	MOV	#114632, -(SP)		; 0.3 float const
L24762:	MOV	#037631, -(SP)
L24766:	CALL	L76446			; FLCOMP
L24772:	BLT	L25000
L24774:	CLR	R1
L24776:	BR	L25004
L25000:	MOV	#000001, R1
L25004:	COMB	R1
L25006:	BICB	R1, R0
L25010:	BNE	L25016
L25012:	JMP	L25040
; THEN
L25016:	MOV	#L50706, -(SP)		; "wy ~rezmerno skupy wa{e weli~estwo !"
L25022:	MOV	#000044, -(SP)
L25026:	CLR	-(SP)
L25030:	CALL	L75120			; WRSTG
L25034:	CALL	L74452			; WRLN
; END IF
; IF (VAR346 > 0.3) AND (VAR346 < 0.6)
L25040:	MOV	000350(R5), -(SP)
L25044:	MOV	000346(R5), -(SP)
L25050:	MOV	#114632, -(SP)		; 0.3 float const
L25054:	MOV	#037631, -(SP)
L25060:	CALL	L76446			; FLCOMP
L25064:	BGT	L25072
L25066:	CLR	R0
L25070:	BR	L25076
L25072:	MOV	#000001, R0
L25076:	MOV	000350(R5), -(SP)
L25102:	MOV	000346(R5), -(SP)
L25106:	MOV	#114632, -(SP)		; 0.6 float const
L25112:	MOV	#040031, -(SP)
L25116:	CALL	L76446			; FLCOMP
L25122:	BLT	L25130
L25124:	CLR	R1
L25126:	BR	L25134
L25130:	MOV	#000001, R1
L25134:	COMB	R1
L25136:	BICB	R1, R0
L25140:	BNE	L25146
L25142:	JMP	L25170
; THEN
L25146:	MOV	#L50754, -(SP)		; "slawa korol`, }edromu i mudromu prawitel` !!!"
L25152:	MOV	#000055, -(SP)
L25156:	CLR	-(SP)
L25160:	CALL	L75120			; WRSTG
L25164:	CALL	L74452			; WRLN
; END IF
; IF (VAR346 > 0.6) AND (VAR346 < 0.9)
L25170:	MOV	000350(R5), -(SP)
L25174:	MOV	000346(R5), -(SP)
L25200:	MOV	#114632, -(SP)		; 0.6 float const
L25204:	MOV	#040031, -(SP)
L25210:	CALL	L76446			; FLCOMP
L25214:	BGT	L25222
L25216:	CLR	R0
L25220:	BR	L25226
L25222:	MOV	#000001, R0
L25226:	MOV	000350(R5), -(SP)
L25232:	MOV	000346(R5), -(SP)
L25236:	MOV	#063146, -(SP)		; 0.9 float const
L25242:	MOV	#040146, -(SP)		;
L25246:	CALL	L76446			; FLCOMP
L25252:	BLT	L25260
L25254:	CLR	R1
L25256:	BR	L25264
L25260:	MOV	#000001, R1
L25264:	COMB	R1
L25266:	BICB	R1, R0
L25270:	BNE	L25276
L25272:	JMP	L25320
; THEN
L25276:	MOV	#L51032, -(SP)		; "wo wseh hramah sluvat zdrawnicu welikomu korol`."
L25302:	MOV	#000060, -(SP)
L25306:	CLR	-(SP)
L25310:	CALL	L75120			; WRSTG
L25314:	CALL	L74452			; WRLN
; END IF
; IF VAR346 > 0.9
L25320:	MOV	000350(R5), -(SP)
L25324:	MOV	000346(R5), -(SP)
L25330:	MOV	#063146, -(SP)		; 0.9 float
L25334:	MOV	#040146, -(SP)		;
L25340:	CALL	L76446			; FLCOMP
L25344:	BGT	L25352
L25346:	JMP	L25374
; THEN
L25352:	MOV	#L51114, -(SP)		; "wsewy{nij blagoslowit wa{e prawlenie na dolgie gody."
L25356:	MOV	#000064, -(SP)
L25362:	CLR	-(SP)
L25364:	CALL	L75120			; WRSTG
L25370:	CALL	L74452			; WRLN
; END IF
; IF VAR326 > 100000.0
L25374:	MOV	000330(R5), -(SP)
L25400:	MOV	000326(R5), -(SP)
L25404:	MOV	#050000, -(SP)		; 100000.0
L25410:	MOV	#044303, -(SP)		;
L25414:	CALL	L76446			; FLCOMP
L25420:	BGT	L25426
L25422:	JMP	L25630
; THEN
; VAR102 := TRUNC(VAR326 / 100000.0)
L25426:	MOV	000330(R5), -(SP)
L25432:	MOV	000326(R5), -(SP)
L25436:	MOV	#050000, -(SP)		; 100000.0
L25442:	MOV	#044303, -(SP)		;
L25446:	FDIV	SP
L25450:	CALL	L76012			; TRUNC
L25454:	MOV	(SP)+, 000102(R5)
; VAR326 := ??
L25460:	ADD	000102(R5), 000214(R5)
L25466:	MOV	000330(R5), -(SP)
L25472:	MOV	000326(R5), -(SP)
L25476:	MOV	000102(R5), -(SP)
L25502:	CALL	L75640			; $FLOAT
L25506:	MOV	#050000, -(SP)
L25512:	MOV	#044303, -(SP)
L25516:	FMUL	SP
L25520:	FSUB	SP
L25522:	MOV	(SP)+, 000326(R5)
L25526:	MOV	(SP)+, 000330(R5)
; FOR VAR216 := 1 TO VAR102
L25532:	MOV	R5, R0
L25534:	ADD	#000216, R0
L25540:	MOV	R0, -(SP)
L25542:	MOV	#000001, -(SP)
L25546:	MOV	000102(R5), -(SP)
L25552:	MOV	000002(SP), @000004(SP)
L25560:	CMP	@000004(SP), (SP)
L25564:	BLE	L25572
L25566:	JMP	L25624
;
L25572:	MOV	#L51202, -(SP)		; " -=-   w o z d w i g n u t  h r a m   -=-"
L25576:	MOV	#000051, -(SP)
L25602:	CLR	-(SP)
L25604:	CALL	L75120			; WRSTG
L25610:	CALL	L74452			; WRLN
L25614:	INC	@000004(SP)
L25620:	JMP	L25560
L25624:	ADD	#000006, SP
; END FOR
L25630:	CMP	-(SP), -(SP)
L25632:	CLR	-(SP)
L25634:	MOV	R5, R0
L25636:	ADD	#000224, R0
L25642:	MOV	R0, -(SP)
L25644:	CALL	L01004			; L57170
L25650:	MOV	(SP)+, 000346(R5)
L25654:	MOV	(SP)+, 000350(R5)
; IF
L25660:	MOV	000350(R5), -(SP)
L25664:	MOV	000346(R5), -(SP)
L25670:	CLR	-(SP)			; 0.5 float const
L25672:	MOV	#040000, -(SP)
L25676:	CALL	L76446			; FLCOMP
L25702:	BGT	L25710
L25704:	JMP	L27170
; THEN
; IF
L25710:	MOV	000344(R5), -(SP)
L25714:	MOV	000342(R5), -(SP)
L25720:	CLR	-(SP)
L25722:	CALL	L75640			; $FLOAT
L25726:	CALL	L76446			; FLCOMP
L25732:	BGT	L25740
L25734:	JMP	L26514
; THEN
L25740:	CMP	-(SP), -(SP)
L25742:	CLR	-(SP)
L25744:	MOV	R5, R0
L25746:	ADD	#000224, R0
L25752:	MOV	R0, -(SP)
L25754:	CALL	L01004			; L57170
L25760:	MOV	(SP)+, 000346(R5)
L25764:	MOV	(SP)+, 000350(R5)
; IF
L25770:	MOV	000350(R5), -(SP)
L25774:	MOV	000346(R5), -(SP)
L26000:	CLR	-(SP)			; 0.5 float const
L26002:	MOV	#040000, -(SP)
L26006:	CALL	L76446			; FLCOMP
L26012:	BGT	L26020
L26014:	JMP	L26510
; THEN
L26020:	MOV	#L51254, -(SP)		; "==> pribyl gonec s izwestiqmi, wpustitx ? (0/1) "
L26024:	MOV	#000060, -(SP)
L26030:	CLR	-(SP)
L26032:	CALL	L75120			; WRSTG
L26036:	CALL	L73036			; RDNM
L26042:	MOV	(SP)+, 000106(R5)
L26046:	CALL	L72760			; RDLN
; IF
L26052:	CMP	000106(R5), #000001
L26060:	BEQ	L26066
L26062:	JMP	L26510
; THEN
L26066:	CALL	L01024			; L57632
L26072:	CMP	-(SP), -(SP)
L26074:	CLR	-(SP)
L26076:	MOV	R5, R0
L26100:	ADD	#000224, R0
L26104:	MOV	R0, -(SP)
L26106:	CALL	L01004			; L57170
L26112:	MOV	(SP)+, 000346(R5)
L26116:	MOV	(SP)+, 000350(R5)
;
L26122:	MOV	000350(R5), -(SP)
L26126:	MOV	000346(R5), -(SP)
L26132:	CLR	-(SP)			; 0.5 float const
L26134:	MOV	#040000, -(SP)
L26140:	CALL	L76446			; FLCOMP
L26144:	BGT	L26152
L26146:	JMP	L26450
;
L26152:	MOV	000344(R5), -(SP)
L26156:	MOV	000342(R5), -(SP)
L26162:	MOV	#000012, -(SP)
L26166:	CALL	L75640			; $FLOAT
L26172:	FMUL	SP
L26174:	CMP	-(SP), -(SP)
L26176:	CLR	-(SP)
L26200:	MOV	R5, R0
L26202:	ADD	#000224, R0
L26206:	MOV	R0, -(SP)
L26210:	CALL	L01004			; L57170
L26214:	CLR	-(SP)			; 0.5 float const
L26216:	MOV	#040000, -(SP)
L26222:	FADD	SP
L26224:	FMUL	SP
L26226:	MOV	(SP)+, 000346(R5)
L26232:	MOV	(SP)+, 000350(R5)
;
L26236:	MOV	R5, R0
L26240:	ADD	#000106, R0
L26244:	MOV	R0, -(SP)
L26246:	MOV	R5, R0
L26250:	ADD	#000110, R0
L26254:	MOV	R0, -(SP)
L26256:	MOV	R5, R0
L26260:	ADD	#000346, R0
L26264:	MOV	R0, -(SP)
L26266:	CALL	L01030			; L57660
L26272:	MOV	#051336, -(SP)
L26276:	MOV	#000121, -(SP)
L26302:	CLR	-(SP)
L26304:	CALL	L75120			; WRSTG
L26310:	MOV	000106(R5), -(SP)
L26314:	CLR	-(SP)
L26316:	CALL	L74562			; WRNM
L26322:	MOV	#051460, -(SP)
L26326:	MOV	#000006, -(SP)
L26332:	CLR	-(SP)
L26334:	CALL	L75120			; WRSTG
L26340:	MOV	000110(R5), -(SP)
L26344:	CLR	-(SP)
L26346:	CALL	L74562			; WRNM
L26352:	MOV	#051470, -(SP)
L26356:	MOV	#000010, -(SP)
L26362:	CLR	-(SP)
L26364:	CALL	L75120			; WRSTG
L26370:	CALL	L74452			; WRLN
;
L26374:	MOV	000244(R5), -(SP)
L26400:	MOV	000242(R5), -(SP)
L26404:	MOV	000350(R5), -(SP)
L26410:	MOV	000346(R5), -(SP)
L26414:	FADD	SP
L26416:	MOV	(SP)+, 000242(R5)
L26422:	MOV	(SP)+, 000244(R5)
;
L26426:	CLR	-(SP)
L26430:	CALL	L75640			; $FLOAT
L26434:	MOV	(SP)+, 000342(R5)
L26440:	MOV	(SP)+, 000344(R5)
L26444:	JMP	L26510
;
L26450:	MOV	#051502, -(SP)
L26454:	MOV	#000061, -(SP)
L26460:	CLR	-(SP)
L26462:	CALL	L75120			; WRSTG
L26466:	CALL	L74452			; WRLN
L26472:	CLR	-(SP)
L26474:	CALL	L75640			; $FLOAT
L26500:	MOV	(SP)+, 000342(R5)
L26504:	MOV	(SP)+, 000344(R5)
L26510:	JMP	L27170
; ELSE
L26514:	MOV	000244(R5), -(SP)
L26520:	MOV	000242(R5), -(SP)
L26524:	CLR	-(SP)
L26526:	MOV	#042572, -(SP)
L26532:	CALL	L76446			; FLCOMP
L26536:	BGT	L26544
L26540:	JMP	L27170
;
L26544:	MOV	#051564, -(SP)
L26550:	MOV	#000111, -(SP)
L26554:	CLR	-(SP)
L26556:	CALL	L75120			; WRSTG
L26562:	CALL	L73036			; RDNM
L26566:	MOV	(SP)+, 000106(R5)
L26572:	CALL	L72760			; RDLN
L26576:	CMP	000106(R5), #000001
L26604:	BEQ	L26612
L26606:	JMP	L27070
;
L26612:	MOV	R5, R0
L26614:	ADD	#000102, R0
L26620:	MOV	R0, -(SP)
L26622:	MOV	R5, R0
L26624:	ADD	#000104, R0
L26630:	MOV	R0, -(SP)
L26632:	MOV	R5, R0
L26634:	ADD	#000242, R0
L26640:	MOV	R0, -(SP)
L26642:	CALL	L01030			; L57660
L26646:	MOV	#051676, -(SP)
L26652:	MOV	#000007, -(SP)
L26656:	CLR	-(SP)
L26660:	CALL	L75120			; WRSTG
L26664:	MOV	000102(R5), -(SP)
L26670:	CLR	-(SP)
L26672:	CALL	L74562			; WRNM
L26676:	MOV	#051706, -(SP)
L26702:	MOV	#000006, -(SP)
L26706:	CLR	-(SP)
L26710:	CALL	L75120			; WRSTG
L26714:	MOV	000104(R5), -(SP)
L26720:	CLR	-(SP)
L26722:	CALL	L74562			; WRNM
L26726:	MOV	#051716, -(SP)
L26732:	MOV	#000035, -(SP)
L26736:	CLR	-(SP)
L26740:	CALL	L75120			; WRSTG
L26744:	CALL	L73272			; RDRL
L26750:	MOV	(SP)+, 000342(R5)
L26754:	MOV	(SP)+, 000344(R5)
L26760:	CALL	L72760			; RDLN
L26764:	MOV	000344(R5), -(SP)
L26770:	MOV	000342(R5), -(SP)
L26774:	MOV	000244(R5), -(SP)
L27000:	MOV	000242(R5), -(SP)
L27004:	CALL	L76446			; FLCOMP
L27010:	BGT	L27016
L27012:	JMP	L27036
;
L27016:	MOV	000244(R5), -(SP)
L27022:	MOV	000242(R5), -(SP)
L27026:	MOV	(SP)+, 000342(R5)
L27032:	MOV	(SP)+, 000344(R5)
;
L27036:	MOV	000244(R5), -(SP)
L27042:	MOV	000242(R5), -(SP)
L27046:	MOV	000344(R5), -(SP)
L27052:	MOV	000342(R5), -(SP)
L27056:	FSUB	SP
L27060:	MOV	(SP)+, 000242(R5)
L27064:	MOV	(SP)+, 000244(R5)
;
L27070:	MOV	000344(R5), -(SP)
L27074:	MOV	000342(R5), -(SP)
L27100:	CLR	-(SP)
L27102:	CALL	L75640			; $FLOAT
L27106:	CALL	L76446			; FLCOMP
L27112:	BGT	L27120
L27114:	JMP	L27146
L27120:	MOV	#051754, -(SP)
L27124:	MOV	#000047, -(SP)
L27130:	CLR	-(SP)
L27132:	CALL	L75120			; WRSTG
L27136:	CALL	L74452			; WRLN
L27142:	JMP	L27170
L27146:	MOV	#052024, -(SP)
L27152:	MOV	#000060, -(SP)
L27156:	CLR	-(SP)
L27160:	CALL	L75120			; WRSTG
L27164:	CALL	L74452			; WRLN
; END IF
L27170:	CMP	-(SP), -(SP)
L27172:	CLR	-(SP)
L27174:	MOV	R5, R0
L27176:	ADD	#000224, R0
L27202:	MOV	R0, -(SP)
L27204:	CALL	L01004			; L57170
L27210:	MOV	(SP)+, 000346(R5)
L27214:	MOV	(SP)+, 000350(R5)
;
L27220:	MOV	000350(R5), -(SP)
L27224:	MOV	000346(R5), -(SP)
L27230:	MOV	#114632, -(SP)		; 0.3 float const
L27234:	MOV	#037431, -(SP)
L27240:	CALL	L76446			; FLCOMP
L27244:	BLT	L27252
L27246:	JMP	L30130
L27252:	MOV	000244(R5), -(SP)
L27256:	MOV	000242(R5), -(SP)
L27262:	CMP	-(SP), -(SP)
L27264:	CLR	-(SP)
L27266:	MOV	R5, R0
L27270:	ADD	#000224, R0
L27274:	MOV	R0, -(SP)
L27276:	CALL	L01004			; L57170
L27302:	FMUL	SP
L27304:	MOV	(SP)+, 000346(R5)
L27310:	MOV	(SP)+, 000350(R5)
;
L27314:	MOV	000240(R5), -(SP)
L27320:	MOV	000236(R5), -(SP)
L27324:	CMP	-(SP), -(SP)
L27326:	CLR	-(SP)
L27330:	MOV	R5, R0
L27332:	ADD	#000224, R0
L27336:	MOV	R0, -(SP)
L27340:	CALL	L01004			; L57170
L27344:	FMUL	SP
L27346:	MOV	(SP)+, 000356(R5)
L27352:	MOV	(SP)+, 000360(R5)
;
L27356:	MOV	000250(R5), -(SP)
L27362:	MOV	000246(R5), -(SP)
L27366:	CMP	-(SP), -(SP)
L27370:	CLR	-(SP)
L27372:	MOV	R5, R0
L27374:	ADD	#000224, R0
L27400:	MOV	R0, -(SP)
L27402:	CALL	L01004			; L57170
L27406:	FMUL	SP
L27410:	MOV	(SP)+, 000362(R5)
L27414:	MOV	(SP)+, 000364(R5)
;
L27420:	MOV	000254(R5), -(SP)
L27424:	MOV	000252(R5), -(SP)
L27430:	CMP	-(SP), -(SP)
L27432:	CLR	-(SP)
L27434:	MOV	R5, R0
L27436:	ADD	#000224, R0
L27442:	MOV	R0, -(SP)
L27444:	CALL	L01004			; L57170
L27450:	FMUL	SP
L27452:	MOV	(SP)+, 000366(R5)
L27456:	MOV	(SP)+, 000370(R5)
;
L27462:	MOV	000260(R5), -(SP)
L27466:	MOV	000256(R5), -(SP)
L27472:	CMP	-(SP), -(SP)
L27474:	CLR	-(SP)
L27476:	MOV	R5, R0
L27500:	ADD	#000224, R0
L27504:	MOV	R0, -(SP)
L27506:	CALL	L01004			; L57170
L27512:	FMUL	SP
L27514:	MOV	(SP)+, 000372(R5)
L27520:	MOV	(SP)+, 000374(R5)
;
L27524:	MOV	000264(R5), -(SP)
L27530:	MOV	000262(R5), -(SP)
L27534:	CMP	-(SP), -(SP)
L27536:	CLR	-(SP)
L27540:	MOV	R5, R0
L27542:	ADD	#000224, R0
L27546:	MOV	R0, -(SP)
L27550:	CALL	L01004			; L57170
L27554:	FMUL	SP
L27556:	MOV	(SP)+, 000376(R5)
L27562:	MOV	(SP)+, 000400(R5)
;
L27566:	MOV	#052106, -(SP)
L27572:	MOV	#000037, -(SP)
L27576:	CLR	-(SP)
L27600:	CALL	L75120			; WRSTG
L27604:	CALL	L74452			; WRLN
L27610:	MOV	000350(R5), -(SP)
L27614:	MOV	000346(R5), -(SP)
L27620:	MOV	000360(R5), -(SP)
L27624:	MOV	000356(R5), -(SP)
L27630:	MOV	000364(R5), -(SP)
L27634:	MOV	000362(R5), -(SP)
L27640:	MOV	000370(R5), -(SP)
L27644:	MOV	000366(R5), -(SP)
L27650:	MOV	000374(R5), -(SP)
L27654:	MOV	000372(R5), -(SP)
L27660:	MOV	000400(R5), -(SP)
L27664:	MOV	000376(R5), -(SP)
L27670:	CALL	L01034
L27674:	MOV	000244(R5), -(SP)
L27700:	MOV	000242(R5), -(SP)
L27704:	MOV	000350(R5), -(SP)
L27710:	MOV	000346(R5), -(SP)
L27714:	FADD	SP
L27716:	MOV	(SP)+, 000242(R5)
L27722:	MOV	(SP)+, 000244(R5)
;
L27726:	MOV	000240(R5), -(SP)
L27732:	MOV	000236(R5), -(SP)
L27736:	MOV	000360(R5), -(SP)
L27742:	MOV	000356(R5), -(SP)
L27746:	FADD	SP
L27750:	MOV	(SP)+, 000236(R5)
L27754:	MOV	(SP)+, 000240(R5)
;
L27760:	MOV	000250(R5), -(SP)
L27764:	MOV	000246(R5), -(SP)
L27770:	MOV	000364(R5), -(SP)
L27774:	MOV	000362(R5), -(SP)
L30000:	FADD	SP
L30002:	MOV	(SP)+, 000246(R5)
L30006:	MOV	(SP)+, 000250(R5)
;
L30012:	MOV	000254(R5), -(SP)
L30016:	MOV	000252(R5), -(SP)
L30022:	MOV	000370(R5), -(SP)
L30026:	MOV	000366(R5), -(SP)
L30032:	FADD	SP
L30034:	MOV	(SP)+, 000252(R5)
L30040:	MOV	(SP)+, 000254(R5)
;
L30044:	MOV	000260(R5), -(SP)
L30050:	MOV	000256(R5), -(SP)
L30054:	MOV	000374(R5), -(SP)
L30060:	MOV	000372(R5), -(SP)
L30064:	FADD	SP
L30066:	MOV	(SP)+, 000256(R5)
L30072:	MOV	(SP)+, 000260(R5)
;
L30076:	MOV	000264(R5), -(SP)
L30102:	MOV	000262(R5), -(SP)
L30106:	MOV	000400(R5), -(SP)
L30112:	MOV	000376(R5), -(SP)
L30116:	FADD	SP
L30120:	MOV	(SP)+, 000262(R5)
L30124:	MOV	(SP)+, 000264(R5)
;
L30130:	CMP	-(SP), -(SP)
L30132:	CLR	-(SP)
L30134:	MOV	R5, R0
L30136:	ADD	#000224, R0
L30142:	MOV	R0, -(SP)
L30144:	CALL	L01004			; L57170
L30150:	MOV	(SP)+, 000346(R5)
L30154:	MOV	(SP)+, 000350(R5)
;
L30160:	MOV	000350(R5), -(SP)
L30164:	MOV	000346(R5), -(SP)
L30170:	MOV	#146315, -(SP)		; 0.2 float const
L30174:	MOV	#037514, -(SP)		;
L30200:	CALL	L76446			; FLCOMP
L30204:	BLT	L30212
L30206:	JMP	L32130
;
L30212:	TST	000170(R5)
L30216:	BEQ	L30224
L30220:	JMP	L31462
;
L30224:	MOV	000244(R5), -(SP)
L30230:	MOV	000242(R5), -(SP)
L30234:	CMP	-(SP), -(SP)
L30236:	CLR	-(SP)
L30240:	MOV	R5, R0
L30242:	ADD	#000224, R0
L30246:	MOV	R0, -(SP)
L30250:	CALL	L01004			; L57170
L30254:	FMUL	SP
L30256:	MOV	(SP)+, 000346(R5)
L30262:	MOV	(SP)+, 000350(R5)
;
L30266:	MOV	000240(R5), -(SP)
L30272:	MOV	000236(R5), -(SP)
L30276:	CMP	-(SP), -(SP)
L30300:	CLR	-(SP)
L30302:	MOV	R5, R0
L30304:	ADD	#000224, R0
L30310:	MOV	R0, -(SP)
L30312:	CALL	L01004			; L57170
L30316:	FMUL	SP
L30320:	MOV	(SP)+, 000356(R5)
L30324:	MOV	(SP)+, 000360(R5)
;
L30330:	MOV	000250(R5), -(SP)
L30334:	MOV	000246(R5), -(SP)
L30340:	CMP	-(SP), -(SP)
L30342:	CLR	-(SP)
L30344:	MOV	R5, R0
L30346:	ADD	#000224, R0
L30352:	MOV	R0, -(SP)
L30354:	CALL	L01004			; L57170
L30360:	FMUL	SP
L30362:	MOV	(SP)+, 000362(R5)
L30366:	MOV	(SP)+, 000364(R5)
;
L30372:	MOV	000254(R5), -(SP)
L30376:	MOV	000252(R5), -(SP)
L30402:	CMP	-(SP), -(SP)
L30404:	CLR	-(SP)
L30406:	MOV	R5, R0
L30410:	ADD	#000224, R0
L30414:	MOV	R0, -(SP)
L30416:	CALL	L01004			; L57170
L30422:	FMUL	SP
L30424:	MOV	(SP)+, 000366(R5)
L30430:	MOV	(SP)+, 000370(R5)
;
L30434:	MOV	000260(R5), -(SP)
L30440:	MOV	000256(R5), -(SP)
L30444:	CMP	-(SP), -(SP)
L30446:	CLR	-(SP)
L30450:	MOV	R5, R0
L30452:	ADD	#000224, R0
L30456:	MOV	R0, -(SP)
L30460:	CALL	L01004			; L57170
L30464:	FMUL	SP
L30466:	MOV	(SP)+, 000372(R5)
L30472:	MOV	(SP)+, 000374(R5)
;
L30476:	MOV	000264(R5), -(SP)
L30502:	MOV	000262(R5), -(SP)
L30506:	CMP	-(SP), -(SP)
L30510:	CLR	-(SP)
L30512:	MOV	R5, R0
L30514:	ADD	#000224, R0
L30520:	MOV	R0, -(SP)
L30522:	CALL	L01004			; L57170
L30526:	FMUL	SP
L30530:	MOV	(SP)+, 000376(R5)
L30534:	MOV	(SP)+, 000400(R5)
;
L30540:	MOV	#052146, -(SP)
L30544:	MOV	#000057, -(SP)
L30550:	CLR	-(SP)
L30552:	CALL	L75120			; WRSTG
L30556:	CALL	L74452			; WRLN
L30562:	MOV	000350(R5), -(SP)
L30566:	MOV	000346(R5), -(SP)
L30572:	MOV	000360(R5), -(SP)
L30576:	MOV	000356(R5), -(SP)
L30602:	MOV	000364(R5), -(SP)
L30606:	MOV	000362(R5), -(SP)
L30612:	MOV	000370(R5), -(SP)
L30616:	MOV	000366(R5), -(SP)
L30622:	MOV	000374(R5), -(SP)
L30626:	MOV	000372(R5), -(SP)
L30632:	MOV	000400(R5), -(SP)
L30636:	MOV	000376(R5), -(SP)
L30642:	CALL	L01034
L30646:	MOV	#052226, -(SP)
L30652:	MOV	#000030, -(SP)
L30656:	CLR	-(SP)
L30660:	CALL	L75120			; WRSTG
L30664:	CALL	L73036			; RDNM
L30670:	MOV	(SP)+, 000102(R5)
L30674:	CALL	L72760			; RDLN
L30700:	CMP	000102(R5), #000001
L30706:	BEQ	L30714
L30710:	JMP	L31430
L30714:	MOV	#000001, 000170(R5)
L30722:	MOV	000244(R5), -(SP)
L30726:	MOV	000242(R5), -(SP)
L30732:	MOV	000350(R5), -(SP)
L30736:	MOV	000346(R5), -(SP)
L30742:	FADD	SP
L30744:	MOV	(SP)+, 000242(R5)
L30750:	MOV	(SP)+, 000244(R5)
;
L30754:	MOV	000240(R5), -(SP)
L30760:	MOV	000236(R5), -(SP)
L30764:	MOV	000360(R5), -(SP)
L30770:	MOV	000356(R5), -(SP)
L30774:	FADD	SP
L30776:	MOV	(SP)+, 000236(R5)
L31002:	MOV	(SP)+, 000240(R5)
;
L31006:	MOV	000250(R5), -(SP)
L31012:	MOV	000246(R5), -(SP)
L31016:	MOV	000364(R5), -(SP)
L31022:	MOV	000362(R5), -(SP)
L31026:	FADD	SP
L31030:	MOV	(SP)+, 000246(R5)
L31034:	MOV	(SP)+, 000250(R5)
;
L31040:	MOV	000254(R5), -(SP)
L31044:	MOV	000252(R5), -(SP)
L31050:	MOV	000370(R5), -(SP)
L31054:	MOV	000366(R5), -(SP)
L31060:	FADD	SP
L31062:	MOV	(SP)+, 000252(R5)
L31066:	MOV	(SP)+, 000254(R5)
;
L31072:	MOV	000260(R5), -(SP)
L31076:	MOV	000256(R5), -(SP)
L31102:	MOV	000374(R5), -(SP)
L31106:	MOV	000372(R5), -(SP)
L31112:	FADD	SP
L31114:	MOV	(SP)+, 000256(R5)
L31120:	MOV	(SP)+, 000260(R5)
;
L31124:	MOV	000264(R5), -(SP)
L31130:	MOV	000262(R5), -(SP)
L31134:	MOV	000400(R5), -(SP)
L31140:	MOV	000376(R5), -(SP)
L31144:	FADD	SP
L31146:	MOV	(SP)+, 000262(R5)
L31152:	MOV	(SP)+, 000264(R5)
;
L31156:	CALL	L01024			; L57632
L31162:	MOV	000244(R5), -(SP)
L31166:	MOV	000242(R5), -(SP)
L31172:	CMP	-(SP), -(SP)
L31174:	CLR	-(SP)
L31176:	MOV	R5, R0
L31200:	ADD	#000224, R0
L31204:	MOV	R0, -(SP)
L31206:	CALL	L01004			; L57170
L31212:	FMUL	SP
L31214:	CLR	-(SP)			; 0.5 float const
L31216:	MOV	#040000, -(SP)
L31222:	FMUL	SP
L31224:	MOV	(SP)+, 000346(R5)
L31230:	MOV	(SP)+, 000350(R5)
;
L31234:	MOV	000244(R5), -(SP)
L31240:	MOV	000242(R5), -(SP)
L31244:	MOV	000350(R5), -(SP)
L31250:	MOV	000346(R5), -(SP)
L31254:	FSUB	SP
L31256:	MOV	(SP)+, 000242(R5)
L31262:	MOV	(SP)+, 000244(R5)
;
L31266:	MOV	R5, R0
L31270:	ADD	#000102, R0
L31274:	MOV	R0, -(SP)
L31276:	MOV	R5, R0
L31300:	ADD	#000104, R0
L31304:	MOV	R0, -(SP)
L31306:	MOV	R5, R0
L31310:	ADD	#000346, R0
L31314:	MOV	R0, -(SP)
L31316:	CALL	L01030			; L57660
L31322:	MOV	#052260, -(SP)
L31326:	MOV	#000023, -(SP)
L31332:	CLR	-(SP)
L31334:	CALL	L75120			; WRSTG
L31340:	MOV	000102(R5), -(SP)
L31344:	CLR	-(SP)
L31346:	CALL	L74562			; WRNM
L31352:	MOV	#052304, -(SP)
L31356:	MOV	#000006, -(SP)
L31362:	CLR	-(SP)
L31364:	CALL	L75120			; WRSTG
L31370:	MOV	000104(R5), -(SP)
L31374:	CLR	-(SP)
L31376:	CALL	L74562			; WRNM
L31402:	MOV	#052314, -(SP)
L31406:	MOV	#000010, -(SP)
L31412:	CLR	-(SP)
L31414:	CALL	L75120			; WRSTG
L31420:	CALL	L74452			; WRLN
L31424:	JMP	L31456
L31430:	MOV	#052326, -(SP)
L31434:	MOV	#000047, -(SP)
L31440:	CLR	-(SP)
L31442:	CALL	L75120			; WRSTG
L31446:	CALL	L74452			; WRLN
L31452:	INC	000150(R5)
L31456:	JMP	L32130
L31462:	MOV	000244(R5), -(SP)
L31466:	MOV	000242(R5), -(SP)
L31472:	CMP	-(SP), -(SP)
L31474:	CLR	-(SP)
L31476:	MOV	R5, R0
L31500:	ADD	#000224, R0
L31504:	MOV	R0, -(SP)
L31506:	CALL	L01004			; L57170
L31512:	FMUL	SP
L31514:	MOV	#114632, -(SP)		; 0.3 float const
L31520:	MOV	#037631, -(SP)
L31524:	FMUL	SP
L31526:	MOV	(SP)+, 000346(R5)
L31532:	MOV	(SP)+, 000350(R5)
L31536:	MOV	R5, R0
L31540:	ADD	#000102, R0
L31544:	MOV	R0, -(SP)
L31546:	MOV	R5, R0
L31550:	ADD	#000104, R0
L31554:	MOV	R0, -(SP)
L31556:	MOV	R5, R0
L31560:	ADD	#000346, R0
L31564:	MOV	R0, -(SP)
L31566:	CALL	L01030			; L57660
L31572:	MOV	000244(R5), -(SP)
L31576:	MOV	000242(R5), -(SP)
L31602:	MOV	000350(R5), -(SP)
L31606:	MOV	000346(R5), -(SP)
L31612:	FSUB	SP
L31614:	MOV	(SP)+, 000242(R5)
L31620:	MOV	(SP)+, 000244(R5)
;
L31624:	CMP	-(SP), -(SP)
L31626:	CLR	-(SP)
L31630:	MOV	R5, R0
L31632:	ADD	#000224, R0
L31636:	MOV	R0, -(SP)
L31640:	CALL	L01004			; L57170
L31644:	MOV	000340(R5), -(SP)
L31650:	MOV	000336(R5), -(SP)
L31654:	FADD	SP
L31656:	MOV	(SP)+, 000346(R5)
L31662:	MOV	(SP)+, 000350(R5)
;
L31666:	MOV	#052376, -(SP)
L31672:	MOV	#000025, -(SP)
L31676:	CLR	-(SP)
L31700:	CALL	L75120			; WRSTG
L31704:	MOV	000350(R5), -(SP)
L31710:	MOV	000346(R5), -(SP)
L31714:	CLR	-(SP)			; 0.5 float const
L31716:	MOV	#040000, -(SP)
L31722:	CALL	L76446			; FLCOMP
L31726:	BGT	L31734
L31730:	JMP	L32004
;
L31734:	INC	000146(R5)
L31740:	MOV	#052424, -(SP)
L31744:	MOV	#000017, -(SP)
L31750:	CLR	-(SP)
L31752:	CALL	L75120			; WRSTG
L31756:	CALL	L74452			; WRLN
L31762:	CLR	-(SP)
L31764:	CALL	L75640			; $FLOAT
L31770:	MOV	(SP)+, 000336(R5)
L31774:	MOV	(SP)+, 000340(R5)
L32000:	JMP	L32026
;
L32004:	MOV	#052444, -(SP)
L32010:	MOV	#000020, -(SP)
L32014:	CLR	-(SP)
L32016:	CALL	L75120			; WRSTG
L32022:	CALL	L74452			; WRLN
L32026:	MOV	#052466, -(SP)
L32032:	MOV	#000040, -(SP)
L32036:	CLR	-(SP)
L32040:	CALL	L75120			; WRSTG
L32044:	MOV	000102(R5), -(SP)
L32050:	CLR	-(SP)
L32052:	CALL	L74562			; WRNM
L32056:	MOV	#052530, -(SP)
L32062:	MOV	#000006, -(SP)
L32066:	CLR	-(SP)
L32070:	CALL	L75120			; WRSTG
L32074:	MOV	000104(R5), -(SP)
L32100:	CLR	-(SP)
L32102:	CALL	L74562			; WRNM
L32106:	MOV	#052540, -(SP)
L32112:	MOV	#000010, -(SP)
L32116:	CLR	-(SP)
L32120:	CALL	L75120			; WRSTG
L32124:	CALL	L74452			; WRLN
L32130:	CMP	-(SP), -(SP)
L32132:	CLR	-(SP)
L32134:	MOV	R5, R0
L32136:	ADD	#000224, R0
L32142:	MOV	R0, -(SP)
L32144:	CALL	L01004			; L57170
L32150:	MOV	(SP)+, 000346(R5)
L32154:	MOV	(SP)+, 000350(R5)
;
L32160:	MOV	000350(R5), -(SP)
L32164:	MOV	000346(R5), -(SP)
L32170:	MOV	#146315, -(SP)		; 0.2 float const
L32174:	MOV	#037514, -(SP)		;
L32200:	CALL	L76446			; FLCOMP
L32204:	BLT	L32212
L32206:	CLR	R0
L32210:	BR	L32216
L32212:	MOV	#000001, R0
L32216:	TST	000170(R5)
L32222:	BNE	L32230
L32224:	CLR	R1
L32226:	BR	L32234
L32230:	MOV	#000001, R1
L32234:	COMB	R1
L32236:	BICB	R1, R0
L32240:	BNE	L32246
L32242:	JMP	L33414
L32246:	CMP	-(SP), -(SP)
L32250:	CLR	-(SP)
L32252:	MOV	R5, R0
L32254:	ADD	#000224, R0
L32260:	MOV	R0, -(SP)
L32262:	CALL	L01004			; L57170
L32266:	MOV	(SP)+, 000346(R5)
L32272:	MOV	(SP)+, 000350(R5)
;
L32276:	MOV	#052552, -(SP)
L32302:	MOV	#000062, -(SP)
L32306:	CLR	-(SP)
L32310:	CALL	L75120			; WRSTG
L32314:	CALL	L73036			; RDNM
L32320:	MOV	(SP)+, 000102(R5)
L32324:	CALL	L72760			; RDLN
L32330:	CALL	L01024			; L57632
L32334:	MOV	000350(R5), -(SP)
L32340:	MOV	000346(R5), -(SP)
L32344:	CLR	-(SP)			; 0.5 float const
L32346:	MOV	#040000, -(SP)
L32352:	CALL	L76446			; FLCOMP
L32356:	BGT	L32364
L32360:	JMP	L32372
;
L32364:	MOV	#000001, 000102(R5)
L32372:	TST	000102(R5)
L32376:	BEQ	L32404
L32400:	JMP	L32450
;
L32404:	MOV	#052636, -(SP)
L32410:	MOV	#000044, -(SP)
L32414:	CLR	-(SP)
L32416:	CALL	L75120			; WRSTG
L32422:	CALL	L74452			; WRLN
L32426:	CLR	-(SP)
L32430:	CALL	L75640			; $FLOAT
L32434:	MOV	(SP)+, 000336(R5)
L32440:	MOV	(SP)+, 000340(R5)
L32444:	JMP	L33414
;
L32450:	CMP	-(SP), -(SP)
L32452:	CLR	-(SP)
L32454:	MOV	R5, R0
L32456:	ADD	#000224, R0
L32462:	MOV	R0, -(SP)
L32464:	CALL	L01004			; L57170
L32470:	MOV	(SP)+, 000346(R5)
L32474:	MOV	(SP)+, 000350(R5)
;
L32500:	MOV	000350(R5), -(SP)
L32504:	MOV	000346(R5), -(SP)
L32510:	MOV	#146315, -(SP)		; 0.2 float const
L32514:	MOV	#037514, -(SP)		;
L32520:	CALL	L76446			; FLCOMP
L32524:	BGT	L32532
L32526:	JMP	L32774
L32532:	CLR	000170(R5)
L32536:	CMP	-(SP), -(SP)
L32540:	CLR	-(SP)
L32542:	MOV	R5, R0
L32544:	ADD	#000224, R0
L32550:	MOV	R0, -(SP)
L32552:	CALL	L01004			; L57170
L32556:	MOV	000244(R5), -(SP)
L32562:	MOV	000242(R5), -(SP)
L32566:	FMUL	SP
L32570:	MOV	(SP)+, 000346(R5)
L32574:	MOV	(SP)+, 000350(R5)
;
L32600:	MOV	000244(R5), -(SP)
L32604:	MOV	000242(R5), -(SP)
L32610:	MOV	000350(R5), -(SP)
L32614:	MOV	000346(R5), -(SP)
L32620:	FSUB	SP
L32622:	MOV	(SP)+, 000242(R5)
L32626:	MOV	(SP)+, 000244(R5)
;
L32632:	MOV	R5, R0
L32634:	ADD	#000102, R0
L32640:	MOV	R0, -(SP)
L32642:	MOV	R5, R0
L32644:	ADD	#000104, R0
L32650:	MOV	R0, -(SP)
L32652:	MOV	R5, R0
L32654:	ADD	#000346, R0
L32660:	MOV	R0, -(SP)
L32662:	CALL	L01030			; L57660
L32666:	MOV	#052704, -(SP)
L32672:	MOV	#000120, -(SP)
L32676:	CLR	-(SP)
L32700:	CALL	L75120			; WRSTG
L32704:	MOV	000102(R5), -(SP)
L32710:	CLR	-(SP)
L32712:	CALL	L74562			; WRNM
L32716:	MOV	#053026, -(SP)
L32722:	MOV	#000006, -(SP)
L32726:	CLR	-(SP)
L32730:	CALL	L75120			; WRSTG
L32734:	MOV	000104(R5), -(SP)
L32740:	CLR	-(SP)
L32742:	CALL	L74562			; WRNM
L32746:	MOV	#053036, -(SP)
L32752:	MOV	#000010, -(SP)
L32756:	CLR	-(SP)
L32760:	CALL	L75120			; WRSTG
L32764:	CALL	L74452			; WRLN
L32770:	JMP	L33414
L32774:	CMP	-(SP), -(SP)
L32776:	CLR	-(SP)
L33000:	MOV	R5, R0
L33002:	ADD	#000224, R0
L33006:	MOV	R0, -(SP)
L33010:	CALL	L01004			; L57170
L33014:	CLR	-(SP)			; 0.5 float const
L33016:	MOV	#040000, -(SP)
L33022:	FMUL	SP
L33024:	MOV	000244(R5), -(SP)
L33030:	MOV	000242(R5), -(SP)
L33034:	FMUL	SP
L33036:	MOV	(SP)+, 000346(R5)
L33042:	MOV	(SP)+, 000350(R5)
;
L33046:	MOV	R5, R0
L33050:	ADD	#000102, R0
L33054:	MOV	R0, -(SP)
L33056:	MOV	R5, R0
L33060:	ADD	#000104, R0
L33064:	MOV	R0, -(SP)
L33066:	MOV	R5, R0
L33070:	ADD	#000346, R0
L33074:	MOV	R0, -(SP)
L33076:	CALL	L01030			; L57660
L33102:	MOV	#053050, -(SP)
L33106:	MOV	#000033, -(SP)
L33112:	CLR	-(SP)
L33114:	CALL	L75120			; WRSTG
L33120:	MOV	000102(R5), -(SP)
L33124:	CLR	-(SP)
L33126:	CALL	L74562			; WRNM
L33132:	MOV	#053104, -(SP)
L33136:	MOV	#000006, -(SP)
L33142:	CLR	-(SP)
L33144:	CALL	L75120			; WRSTG
L33150:	MOV	000104(R5), -(SP)
L33154:	CLR	-(SP)
L33156:	CALL	L74562			; WRNM
L33162:	MOV	#053114, -(SP)
L33166:	MOV	#000055, -(SP)
L33172:	CLR	-(SP)
L33174:	CALL	L75120			; WRSTG
L33200:	CALL	L73036			; RDNM
L33204:	MOV	(SP)+, 000102(R5)
L33210:	CALL	L72760			; RDLN
L33214:	CMP	000102(R5), #000001
L33222:	BEQ	L33230
L33224:	JMP	L33354
;
L33230:	MOV	000244(R5), -(SP)
L33234:	MOV	000242(R5), -(SP)
L33240:	MOV	000350(R5), -(SP)
L33244:	MOV	000346(R5), -(SP)
L33250:	FSUB	SP
L33252:	MOV	(SP)+, 000242(R5)
L33256:	MOV	(SP)+, 000244(R5)
;
L33262:	MOV	000340(R5), -(SP)
L33266:	MOV	000336(R5), -(SP)
L33272:	MOV	000350(R5), -(SP)
L33276:	MOV	000346(R5), -(SP)
L33302:	MOV	000244(R5), -(SP)
L33306:	MOV	000242(R5), -(SP)
L33312:	FDIV	SP
L33314:	FADD	SP
L33316:	MOV	(SP)+, 000336(R5)
L33322:	MOV	(SP)+, 000340(R5)
;
L33326:	MOV	#053172, -(SP)
L33332:	MOV	#000056, -(SP)
L33336:	CLR	-(SP)
L33340:	CALL	L75120			; WRSTG
L33344:	CALL	L74452			; WRLN
L33350:	JMP	L33414
L33354:	MOV	#053252, -(SP)
L33360:	MOV	#000052, -(SP)
L33364:	CLR	-(SP)
L33366:	CALL	L75120			; WRSTG
L33372:	CALL	L74452			; WRLN
L33376:	CLR	-(SP)
L33400:	CALL	L75640			; $FLOAT
L33404:	MOV	(SP)+, 000336(R5)
L33410:	MOV	(SP)+, 000340(R5)
L33414:	CMP	-(SP), -(SP)
L33416:	CLR	-(SP)
L33420:	MOV	R5, R0
L33422:	ADD	#000224, R0
L33426:	MOV	R0, -(SP)
L33430:	CALL	L01004			; L57170
L33434:	MOV	#146315, -(SP)		; 0.2 float const
L33440:	MOV	#037514, -(SP)		;
L33444:	FMUL	SP
L33446:	MOV	000174(R5), -(SP)	; Номер года правления
L33452:	CALL	L75640			; $FLOAT
L33456:	MOV	#000036, -(SP)
L33462:	CALL	L75640			; $FLOAT
L33466:	FDIV	SP
L33470:	FADD	SP
L33472:	MOV	(SP)+, 000346(R5)
L33476:	MOV	(SP)+, 000350(R5)
;
L33502:	MOV	000350(R5), -(SP)
L33506:	MOV	000346(R5), -(SP)
L33512:	MOV	#146315, -(SP)		; 0.8 float const
L33516:	MOV	#040114, -(SP)		;
L33522:	CALL	L76446			; FLCOMP
L33526:	BGT	L33534
L33530:	JMP	L35214
;
L33534:	MOV	000244(R5), -(SP)
L33540:	MOV	000242(R5), -(SP)
L33544:	CMP	-(SP), -(SP)
L33546:	CLR	-(SP)
L33550:	MOV	R5, R0
L33552:	ADD	#000224, R0
L33556:	MOV	R0, -(SP)
L33560:	CALL	L01004			; L57170
L33564:	FMUL	SP
L33566:	CLR	-(SP)			; 0.5 float const
L33570:	MOV	#040000, -(SP)
L33574:	FMUL	SP
L33576:	MOV	(SP)+, 000352(R5)
L33602:	MOV	(SP)+, 000354(R5)
;
L33606:	MOV	R5, R0
L33610:	ADD	#000102, R0
L33614:	MOV	R0, -(SP)
L33616:	MOV	R5, R0
L33620:	ADD	#000104, R0
L33624:	MOV	R0, -(SP)
L33626:	MOV	R5, R0
L33630:	ADD	#000352, R0
L33634:	MOV	R0, -(SP)
L33636:	CALL	L01030			; L57660
L33642:	MOV	#053326, -(SP)
L33646:	MOV	#000104, -(SP)
L33652:	CLR	-(SP)
L33654:	CALL	L75120			; WRSTG
L33660:	MOV	000102(R5), -(SP)
L33664:	CLR	-(SP)
L33666:	CALL	L74562			; WRNM
L33672:	MOV	#053434, -(SP)
L33676:	MOV	#000006, -(SP)
L33702:	CLR	-(SP)
L33704:	CALL	L75120			; WRSTG
L33710:	MOV	000104(R5), -(SP)
L33714:	CLR	-(SP)
L33716:	CALL	L74562			; WRNM
L33722:	MOV	#053444, -(SP)
L33726:	MOV	#000052, -(SP)
L33732:	CLR	-(SP)
L33734:	CALL	L75120			; WRSTG
L33740:	CALL	L73036			; RDNM
L33744:	MOV	(SP)+, 000102(R5)
L33750:	CALL	L72760			; RDLN
L33754:	TST	000102(R5)
L33760:	BEQ	L33766
L33762:	JMP	L34062
L33766:	CMP	-(SP), -(SP)
L33770:	CLR	-(SP)
L33772:	MOV	R5, R0
L33774:	ADD	#000224, R0
L34000:	MOV	R0, -(SP)
L34002:	CALL	L01004			; L57170
L34006:	MOV	(SP)+, 000346(R5)
L34012:	MOV	(SP)+, 000350(R5)
;
L34016:	MOV	000350(R5), -(SP)
L34022:	MOV	000346(R5), -(SP)
L34026:	CLR	-(SP)			; 0.5 float const
L34030:	MOV	#040000, -(SP)
L34034:	CALL	L76446			; FLCOMP
L34040:	BGT	L34046
L34042:	JMP	L34056
; GOTO LABEL 6
L34046:	MOV	L70056, SP		; $RESR6
L34052:	JMP	L35224
;
L34056:	JMP	L35214
L34062:	MOV	000244(R5), -(SP)
L34066:	MOV	000242(R5), -(SP)
L34072:	MOV	000354(R5), -(SP)
L34076:	MOV	000352(R5), -(SP)
L34102:	FSUB	SP
L34104:	MOV	(SP)+, 000242(R5)
L34110:	MOV	(SP)+, 000244(R5)
;
L34114:	CMP	-(SP), -(SP)
L34116:	CLR	-(SP)
L34120:	MOV	R5, R0
L34122:	ADD	#000224, R0
L34126:	MOV	R0, -(SP)
L34130:	CALL	L01004			; L57170
L34134:	MOV	(SP)+, 000346(R5)
L34140:	MOV	(SP)+, 000350(R5)
;
L34144:	MOV	000350(R5), -(SP)
L34150:	MOV	000346(R5), -(SP)
L34154:	MOV	#114632, -(SP)		; 0.3 float const
L34160:	MOV	#037631, -(SP)
L34164:	CALL	L76446			; FLCOMP
L34170:	BLT	L34176
L34172:	JMP	L35214
;
L34176:	CMP	-(SP), -(SP)
L34200:	CLR	-(SP)
L34202:	MOV	R5, R0
L34204:	ADD	#000224, R0
L34210:	MOV	R0, -(SP)
L34212:	CALL	L01004			; L57170
L34216:	MOV	(SP)+, 000346(R5)
L34222:	MOV	(SP)+, 000350(R5)
;
L34226:	MOV	000350(R5), -(SP)
L34232:	MOV	000346(R5), -(SP)
L34236:	CLR	-(SP)			; 0.5 float const
L34240:	MOV	#040000, -(SP)
L34244:	CALL	L76446			; FLCOMP
L34250:	BGT	L34256
L34252:	JMP	L34606
;
L34256:	MOV	000244(R5), -(SP)
L34262:	MOV	000242(R5), -(SP)
L34266:	CMP	-(SP), -(SP)
L34270:	CLR	-(SP)
L34272:	MOV	R5, R0
L34274:	ADD	#000224, R0
L34300:	MOV	R0, -(SP)
L34302:	CALL	L01004			; L57170
L34306:	FMUL	SP
L34310:	MOV	#146315, -(SP)		; 0.8 float const
L34314:	MOV	#040114, -(SP)
L34320:	FMUL	SP
L34322:	MOV	(SP)+, 000352(R5)
L34326:	MOV	(SP)+, 000354(R5)
;
L34332:	MOV	R5, R0
L34334:	ADD	#000102, R0
L34340:	MOV	R0, -(SP)
L34342:	MOV	R5, R0
L34344:	ADD	#000104, R0
L34350:	MOV	R0, -(SP)
L34352:	MOV	R5, R0
L34354:	ADD	#000352, R0
L34360:	MOV	R0, -(SP)
L34362:	CALL	L01030			; L57660
L34366:	MOV	#053520, -(SP)
L34372:	MOV	#000055, -(SP)
L34376:	CLR	-(SP)
L34400:	CALL	L75120			; WRSTG
L34404:	MOV	000102(R5), -(SP)
L34410:	CLR	-(SP)
L34412:	CALL	L74562			; WRNM
L34416:	MOV	#053576, -(SP)
L34422:	MOV	#000005, -(SP)
L34426:	CLR	-(SP)
L34430:	CALL	L75120			; WRSTG
L34434:	MOV	000104(R5), -(SP)
L34440:	CLR	-(SP)
L34442:	CALL	L74562			; WRNM
L34446:	MOV	#053604, -(SP)
L34452:	MOV	#000065, -(SP)
L34456:	CLR	-(SP)
L34460:	CALL	L75120			; WRSTG
L34464:	CALL	L73036			; RDNM
L34470:	MOV	(SP)+, 000102(R5)
L34474:	CALL	L72760			; RDLN
L34500:	TST	000102(R5)
L34504:	BEQ	L34512
L34506:	JMP	L34602
L34512:	CMP	-(SP), -(SP)
L34514:	CLR	-(SP)
L34516:	MOV	R5, R0
L34520:	ADD	#000224, R0
L34524:	MOV	R0, -(SP)
L34526:	CALL	L01004			; L57170
L34532:	MOV	(SP)+, 000346(R5)
L34536:	MOV	(SP)+, 000350(R5)
;
L34542:	MOV	000350(R5), -(SP)
L34546:	MOV	000346(R5), -(SP)
L34552:	CLR	-(SP)			; 0.5 float const
L34554:	MOV	#040000, -(SP)
L34560:	CALL	L76446			; FLCOMP
L34564:	BGT	L34572
L34566:	JMP	L34602
; GOTO LABEL 6
L34572:	MOV	L70056, SP		; $RESR6
L34576:	JMP	L35224
;
L34602:	JMP	L35204
L34606:	MOV	000244(R5), -(SP)
L34612:	MOV	000242(R5), -(SP)
L34616:	MOV	000354(R5), -(SP)
L34622:	MOV	000352(R5), -(SP)
L34626:	FSUB	SP
L34630:	MOV	(SP)+, 000242(R5)
L34634:	MOV	(SP)+, 000244(R5)
;
L34640:	CMP	-(SP), -(SP)
L34642:	CLR	-(SP)
L34644:	MOV	R5, R0
L34646:	ADD	#000224, R0
L34652:	MOV	R0, -(SP)
L34654:	CALL	L01004			; L57170
L34660:	MOV	(SP)+, 000346(R5)
L34664:	MOV	(SP)+, 000350(R5)
;
L34670:	MOV	000350(R5), -(SP)
L34674:	MOV	000346(R5), -(SP)
L34700:	CLR	-(SP)			; 0.5 float const
L34702:	MOV	#040000, -(SP)
L34706:	CALL	L76446			; FLCOMP
L34712:	BLT	L34720
L34714:	JMP	L35204
L34720:	MOV	#053672, -(SP)
L34724:	MOV	#000222, -(SP)
L34730:	CLR	-(SP)
L34732:	CALL	L75120			; WRSTG
L34736:	CALL	L73036			; RDNM
L34742:	MOV	(SP)+, 000102(R5)
L34746:	CALL	L72760			; RDLN
L34752:	TST	000102(R5)
L34756:	BEQ	L34764
L34760:	JMP	L35060
L34764:	CMP	-(SP), -(SP)
L34766:	CLR	-(SP)
L34770:	MOV	R5, R0
L34772:	ADD	#000224, R0
L34776:	MOV	R0, -(SP)
L35000:	CALL	L01004			; L57170
L35004:	MOV	(SP)+, 000346(R5)
L35010:	MOV	(SP)+, 000350(R5)
;
L35014:	MOV	000350(R5), -(SP)
L35020:	MOV	000346(R5), -(SP)
L35024:	CLR	-(SP)			; 0.5 float const
L35026:	MOV	#040000, -(SP)
L35032:	CALL	L76446			; FLCOMP
L35036:	BGT	L35044
L35040:	JMP	L35054
; GOTO LABEL 6
L35044:	MOV	L70056, SP		; $RESR6
L35050:	JMP	L35224
;
L35054:	JMP	L35204
L35060:	MOV	000240(R5), -(SP)
L35064:	MOV	000236(R5), -(SP)
L35070:	MOV	#000002, -(SP)
L35074:	CALL	L75640			; $FLOAT
L35100:	FDIV	SP
L35102:	MOV	(SP)+, 000236(R5)
L35106:	MOV	(SP)+, 000240(R5)
;
L35112:	CMP	-(SP), -(SP)
L35114:	CLR	-(SP)
L35116:	MOV	R5, R0
L35120:	ADD	#000224, R0
L35124:	MOV	R0, -(SP)
L35126:	CALL	L01004			; L57170
L35132:	MOV	(SP)+, 000346(R5)
L35136:	MOV	(SP)+, 000350(R5)
;
L35142:	MOV	000350(R5), -(SP)
L35146:	MOV	000346(R5), -(SP)
L35152:	MOV	#146315, -(SP)		; 0.05 float const
L35156:	MOV	#037114, -(SP)		;
L35162:	CALL	L76446			; FLCOMP
L35166:	BLT	L35174
L35170:	JMP	L35204
; GOTO LABEL 6
L35174:	MOV	L70056, SP		; $RESR6
L35200:	JMP	L35224
; GOTO LABEL 6
L35204:	MOV	L70056, SP		; $RESR6
L35210:	JMP	L35224
; GOTO LABEL 7
L35214:	MOV	L70056, SP		; $RESR6
L35220:	JMP	L35332
; LABEL 6
; IF VAR146 = 0
L35224:	TST	000146(R5)
L35230:	BEQ	L35236
L35232:	JMP	L35274
; THEN
L35236:	MOV	#L54116, -(SP)		; "k o r o l x  u m e r ! ! !"
L35242:	MOV	#000032, -(SP)
L35246:	CLR	-(SP)
L35250:	CALL	L75120			; WRSTG
L35254:	CALL	L74452			; WRLN
; GOTO LABEL 8
L35260:	MOV	L70056, SP		; $RESR6
L35264:	JMP	L42230
L35270:	JMP	L35332			; LABEL 7
; ELSE
L35274:	MOV	#L54152, -(SP)		; "s y n   k o r o n o w a n ,  c a r s t w u j t e !"
L35300:	MOV	#000062, -(SP)
L35304:	CLR	-(SP)
L35306:	CALL	L75120			; WRSTG
L35312:	CALL	L74452			; WRLN
L35316:	CLR	000146(R5)
L35322:	CLR	000150(R5)
L35326:	CLR	000170(R5)
; END IF
; LABEL 7
L35332:	MOV	000244(R5), -(SP)
L35336:	MOV	000242(R5), -(SP)
L35342:	MOV	000250(R5), -(SP)
L35346:	MOV	000246(R5), -(SP)
L35352:	MOV	000056(R5), -(SP)
L35356:	CALL	L75640			; $FLOAT
L35362:	FMUL	SP
L35364:	FADD	SP
L35366:	MOV	000240(R5), -(SP)
L35372:	MOV	000236(R5), -(SP)
L35376:	MOV	000054(R5), -(SP)
L35402:	CALL	L75640			; $FLOAT
L35406:	FMUL	SP
L35410:	MOV	#000002, -(SP)
L35414:	CALL	L75640			; $FLOAT
L35420:	FDIV	SP
L35422:	FADD	SP
L35424:	MOV	#001750, -(SP)		; 1000.
L35430:	CALL	L75640			; $FLOAT
L35434:	FDIV	SP
L35436:	MOV	#000001, -(SP)
L35442:	CALL	L75640			; $FLOAT
L35446:	FADD	SP
L35450:	MOV	(SP)+, 000346(R5)
L35454:	MOV	(SP)+, 000350(R5)
L35460:	CMP	-(SP), -(SP)
L35462:	CLR	-(SP)
L35464:	MOV	R5, R0
L35466:	ADD	#000224, R0
L35472:	MOV	R0, -(SP)
L35474:	CALL	L01004			; L57170
L35500:	MOV	000150(R5), -(SP)
L35504:	CALL	L75640			; $FLOAT
L35510:	CLR	-(SP)			; 0.5 float const
L35512:	MOV	#040000, -(SP)
L35516:	FMUL	SP
L35520:	MOV	000350(R5), -(SP)
L35524:	MOV	000346(R5), -(SP)
L35530:	MOV	000264(R5), -(SP)
L35534:	MOV	000262(R5), -(SP)
L35540:	FSUB	SP
L35542:	MOV	000350(R5), -(SP)
L35546:	MOV	000346(R5), -(SP)
L35552:	FDIV	SP
L35554:	FADD	SP
L35556:	FMUL	SP
L35560:	MOV	(SP)+, 000352(R5)
L35564:	MOV	(SP)+, 000354(R5)
;
L35570:	MOV	000354(R5), -(SP)
L35574:	MOV	000352(R5), -(SP)
L35600:	MOV	#031463, -(SP)
L35604:	MOV	#040063, -(SP)
L35610:	CALL	L76446			; FLCOMP
L35614:	BGT	L35622
L35616:	JMP	L41454
L35622:	CLR	000150(R5)
L35626:	MOV	#054236, -(SP)
L35632:	MOV	#000144, -(SP)		; 100.
L35636:	CLR	-(SP)
L35640:	CALL	L75120			; WRSTG
L35644:	CALL	L73036			; RDNM
L35650:	MOV	(SP)+, 000102(R5)
L35654:	CALL	L72760			; RDLN
L35660:	CALL	L01024			; L57632
L35664:	CMP	000102(R5), #000001
L35672:	BEQ	L35700
L35674:	JMP	L36116
L35700:	CLR	-(SP)
L35702:	MOV	000260(R5), -(SP)
L35706:	MOV	000256(R5), -(SP)
L35712:	MOV	#000002, -(SP)
L35716:	CALL	L75640			; $FLOAT
L35722:	FDIV	SP
L35724:	MOV	000264(R5), -(SP)
L35730:	MOV	000262(R5), -(SP)
L35734:	FADD	SP
L35736:	CALL	L01044
L35742:	MOV	(SP)+, R0
L35744:	MOV	R0, 000154(R5)
L35750:	MOV	#146315, -(SP)		; 0.2 float const
L35754:	MOV	#037514, -(SP)		;
L35760:	MOV	(SP)+, 000322(R5)
L35764:	MOV	(SP)+, 000324(R5)
;
L35770:	MOV	000320(R5), -(SP)
L35774:	MOV	000316(R5), -(SP)
L36000:	MOV	000324(R5), -(SP)
L36004:	MOV	000322(R5), -(SP)
L36010:	FADD	SP
L36012:	MOV	(SP)+, 000316(R5)
L36016:	MOV	(SP)+, 000320(R5)
;
L36022:	MOV	000320(R5), -(SP)
L36026:	MOV	000316(R5), -(SP)
L36032:	CLR	-(SP)
L36034:	MOV	#040200, -(SP)
L36040:	CALL	L76446			; FLCOMP
L36044:	BGT	L36052
L36046:	JMP	L36070
;
L36052:	CLR	-(SP)
L36054:	MOV	#040200, -(SP)
L36060:	MOV	(SP)+, 000316(R5)
L36064:	MOV	(SP)+, 000320(R5)
L36070:	MOV	#054404, -(SP)
L36074:	MOV	#000035, -(SP)
L36100:	CLR	-(SP)
L36102:	CALL	L75120			; WRSTG
L36106:	CALL	L74452			; WRLN
L36112:	JMP	L36136
;
L36116:	MOV	000264(R5), -(SP)
L36122:	MOV	000262(R5), -(SP)
L36126:	CALL	L75746			; ROUND
L36132:	MOV	(SP)+, 000154(R5)
L36136:	CLR	-(SP)
L36140:	MOV	000260(R5), -(SP)
L36144:	MOV	000256(R5), -(SP)
L36150:	MOV	#000002, -(SP)
L36154:	CALL	L75640			; $FLOAT
L36160:	FDIV	SP
L36162:	MOV	000264(R5), -(SP)
L36166:	MOV	000262(R5), -(SP)
L36172:	FADD	SP
L36174:	CMP	-(SP), -(SP)
L36176:	CLR	-(SP)
L36200:	MOV	R5, R0
L36202:	ADD	#000224, R0
L36206:	MOV	R0, -(SP)
L36210:	CALL	L01004			; L57170
L36214:	CLR	-(SP)			; 0.5 float const
L36216:	MOV	#040000, -(SP)
L36222:	FADD	SP
L36224:	FMUL	SP
L36226:	CALL	L01044
L36232:	MOV	(SP)+, R0
L36234:	MOV	R0, 000156(R5)
L36240:	MOV	000350(R5), -(SP)
L36244:	MOV	000346(R5), -(SP)
L36250:	MOV	000264(R5), -(SP)
L36254:	MOV	000262(R5), -(SP)
L36260:	CLR	-(SP)
L36262:	MOV	#041040, -(SP)
L36266:	FMUL	SP
L36270:	CALL	L76446			; FLCOMP
L36274:	BGT	L36302
L36276:	JMP	L36352
;
L36302:	CLR	-(SP)
L36304:	MOV	000350(R5), -(SP)
L36310:	MOV	000346(R5), -(SP)
L36314:	MOV	000260(R5), -(SP)
L36320:	MOV	000256(R5), -(SP)
L36324:	MOV	#000002, -(SP)
L36330:	CALL	L75640			; $FLOAT
L36334:	FDIV	SP
L36336:	FADD	SP
L36340:	CALL	L01044
L36344:	MOV	(SP)+, R0
L36346:	MOV	R0, 000156(R5)
;
L36352:	MOV	#054442, -(SP)
L36356:	MOV	#000042, -(SP)
L36362:	CLR	-(SP)
L36364:	CALL	L75120			; WRSTG
L36370:	MOV	000154(R5), -(SP)
L36374:	CLR	-(SP)
L36376:	CALL	L74562			; WRNM
L36402:	MOV	#054506, -(SP)
L36406:	MOV	#000131, -(SP)
L36412:	CLR	-(SP)
L36414:	CALL	L75120			; WRSTG
L36420:	MOV	000156(R5), -(SP)
L36424:	CLR	-(SP)
L36426:	CALL	L74562			; WRNM
L36432:	MOV	#054640, -(SP)
L36436:	MOV	#000010, -(SP)
L36442:	CLR	-(SP)
L36444:	CALL	L75120			; WRSTG
L36450:	CALL	L74452			; WRLN
L36454:	MOV	000244(R5), -(SP)
L36460:	MOV	000242(R5), -(SP)
L36464:	MOV	#023420, -(SP)
L36470:	CALL	L75640			; $FLOAT
L36474:	CALL	L76446			; FLCOMP
L36500:	BLT	L36506
L36502:	CLR	R0
L36504:	BR	L36512
L36506:	MOV	#000001, R0
L36512:	MOV	000240(R5), -(SP)
L36516:	MOV	000236(R5), -(SP)
L36522:	MOV	#000012, -(SP)
L36526:	CALL	L75640			; $FLOAT
L36532:	CALL	L76446			; FLCOMP
L36536:	BGT	L36544
L36540:	CLR	R1
L36542:	BR	L36550
L36544:	MOV	#000001, R1
L36550:	COMB	R1
L36552:	BICB	R1, R0
L36554:	BNE	L36562
L36556:	JMP	L36724
L36562:	MOV	#054652, -(SP)
L36566:	MOV	#000165, -(SP)
L36572:	CLR	-(SP)
L36574:	CALL	L75120			; WRSTG
L36600:	CALL	L73036			; RDNM
L36604:	MOV	(SP)+, 000102(R5)
L36610:	CALL	L72760			; RDLN
L36614:	CMP	000102(R5), #000001
L36622:	BEQ	L36630
L36624:	JMP	L36724
L36630:	MOV	000244(R5), -(SP)
L36634:	MOV	000242(R5), -(SP)
L36640:	MOV	000240(R5), -(SP)
L36644:	MOV	000236(R5), -(SP)
L36650:	MOV	#000002, -(SP)
L36654:	CALL	L75640			; $FLOAT
L36660:	FDIV	SP
L36662:	MOV	000054(R5), -(SP)
L36666:	CALL	L75640			; $FLOAT
L36672:	FMUL	SP
L36674:	FADD	SP
L36676:	MOV	(SP)+, 000242(R5)
L36702:	MOV	(SP)+, 000244(R5)
L36706:	CLR	-(SP)
L36710:	CALL	L75640			; $FLOAT
L36714:	MOV	(SP)+, 000236(R5)
L36720:	MOV	(SP)+, 000240(R5)
;
L36724:	MOV	000244(R5), -(SP)
L36730:	MOV	000242(R5), -(SP)
L36734:	MOV	#001750, -(SP)
L36740:	CALL	L75640			; $FLOAT
L36744:	CALL	L76446			; FLCOMP
L36750:	BGT	L36756
L36752:	JMP	L37236
L36756:	MOV	R5, R0
L36760:	ADD	#000102, R0
L36764:	MOV	R0, -(SP)
L36766:	MOV	R5, R0
L36770:	ADD	#000104, R0
L36774:	MOV	R0, -(SP)
L36776:	MOV	R5, R0
L37000:	ADD	#000242, R0
L37004:	MOV	R0, -(SP)
L37006:	CALL	L01030			; L57660
L37012:	MOV	#055040, -(SP)
L37016:	MOV	#000007, -(SP)
L37022:	CLR	-(SP)
L37024:	CALL	L75120			; WRSTG
L37030:	MOV	000102(R5), -(SP)
L37034:	CLR	-(SP)
L37036:	CALL	L74562			; WRNM
L37042:	MOV	#055050, -(SP)
L37046:	MOV	#000005, -(SP)
L37052:	CLR	-(SP)
L37054:	CALL	L75120			; WRSTG
L37060:	MOV	000104(R5), -(SP)
L37064:	CLR	-(SP)
L37066:	CALL	L74562			; WRNM
L37072:	MOV	#055056, -(SP)
L37076:	MOV	#000103, -(SP)
L37102:	CLR	-(SP)
L37104:	CALL	L75120			; WRSTG
L37110:	CALL	L73036			; RDNM
L37114:	MOV	(SP)+, 000102(R5)
L37120:	CALL	L72760			; RDLN
L37124:	MOV	000102(R5), -(SP)
L37130:	CALL	L75640			; $FLOAT
L37134:	CLR	-(SP)
L37136:	MOV	#041710, -(SP)
L37142:	FMUL	SP
L37144:	MOV	000244(R5), -(SP)
L37150:	MOV	000242(R5), -(SP)
L37154:	CALL	L76446			; FLCOMP
L37160:	BLT	L37166
L37162:	JMP	L37236
L37166:	MOV	000244(R5), -(SP)
L37172:	MOV	000242(R5), -(SP)
L37176:	MOV	000102(R5), -(SP)
L37202:	MOV	#000144, -(SP)		; 100.
L37206:	CALL	L76240			; DOMUL
L37212:	CALL	L75640			; $FLOAT
L37216:	FSUB	SP
L37220:	MOV	(SP)+, 000242(R5)
L37224:	MOV	(SP)+, 000244(R5)
L37230:	ADD	000102(R5), 000154(R5)
L37236:	CMP	-(SP), -(SP)
L37240:	CLR	-(SP)
L37242:	MOV	R5, R0
L37244:	ADD	#000224, R0
L37250:	MOV	R0, -(SP)
L37252:	CALL	L01004			; L57170
L37256:	MOV	(SP)+, 000346(R5)
L37262:	MOV	(SP)+, 000350(R5)
;
L37266:	MOV	000350(R5), -(SP)
L37272:	MOV	000346(R5), -(SP)
L37276:	MOV	#146315, -(SP)
L37302:	MOV	#037314, -(SP)
L37306:	CALL	L76446			; FLCOMP
L37312:	BLT	L37320
L37314:	JMP	L37346
L37320:	MOV	#055162, -(SP)
L37324:	MOV	#000053, -(SP)
L37330:	CLR	-(SP)
L37332:	CALL	L75120			; WRSTG
L37336:	CALL	L74452			; WRLN
L37342:	JMP	L41454
L37346:	CLR	-(SP)
L37350:	MOV	000156(R5), -(SP)
L37354:	CALL	L75640			; $FLOAT
L37360:	CMP	-(SP), -(SP)
L37362:	CLR	-(SP)
L37364:	MOV	R5, R0
L37366:	ADD	#000224, R0
L37372:	MOV	R0, -(SP)
L37374:	CALL	L01004			; L57170
L37400:	CLR	-(SP)			; 0.5 float const
L37402:	MOV	#040000, -(SP)
L37406:	FADD	SP
L37410:	FMUL	SP
L37412:	CALL	L01044
L37416:	MOV	(SP)+, R0
L37420:	MOV	R0, 000156(R5)
L37424:	MOV	000154(R5), -(SP)
L37430:	CALL	L75640			; $FLOAT
L37434:	MOV	000156(R5), -(SP)
L37440:	CALL	L75640			; $FLOAT
L37444:	FDIV	SP
L37446:	MOV	(SP)+, 000346(R5)
L37452:	MOV	(SP)+, 000350(R5)
L37456:	MOV	#055236, -(SP)
L37462:	MOV	#000230, -(SP)
L37466:	CLR	-(SP)
L37470:	CALL	L75120			; WRSTG
L37474:	MOV	000154(R5), -(SP)
L37500:	CLR	-(SP)
L37502:	CALL	L74562			; WRNM
L37506:	MOV	#055470, -(SP)
L37512:	MOV	#000056, -(SP)
L37516:	CLR	-(SP)
L37520:	CALL	L75120			; WRSTG
L37524:	MOV	000156(R5), -(SP)
L37530:	CLR	-(SP)
L37532:	CALL	L74562			; WRNM
L37536:	MOV	#055550, -(SP)
L37542:	MOV	#000007, -(SP)
L37546:	CLR	-(SP)
L37550:	CALL	L75120			; WRSTG
L37554:	CALL	L74452			; WRLN
L37560:	MOV	000350(R5), -(SP)
L37564:	MOV	000346(R5), -(SP)
L37570:	MOV	#000001, -(SP)
L37574:	CALL	L75640			; $FLOAT
L37600:	CALL	L76446			; FLCOMP
L37604:	BGT	L37612
L37606:	JMP	L37640
L37612:	MOV	#055560, -(SP)
L37616:	MOV	#000045, -(SP)
L37622:	CLR	-(SP)
L37624:	CALL	L75120			; WRSTG
L37630:	CALL	L74452			; WRLN
L37634:	JMP	L37662
L37640:	MOV	#055626, -(SP)
L37644:	MOV	#000045, -(SP)
L37650:	CLR	-(SP)
L37652:	CALL	L75120			; WRSTG
L37656:	CALL	L74452			; WRLN
L37662:	TST	000102(R5)
L37666:	BNE	L37674
L37670:	JMP	L40132
L37674:	CMP	-(SP), -(SP)
L37676:	CLR	-(SP)
L37700:	MOV	R5, R0
L37702:	ADD	#000224, R0
L37706:	MOV	R0, -(SP)
L37710:	CALL	L01004			; L57170
L37714:	MOV	(SP)+, 000346(R5)
L37720:	MOV	(SP)+, 000350(R5)
L37724:	MOV	000350(R5), -(SP)
L37730:	MOV	000346(R5), -(SP)
L37734:	MOV	#146315, -(SP)
L37740:	MOV	#037314, -(SP)
L37744:	CALL	L76446			; FLCOMP
L37750:	BLT	L37756
L37752:	JMP	L40132
L37756:	MOV	000102(R5), -(SP)
L37762:	CALL	L75640			; $FLOAT
L37766:	CMP	-(SP), -(SP)
L37770:	CLR	-(SP)
L37772:	MOV	R5, R0
L37774:	ADD	#000224, R0
L40000:	MOV	R0, -(SP)
L40002:	CALL	L01004			; L57170
L40006:	FMUL	SP
L40010:	CALL	L75746			; ROUND
L40014:	MOV	(SP)+, 000104(R5)
L40020:	TST	000104(R5)
L40024:	BGT	L40032
L40026:	JMP	L40132
L40032:	MOV	#055674, -(SP)
L40036:	MOV	#000021, -(SP)
L40042:	CLR	-(SP)
L40044:	CALL	L75120			; WRSTG
L40050:	MOV	000104(R5), -(SP)
L40054:	CLR	-(SP)
L40056:	CALL	L74562			; WRNM
L40062:	MOV	#055716, -(SP)
L40066:	MOV	#000045, -(SP)
L40072:	CLR	-(SP)
L40074:	CALL	L75120			; WRSTG
L40100:	CALL	L74452			; WRLN
L40104:	MOV	000154(R5), R0
L40110:	ADD	000102(R5), R0
L40114:	SUB	000104(R5), R0
L40120:	MOV	R0, 000154(R5)
L40124:	ADD	000104(R5), 000156(R5)
L40132:	MOV	000154(R5), -(SP)
L40136:	CALL	L75640			; $FLOAT
L40142:	CMP	-(SP), -(SP)
L40144:	CLR	-(SP)
L40146:	MOV	R5, R0
L40150:	ADD	#000224, R0
L40154:	MOV	R0, -(SP)
L40156:	CALL	L01004			; L57170
L40162:	MOV	#146315, -(SP)		; 0.2 float const
L40166:	MOV	#037514, -(SP)		;
L40172:	FMUL	SP
L40174:	MOV	#063146, -(SP)
L40200:	MOV	#040146, -(SP)
L40204:	FADD	SP
L40206:	FMUL	SP
L40210:	CALL	L75746			; ROUND
L40214:	MOV	(SP)+, 000154(R5)
L40220:	MOV	000156(R5), -(SP)
L40224:	CALL	L75640			; $FLOAT
L40230:	CMP	-(SP), -(SP)
L40232:	CLR	-(SP)
L40234:	MOV	R5, R0
L40236:	ADD	#000224, R0
L40242:	MOV	R0, -(SP)
L40244:	CALL	L01004			; L57170
L40250:	MOV	#146315, -(SP)		; 0.2 float const
L40254:	MOV	#037514, -(SP)		;
L40260:	FMUL	SP
L40262:	MOV	#063146, -(SP)
L40266:	MOV	#040146, -(SP)
L40272:	FADD	SP
L40274:	FMUL	SP
L40276:	CALL	L75746			; ROUND
L40302:	MOV	(SP)+, 000156(R5)
L40306:	MOV	R5, R0
L40310:	ADD	#000102, R0
L40314:	MOV	R0, -(SP)
L40316:	MOV	#000001, -(SP)
L40322:	MOV	#000454, -(SP)
L40326:	MOV	000002(SP), @000004(SP)
L40334:	CMP	@000004(SP), (SP)
L40340:	BLE	L40346
L40342:	JMP	L40400
L40346:	CLR	-(SP)			; 0.5 float const
L40350:	MOV	#040000, -(SP)
L40354:	CALL	L75240			; SIN
L40360:	MOV	(SP)+, 000346(R5)
L40364:	MOV	(SP)+, 000350(R5)
L40370:	INC	@000004(SP)
L40374:	JMP	L40334
L40400:	ADD	#000006, SP
L40404:	MOV	000244(R5), -(SP)
L40410:	MOV	000242(R5), -(SP)
L40414:	CMP	-(SP), -(SP)
L40416:	CLR	-(SP)
L40420:	MOV	R5, R0
L40422:	ADD	#000224, R0
L40426:	MOV	R0, -(SP)
L40430:	CALL	L01004			; L57170
L40434:	FMUL	SP
L40436:	MOV	(SP)+, 000346(R5)
L40442:	MOV	(SP)+, 000350(R5)
L40446:	MOV	000240(R5), -(SP)
L40452:	MOV	000236(R5), -(SP)
L40456:	CMP	-(SP), -(SP)
L40460:	CLR	-(SP)
L40462:	MOV	R5, R0
L40464:	ADD	#000224, R0
L40470:	MOV	R0, -(SP)
L40472:	CALL	L01004			; L57170
L40476:	FMUL	SP
L40500:	MOV	(SP)+, 000356(R5)
L40504:	MOV	(SP)+, 000360(R5)
L40510:	MOV	000250(R5), -(SP)
L40514:	MOV	000246(R5), -(SP)
L40520:	CMP	-(SP), -(SP)
L40522:	CLR	-(SP)
L40524:	MOV	R5, R0
L40526:	ADD	#000224, R0
L40532:	MOV	R0, -(SP)
L40534:	CALL	L01004			; L57170
L40540:	FMUL	SP
L40542:	MOV	(SP)+, 000362(R5)
L40546:	MOV	(SP)+, 000364(R5)
L40552:	MOV	000254(R5), -(SP)
L40556:	MOV	000252(R5), -(SP)
L40562:	CMP	-(SP), -(SP)
L40564:	CLR	-(SP)
L40566:	MOV	R5, R0
L40570:	ADD	#000224, R0
L40574:	MOV	R0, -(SP)
L40576:	CALL	L01004			; L57170
L40602:	FMUL	SP
L40604:	MOV	(SP)+, 000366(R5)
L40610:	MOV	(SP)+, 000370(R5)
L40614:	MOV	000260(R5), -(SP)
L40620:	MOV	000256(R5), -(SP)
L40624:	CMP	-(SP), -(SP)
L40626:	CLR	-(SP)
L40630:	MOV	R5, R0
L40632:	ADD	#000224, R0
L40636:	MOV	R0, -(SP)
L40640:	CALL	L01004			; L57170
L40644:	FMUL	SP
L40646:	MOV	(SP)+, 000372(R5)
L40652:	MOV	(SP)+, 000374(R5)
L40656:	MOV	000264(R5), -(SP)
L40662:	MOV	000262(R5), -(SP)
L40666:	CMP	-(SP), -(SP)
L40670:	CLR	-(SP)
L40672:	MOV	R5, R0
L40674:	ADD	#000224, R0
L40700:	MOV	R0, -(SP)
L40702:	CALL	L01004			; L57170
L40706:	FMUL	SP
L40710:	MOV	(SP)+, 000376(R5)
L40714:	MOV	(SP)+, 000400(R5)
L40720:	CMP	000154(R5), 000156(R5)
L40726:	BGT	L40734
L40730:	JMP	L40746
L40734:	MOV	#000001, 000120(R5)
L40742:	JMP	L40754
L40746:	MOV	#177777, 000120(R5)
L40754:	MOV	000244(R5), -(SP)
L40760:	MOV	000242(R5), -(SP)
L40764:	MOV	000350(R5), -(SP)
L40770:	MOV	000346(R5), -(SP)
L40774:	MOV	000120(R5), -(SP)
L41000:	CALL	L75640			; $FLOAT
L41004:	FMUL	SP
L41006:	FADD	SP
L41010:	MOV	(SP)+, 000242(R5)
L41014:	MOV	(SP)+, 000244(R5)
L41020:	MOV	000240(R5), -(SP)
L41024:	MOV	000236(R5), -(SP)
L41030:	MOV	000360(R5), -(SP)
L41034:	MOV	000356(R5), -(SP)
L41040:	MOV	000120(R5), -(SP)
L41044:	CALL	L75640			; $FLOAT
L41050:	FMUL	SP
L41052:	FADD	SP
L41054:	MOV	(SP)+, 000236(R5)
L41060:	MOV	(SP)+, 000240(R5)
L41064:	MOV	000250(R5), -(SP)
L41070:	MOV	000246(R5), -(SP)
L41074:	MOV	000364(R5), -(SP)
L41100:	MOV	000362(R5), -(SP)
L41104:	MOV	000120(R5), -(SP)
L41110:	CALL	L75640			; $FLOAT
L41114:	FMUL	SP
L41116:	FADD	SP
L41120:	MOV	(SP)+, 000246(R5)
L41124:	MOV	(SP)+, 000250(R5)
L41130:	MOV	000254(R5), -(SP)
L41134:	MOV	000252(R5), -(SP)
L41140:	MOV	000370(R5), -(SP)
L41144:	MOV	000366(R5), -(SP)
L41150:	MOV	000120(R5), -(SP)
L41154:	CALL	L75640			; $FLOAT
L41160:	FMUL	SP
L41162:	FADD	SP
L41164:	MOV	(SP)+, 000252(R5)
L41170:	MOV	(SP)+, 000254(R5)
L41174:	MOV	000260(R5), -(SP)
L41200:	MOV	000256(R5), -(SP)
L41204:	MOV	000374(R5), -(SP)
L41210:	MOV	000372(R5), -(SP)
L41214:	MOV	000120(R5), -(SP)
L41220:	CALL	L75640			; $FLOAT
L41224:	FMUL	SP
L41226:	FADD	SP
L41230:	MOV	(SP)+, 000256(R5)
L41234:	MOV	(SP)+, 000260(R5)
L41240:	MOV	000264(R5), -(SP)
L41244:	MOV	000262(R5), -(SP)
L41250:	MOV	000400(R5), -(SP)
L41254:	MOV	000376(R5), -(SP)
L41260:	MOV	000120(R5), -(SP)
L41264:	CALL	L75640			; $FLOAT
L41270:	FMUL	SP
L41272:	FADD	SP
L41274:	MOV	(SP)+, 000262(R5)
L41300:	MOV	(SP)+, 000264(R5)
L41304:	CMP	000154(R5), 000156(R5)
L41312:	BGT	L41320
L41314:	JMP	L41346
L41320:	MOV	#055764, -(SP)
L41324:	MOV	#000050, -(SP)
L41330:	CLR	-(SP)
L41332:	CALL	L75120			; WRSTG
L41336:	CALL	L74452			; WRLN
L41342:	JMP	L41370
L41346:	MOV	#056036, -(SP)
L41352:	MOV	#000047, -(SP)
L41356:	CLR	-(SP)
L41360:	CALL	L75120			; WRSTG
L41364:	CALL	L74452			; WRLN
L41370:	MOV	000350(R5), -(SP)
L41374:	MOV	000346(R5), -(SP)
L41400:	MOV	000360(R5), -(SP)
L41404:	MOV	000356(R5), -(SP)
L41410:	MOV	000364(R5), -(SP)
L41414:	MOV	000362(R5), -(SP)
L41420:	MOV	000370(R5), -(SP)
L41424:	MOV	000366(R5), -(SP)
L41430:	MOV	000374(R5), -(SP)
L41434:	MOV	000372(R5), -(SP)
L41440:	MOV	000400(R5), -(SP)
L41444:	MOV	000376(R5), -(SP)
L41450:	CALL	L01034
L41454:	MOV	#056106, -(SP)
L41460:	MOV	#000041, -(SP)
L41464:	CLR	-(SP)
L41466:	CALL	L75120			; WRSTG
L41472:	CALL	L73036			; RDNM
L41476:	MOV	(SP)+, 000102(R5)
L41502:	CALL	L72760			; RDLN
L41506:	CMP	000102(R5), #000001
L41514:	BEQ	L41522
L41516:	JMP	L42154
L41522:	MOV	000244(R5), -(SP)
L41526:	MOV	000242(R5), -(SP)
L41532:	MOV	#001750, -(SP)
L41536:	CALL	L75640			; $FLOAT
L41542:	CALL	L76446			; FLCOMP
L41546:	BGT	L41554
L41550:	JMP	L42150
L41554:	MOV	#056150, -(SP)
L41560:	MOV	#000047, -(SP)
L41564:	CLR	-(SP)
L41566:	CALL	L75120			; WRSTG
L41572:	CALL	L73036			; RDNM
L41576:	MOV	(SP)+, 000102(R5)
L41602:	CALL	L72760			; RDLN
L41606:	CMP	000102(R5), #000001
L41614:	BEQ	L41622
L41616:	JMP	L42150
L41622:	MOV	R5, R0
L41624:	ADD	#000102, R0
L41630:	MOV	R0, -(SP)
L41632:	MOV	R5, R0
L41634:	ADD	#000104, R0
L41640:	MOV	R0, -(SP)
L41642:	MOV	R5, R0
L41644:	ADD	#000242, R0
L41650:	MOV	R0, -(SP)
L41652:	CALL	L01030			; L57660
L41656:	MOV	#056220, -(SP)
L41662:	MOV	#000013, -(SP)
L41666:	CLR	-(SP)
L41670:	CALL	L75120			; WRSTG
L41674:	MOV	000102(R5), -(SP)
L41700:	CLR	-(SP)
L41702:	CALL	L74562			; WRNM
L41706:	MOV	#056234, -(SP)
L41712:	MOV	#000005, -(SP)
L41716:	CLR	-(SP)
L41720:	CALL	L75120			; WRSTG
L41724:	MOV	000104(R5), -(SP)
L41730:	CLR	-(SP)
L41732:	CALL	L74562			; WRNM
L41736:	MOV	#056242, -(SP)
L41742:	MOV	#000035, -(SP)
L41746:	CLR	-(SP)
L41750:	CALL	L75120			; WRSTG
L41754:	CALL	L73272			; RDRL
L41760:	MOV	(SP)+, 000346(R5)
L41764:	MOV	(SP)+, 000350(R5)
L41770:	CALL	L72760			; RDLN
L41774:	MOV	000320(R5), -(SP)
L42000:	MOV	000316(R5), -(SP)
L42004:	MOV	000350(R5), -(SP)
L42010:	MOV	000346(R5), -(SP)
L42014:	MOV	000260(R5), -(SP)
L42020:	MOV	000256(R5), -(SP)
L42024:	FDIV	SP
L42026:	CLR	-(SP)
L42030:	MOV	#041710, -(SP)
L42034:	FDIV	SP
L42036:	FSUB	SP
L42040:	MOV	(SP)+, 000316(R5)
L42044:	MOV	(SP)+, 000320(R5)
L42050:	MOV	000320(R5), -(SP)
L42054:	MOV	000316(R5), -(SP)
L42060:	CLR	-(SP)
L42062:	CALL	L75640			; $FLOAT
L42066:	CALL	L76446			; FLCOMP
L42072:	BLT	L42100
L42074:	JMP	L42116
L42100:	CLR	-(SP)
L42102:	CALL	L75640			; $FLOAT
L42106:	MOV	(SP)+, 000316(R5)
L42112:	MOV	(SP)+, 000320(R5)
L42116:	MOV	000244(R5), -(SP)
L42122:	MOV	000242(R5), -(SP)
L42126:	MOV	000350(R5), -(SP)
L42132:	MOV	000346(R5), -(SP)
L42136:	FSUB	SP
L42140:	MOV	(SP)+, 000242(R5)
L42144:	MOV	(SP)+, 000244(R5)
L42150:	JMP	L42164
; GOTO LABEL 8
L42154:	MOV	L70056, SP		; $RESR6
L42160:	JMP	L42230
;
L42164:	INC	000172(R5)		; Год правления
L42170:	INC	000174(R5)		; Номер года правления
L42174:	CMP	000174(R5), 000176(R5)
L42202:	BGT	L42210
L42204:	JMP	L42220
; GOTO LABEL 8
L42210:	MOV	L70056, SP		; $RESR6
L42214:	JMP	L42230
; GOTO LABEL 0
L42220:	MOV	L70056, SP		; $RESR6
L42224:	JMP	L02512
; LABEL 8
; IF
L42230:	CMP	000174(R5), 000176(R5)	; Номер года правления
L42236:	BGT	L42244
L42240:	JMP	L42272
L42244:	MOV	#056300, -(SP)
L42250:	MOV	#000053, -(SP)
L42254:	CLR	-(SP)
L42256:	CALL	L75120			; WRSTG
L42262:	CALL	L74452			; WRLN
L42266:	DEC	000174(R5)		; Номер года правления
L42272:	MOV	000174(R5), -(SP)
L42276:	MOV	#000012, -(SP)
L42302:	CALL	L76240			; DOMUL
L42306:	MOV	(SP)+, 000150(R5)
L42312:	CLR	-(SP)
L42314:	MOV	000244(R5), -(SP)
L42320:	MOV	000242(R5), -(SP)
L42324:	MOV	#001750, -(SP)
L42330:	CALL	L75640			; $FLOAT
L42334:	FDIV	SP
L42336:	CALL	L01044
L42342:	MOV	(SP)+, R0
L42344:	MOV	R0, 000100(R5)
L42350:	CLR	-(SP)
L42352:	MOV	000240(R5), -(SP)
L42356:	MOV	000236(R5), -(SP)
L42362:	CALL	L01044
L42366:	MOV	(SP)+, R0
L42370:	MOV	R0, 000102(R5)
L42374:	CLR	-(SP)
L42376:	MOV	000250(R5), -(SP)
L42402:	MOV	000246(R5), -(SP)
L42406:	MOV	#000012, -(SP)
L42412:	CALL	L75640			; $FLOAT
L42416:	FDIV	SP
L42420:	CALL	L01044
L42424:	MOV	(SP)+, R0
L42426:	MOV	R0, 000104(R5)
L42432:	CLR	-(SP)
L42434:	MOV	000250(R5), -(SP)
L42440:	MOV	000246(R5), -(SP)
L42444:	CALL	L01044
L42450:	MOV	(SP)+, R0
L42452:	MOV	R0, 000152(R5)
L42456:	CLR	-(SP)
L42460:	MOV	000254(R5), -(SP)
L42464:	MOV	000252(R5), -(SP)
L42470:	MOV	#000144, -(SP)		; 100.
L42474:	CALL	L75640			; $FLOAT
L42500:	FDIV	SP
L42502:	CALL	L01044
L42506:	MOV	(SP)+, R0
L42510:	MOV	R0, 000106(R5)
L42514:	CLR	-(SP)
L42516:	MOV	000254(R5), -(SP)
L42522:	MOV	000252(R5), -(SP)
L42526:	CALL	L01044
L42532:	MOV	(SP)+, R0
L42534:	MOV	R0, 000154(R5)
L42540:	CLR	-(SP)
L42542:	MOV	000260(R5), -(SP)
L42546:	MOV	000256(R5), -(SP)
L42552:	MOV	#000012, -(SP)
L42556:	CALL	L75640			; $FLOAT
L42562:	FDIV	SP
L42564:	CALL	L01044
L42570:	MOV	(SP)+, R0
L42572:	MOV	R0, 000110(R5)
L42576:	CLR	-(SP)
L42600:	MOV	000260(R5), -(SP)
L42604:	MOV	000256(R5), -(SP)
L42610:	CALL	L01044
L42614:	MOV	(SP)+, R0
L42616:	MOV	R0, 000156(R5)
L42622:	CLR	-(SP)
L42624:	MOV	000264(R5), -(SP)
L42630:	MOV	000262(R5), -(SP)
L42634:	MOV	#000005, -(SP)
L42640:	CALL	L75640			; $FLOAT
L42644:	FDIV	SP
L42646:	CALL	L01044
L42652:	MOV	(SP)+, R0
L42654:	MOV	R0, 000112(R5)
L42660:	CLR	-(SP)
L42662:	MOV	000264(R5), -(SP)
L42666:	MOV	000262(R5), -(SP)
L42672:	CALL	L01044
L42676:	MOV	(SP)+, R0
L42700:	MOV	R0, 000160(R5)
L42704:	MOV	000214(R5), -(SP)
L42710:	MOV	#000144, -(SP)		; 100.
L42714:	CALL	L76240			; DOMUL
L42720:	MOV	(SP)+, 000114(R5)
L42724:	MOV	000212(R5), R0
L42730:	NEG	R0
L42732:	MOV	R0, 000116(R5)
L42736:	CLR	-(SP)
L42740:	MOV	000320(R5), -(SP)
L42744:	MOV	000316(R5), -(SP)
L42750:	MOV	#000144, -(SP)		; 100.
L42754:	CALL	L75640			; $FLOAT
L42760:	FMUL	SP
L42762:	CALL	L01044
L42766:	MOV	(SP)+, R0
L42770:	NEG	R0
L42772:	MOV	R0, 000120(R5)
L42776:	MOV	000150(R5), R0
L43002:	ADD	000100(R5), R0
L43006:	ADD	000102(R5), R0
L43012:	ADD	000104(R5), R0
L43016:	ADD	000106(R5), R0
L43022:	ADD	000110(R5), R0
L43026:	ADD	000112(R5), R0
L43032:	ADD	000114(R5), R0
L43036:	ADD	000116(R5), R0
L43042:	ADD	000120(R5), R0
L43046:	MOV	R0, 000122(R5)
L43052:	MOV	#056354, -(SP)
L43056:	MOV	#000171, -(SP)
L43062:	CLR	-(SP)
L43064:	CALL	L75120			; WRSTG
L43070:	MOV	000174(R5), -(SP)	; Номер года правления
L43074:	CLR	-(SP)
L43076:	CALL	L74562			; WRNM
L43102:	MOV	000150(R5), -(SP)
L43106:	CLR	-(SP)
L43110:	CALL	L74562			; WRNM
L43114:	MOV	#056546, -(SP)
L43120:	MOV	#000023, -(SP)
L43124:	CLR	-(SP)
L43126:	CALL	L75120			; WRSTG
L43132:	MOV	000100(R5), -(SP)
L43136:	CLR	-(SP)
L43140:	CALL	L74562			; WRNM
L43144:	MOV	000100(R5), -(SP)
L43150:	CLR	-(SP)
L43152:	CALL	L74562			; WRNM
L43156:	MOV	#056572, -(SP)
L43162:	MOV	#000023, -(SP)
L43166:	CLR	-(SP)
L43170:	CALL	L75120			; WRSTG
L43174:	MOV	000102(R5), -(SP)
L43200:	CLR	-(SP)
L43202:	CALL	L74562			; WRNM
L43206:	MOV	000102(R5), -(SP)
L43212:	CLR	-(SP)
L43214:	CALL	L74562			; WRNM
L43220:	MOV	#056616, -(SP)
L43224:	MOV	#000024, -(SP)
L43230:	CLR	-(SP)
L43232:	CALL	L75120			; WRSTG
L43236:	MOV	000152(R5), -(SP)
L43242:	CLR	-(SP)
L43244:	CALL	L74562			; WRNM
L43250:	MOV	000104(R5), -(SP)
L43254:	CLR	-(SP)
L43256:	CALL	L74562			; WRNM
L43262:	MOV	#056644, -(SP)
L43266:	MOV	#000025, -(SP)
L43272:	CLR	-(SP)
L43274:	CALL	L75120			; WRSTG
L43300:	MOV	000154(R5), -(SP)
L43304:	CLR	-(SP)
L43306:	CALL	L74562			; WRNM
L43312:	MOV	000106(R5), -(SP)
L43316:	CLR	-(SP)
L43320:	CALL	L74562			; WRNM
L43324:	MOV	#056672, -(SP)
L43330:	MOV	#000026, -(SP)
L43334:	CLR	-(SP)
L43336:	CALL	L75120			; WRSTG
L43342:	MOV	000156(R5), -(SP)
L43346:	CLR	-(SP)
L43350:	CALL	L74562			; WRNM
L43354:	MOV	000110(R5), -(SP)
L43360:	CLR	-(SP)
L43362:	CALL	L74562			; WRNM
L43366:	MOV	#056722, -(SP)
L43372:	MOV	#000027, -(SP)
L43376:	CLR	-(SP)
L43400:	CALL	L75120			; WRSTG
L43404:	MOV	000160(R5), -(SP)
L43410:	CLR	-(SP)
L43412:	CALL	L74562			; WRNM
L43416:	MOV	000112(R5), -(SP)
L43422:	CLR	-(SP)
L43424:	CALL	L74562			; WRNM
L43430:	MOV	#056752, -(SP)
L43434:	MOV	#000030, -(SP)
L43440:	CLR	-(SP)
L43442:	CALL	L75120			; WRSTG
L43446:	MOV	000214(R5), -(SP)
L43452:	CLR	-(SP)
L43454:	CALL	L74562			; WRNM
L43460:	MOV	000114(R5), -(SP)
L43464:	CLR	-(SP)
L43466:	CALL	L74562			; WRNM
L43472:	MOV	#057004, -(SP)
L43476:	MOV	#000024, -(SP)
L43502:	CLR	-(SP)
L43504:	CALL	L75120			; WRSTG
L43510:	MOV	000212(R5), -(SP)
L43514:	CLR	-(SP)
L43516:	CALL	L74562			; WRNM
L43522:	MOV	000116(R5), -(SP)
L43526:	CLR	-(SP)
L43530:	CALL	L74562			; WRNM
L43534:	MOV	#057032, -(SP)
L43540:	MOV	#000024, -(SP)
L43544:	CLR	-(SP)
L43546:	CALL	L75120			; WRSTG
L43552:	MOV	000120(R5), R0
L43556:	NEG	R0
L43560:	MOV	R0, -(SP)
L43562:	CLR	-(SP)
L43564:	CALL	L74562			; WRNM
L43570:	MOV	000120(R5), -(SP)
L43574:	CLR	-(SP)
L43576:	CALL	L74562			; WRNM
L43602:	MOV	#057060, -(SP)
L43606:	MOV	#000075, -(SP)
L43612:	CLR	-(SP)
L43614:	CALL	L75120			; WRSTG
L43620:	MOV	000122(R5), -(SP)
L43624:	CLR	-(SP)
L43626:	CALL	L74562			; WRNM
L43632:	MOV	#057156, -(SP)
L43636:	MOV	#000010, -(SP)
L43642:	CLR	-(SP)
L43644:	CALL	L75120			; WRSTG
L43650:	CALL	L74452			; WRLN
; FOR
L43654:	MOV	R5, R0
L43656:	ADD	#000216, R0
L43662:	MOV	R0, -(SP)
L43664:	MOV	#000001, -(SP)
L43670:	MOV	#000012, -(SP)
L43674:	MOV	000002(SP), @000004(SP)
L43702:	CMP	@000004(SP), (SP)
L43706:	BLE	L43714
L43710:	JMP	L44012
;
L43714:	MOV	000216(R5), R0
L43720:	CMP	R0, #000001
L43724:	BLT	L43734
L43726:	CMP	R0, #000014
L43732:	BLE	L43740
L43734:	CALL	L76440			; $B125
L43740:	ASL	R0
L43742:	ADD	R5, R0
L43744:	MOV	000216(R5), R1
L43750:	CMP	R1, #000001
L43754:	BLT	L43764
L43756:	CMP	R1, #000012
L43762:	BLE	L43770
L43764:	CALL	L76440			; $B125
L43770:	ADD	R5, R1
L43772:	MOVB	000027(R1), R1
L43776:	MOV	R1, 177776(R0)
L44002:	INC	@000004(SP)
L44006:	JMP	L43702
L44012:	ADD	#000006, SP
;
L44016:	MOV	000122(R5), 000024(R5)
L44024:	MOV	000174(R5), 000026(R5)	; Номер года правления
L44032:	MOV	R5, -(SP)		; базовый адрес блока переменных
L44034:	CALL	L01000			; L65754 - работа с KING.DAT
L44040:	JMP	L70026			; $END
;
L44044:	.ASCIZ	<016>/k o r o l e w s t w o   | j f o r i q/<000>
L44114:	.ASCIZ	/==> skolxko let wy sobiraetesx prawitx ?/<000>
L44166:	.ASCIZ	/==> wa{ psewdonim ? /<000>
L44214:	.ASCIZ	/ t o r g o w l q  -  d w i g a t e l x   p r o g r e s s a/<000>
L44310:	.ASCIZ	/   ~   p    !    | k o n o m i ~ e s k a q   b l o k a d a/<000>
L44404:	.ASCIZ	<015><012>/     makler prosit :/<000>
L44434:	.ASCIZ	/ tysq~/<000>
L44444:	.ASCIZ	/ rublej/<015><012>"==> velaete ispolxzowatx maklera ? (0/1)"
L44526:	.ASCIZ	/ zoloto,/<000>
L44540:	.ASCIZ	/ zeml`,/
L44550:	.ASCIZ	/ hleb,/<000>
L44560:	.ASCIZ	/ rabo~ih,/
L44572:	.ASCIZ	/ soldat/
L44602:	.ASCIZ	" predlaga` wygodno prodatx. soglasny ? (0/1) "
L44660:	.ASCIZ	<015><012>/  w kazne/
L44674:	.ASCIZ	/ t./
L44700:	.ASCIZ	/ rublej ( iskl`~aq valowanie )/<015><012>/==> skolxko deneg wy rashoduete na optowu` zakupku ? /
L45026:	.ASCIZ	/ zerno,/
L45036:	.ASCIZ	/ zoloto/
L45046:	.ASCIZ	/ zeml`/<000>
L45056:	.ASCIZ	" predlaga` wygodno kupitx. soglasny ? (0/1) "<000>
L45134:	.ASCIZ	"==> velaete sami torgowatx ? (0/1) "
L45200:	.ASCIZ	<016>"           (+) pokupajte / prodawajte (-) :"<000>
L45256:	.ASCIZ	/  zoloto(kg),zemlq(ga),zerno(t),rabo~ie,soldaty(~el)?/
L45344:	.ASCIZ	/==> /<000>
L45352:	.ASCIZ	/  wy prodaete towara bolx{e, ~em u was estx !/<015><012>"==> powtoritx ? (0/1) "
L45460:	.ASCIZ	/  sdelka rastorgnuta - nehwataet/<000>
L45522:	.ASCIZ	/ tys./
L45530:	.ASCIZ	/ rub./<015><012>"==> powtoritx ? (0/1) "
L45566:	.ASCIZ	"==> velaete sami rasporqditxsq zapasami zerna ? (0/1) "<000>
L45656:	.ASCIZ	/--->  wydelena norma :/<000>
L45706:	.ASCIZ	/ t. zerna/
L45720:	.ASCIZ	/  izli{ki zerna w ambarah :/
L45754:	.ASCIZ	/ tonn./<000>
L45764:	.ASCIZ	/==> skolxko tonn zerna na edu, skolxko na posew ? /<000>
L46050:	.ASCIZ	/  razberitesx! nehwataet/<000>
L46102:	.ASCIZ	/ tonn zerna./<000>
L46120:	.ASCIZ	/  ostatok zerna w ambarah/
L46152:	.ASCIZ	/ tonn./<000>
L46162:	.ASCIZ	/ n a r o d  w  o  s  s  t  a  l  ! ! !/<000>
L46232:	.ASCIZ	/ wy  z a m o r i l i  swoj narod golodom./
L46304:	.ASCIZ	"==> wa{e wyso~estwo! pribyl wizirx, wpustitx ? (0/1) "
L46372:	.ASCIZ	<015><012>/   valowanie soldat :/
L46422:	.ASCIZ	/ tys./
L46430:	.ASCIZ	/ rublej/<015><012>/  ---------------------------------------------------------------/<000>
L46544:	.ASCIZ	/  t a j n a q  k a n c e l q r i q  soob}aet :/<000>
L46624:	.ASCIZ	/  w narode/<000>
L46640:	.ASCIZ	/ procentow zagowor}ikow !!/<000>
L46674:	.ASCIZ	/  polovenie  o ~ e n x  opasnoe, wozmoven pereworot./<000>
L46762:	.ASCIZ	/  polovenie opasnoe, sdelajte }edru` poda~ku./
L47040:	.ASCIZ	/  w narode golod, rastet nedowolxstwo./<000>
L47110:	.ASCIZ	/  narod dowolen, wysok awtoritet wa{ego weli~estwa./
L47174:	.ASCIZ	/  -  krysy sovrali/<000>
L47220:	.ASCIZ	/ tonn zerna./<000>
L47236:	.ASCIZ	/  -  stra{naq  z a s u h a  porazila posewy./<000>
L47314:	.ASCIZ	/  -  gigantskie  p o v a r y  pogubili urovaj./<000>
L47374:	.ASCIZ	/ -  u r o v a j n y j   g o d/
L47432:	.ASCIZ	/  - rabo~im nehwataet zemli. sbevalo/<000>
L47500:	.ASCIZ	/ ~elowek./
L47512:	.ASCIZ	/  - gwardiq ne polu~ila denevnogo dowolxstwiq,/<015><012>/   /
L47576:	.ASCIZ	/ soldat pokinuli kazarmy i u{li za kordon./<000>
L47652:	.ASCIZ	/  - wy zamorili golodom/
L47702:	.ASCIZ	/ wa{ih wernopoddannyh !/
L47732:	.ASCIZ	/  - s k a n d a l !!! ukradeno/<000>
L47772:	.ASCIZ	/ kg zolota !!!/<000>
L50012:	.ASCIZ	/  - wa{  k a r a w a n  ograblen na/
L50056:	.ASCIZ	/ rublej./<000>
L50070:	.ASCIZ	/  - p o z o r ! ! !  iz hrama ukrali/<000>
L50136:	.ASCIZ	/ rublej./<000>
L50150:	.ASCIZ	/  - w gosudarstwe rodilosx/<000>
L50204:	.ASCIZ	/ detej./
L50214:	.ASCIZ	/  - wizirx  u k r a l  /
L50244:	.ASCIZ	/ tys./
L50252:	.ASCIZ	/ rub. i skrylsq !!!/
L50276:	.ASCIZ	/  - |pidemiq  ~ u m y  pogubila/
L50336:	.ASCIZ	/ rabo~ih./
L50350:	.ASCII	<015><012>/ mitropolit wa{ego gosudarstwa ovidaet sredstw dlq postrojki/
	.ASCII	<015><012>/            n o w o g o        h r a m a/
	.ASCIZ	<015><012>/  /<015><012>/ ==> w kazne/<000>
L50544:	.ASCIZ	/ tysq~/<000>
L50554:	.ASCIZ	/ rublej. skolxko wydelqete ? /
L50612:	.ASCIZ	/u was net stolxko deneg!/<000>
L50644:	.ASCIZ	/wy ~to nasmehaetesx ?! skrqga !!!/
L50706:	.ASCIZ	/wy ~rezmerno skupy wa{e weli~estwo !/<000>
L50754:	.ASCIZ	/slawa korol`, }edromu i mudromu prawitel` !!!/
L51032:	.ASCIZ	/wo wseh hramah sluvat zdrawnicu welikomu korol`./<000>
L51114:	.ASCIZ	/wsewy{nij blagoslowit wa{e prawlenie na dolgie gody./<000>
L51202:	.ASCIZ	/ -=-   w o z d w i g n u t  h r a m   -=-/
L51254:	.ASCIZ	"==> pribyl gonec s izwestiqmi, wpustitx ? (0/1) "<000>
L51336:	.ASCII	<015><012>/--->        w e r n u l s q   k a r a w a n /<015><012>/ /
	.ASCIZ	<015><012>/  ot torgowli polu~ena pribylx/
L51460:	.ASCIZ	/ tysq~/<000>
L51470:	.ASCIZ	/ rublej./<000>
L51502:	.ASCIZ	/karawan   r a z g r a b l e n   p i r a t a m i !/
L51564:	.ASCII	<015><012>/zamorskij kupec predlagaet snarqditx karawan./
	.ASCIZ	<015><012>"==> wy soglasny ? (0/1) "
L51676:	.ASCIZ	/w kazne/
L51706:	.ASCIZ	/ tysq~/<000>
L51716:	.ASCIZ	/ rublej. skolxko w karawan ? /
L51754:	.ASCIZ	/karawan otprawilsq za tridewqtx zemelx /
L52024:	.ASCIZ	/karawan u{el w dalxnie strany bez wa{ih towarow./<000>
L52106:	.ASCIZ	/---> wam dostalosx nasledstwo :/
L52146:	.ASCIZ	/---> imperator swataet do~x, pridannoe newesty:/
L52226:	.ASCIZ	"==> wy soglasny ? (0/1) "<000>
L52260:	.ASCIZ	/swadebnye rashody :/
L52304:	.ASCIZ	/ tysq~/<000>
L52314:	.ASCIZ	/ rublej./<000>
L52326:	.ASCIZ	/oskorblenie !  v d i t e   w o j n y  !/
L52376:	.ASCIZ	/  u   was   r o d i l/
L52424:	.ASCIZ	/ s q   s y n  !/
L52444:	.ASCIZ	/ a s x   do~x  !/<000>
L52466:	.ASCIZ	/na torvestwennyj pir potra~eno :/<000>
L52530:	.ASCIZ	/ tysq~/<000>
L52540:	.ASCIZ	/ rublej./<000>
L52552:	.ASCIZ	"==> k wam pribyl sluga korolewy. wpustitx ? (0/1) "<000>
L52636:	.ASCIZ	/k o r o l e w a   na was obidelasx !/<000>
L52704:	.ASCII	/ /<015><012>/       -   u m e r l a   k o r o l e w a   -/
	.ASCIZ	<015><012>/  /<015><012>/      na pohorony potra~eno/<000>
L53026:	.ASCIZ	/ tysq~/<000>
L53036:	.ASCIZ	/ rublej./<000>
L53050:	.ASCIZ	<015><012>/korolewa prosit na narqdy/
L53104:	.ASCIZ	/ tysq~/<000>
L53114:	.ASCIZ	/ rublej./<015><012>"==> kazna~e` wydatx denxgi ? (0/1) "
L53172:	.ASCIZ	/korolewa   b l a g o d a r i t   w a s   ! ! !/<000>
L53252:	.ASCIZ	/korolewa nikogda ne rodit wam   s y n a  !/<000>
L53326:	.ASCIZ	/ /<015><012>/  w y   z a b o l e l i  !/<015><012>/  zamorskij lekarx trebuet za le~enie/<000>
L53434:	.ASCIZ	/ tysq~/<000>
L53444:	.ASCIZ	/ rublej. /<015><012>"==> wy budete le~itxsq ? (0/1) "<000>
L53520:	.ASCIZ	<015><012>/wam stalo  h u v e , na lekarstwa trebuetsq/
L53576:	.ASCIZ	/ tys./
L53604:	.ASCIZ	/ rub./<015><012>"p o k u p a e t e   l e k a r s t w a ? (0/1) "
L53672:	.ASCII	<015><012>/ w y  p r i s m e r t i  -  koldun movet wyle~itx was,  n o  on trebuet/
	.ASCII	<015><012>/  za le~enie - polowinu zolota iz wa{ej sokrowi}nicy!/
	.ASCIZ	" soglasny ? (0/1) "<000>
L54116:	.ASCIZ	/k o r o l x  u m e r ! ! !/<000>
L54152:	.ASCIZ	/s y n   k o r o n o w a n ,  c a r s t w u j t e !/<000>
L54236:	.ASCII	/ /<015><012>/              -  w o z m o v n a   w o j n a  -/
	.ASCII	<015><012>/  /<015><012>/==> ob"qwlqete wseob}u` mobilizaci` ? /
	.ASCIZ  "(0/1) "<000>
L54404:	.ASCIZ	/w narode rastet nedowolxstwo!/
L54442:	.ASCIZ	/ /<015><012>/ w a { a    a r m i q         :/<000>
L54506:	.ASCII	/ soldat. /<015><012>/ --------------------------------------------/
	.ASCIZ	<015><012>/ p r o t i w n i k  (razwedka):/
L54640:	.ASCIZ	/ soldat./<000>
L54652:	.ASCII	<015><012>/    polovenie opasnoe, wizirx sowetuet prodatx zoloto/
	.ASCIZ	<015><012>"==> rostow}ik soglasen datx polowinu ceny, soglasny ? (0/1) "
L55040:	.ASCIZ	/w kazne/
L55050:	.ASCIZ	/ tys./
L55056:	.ASCIZ	/ rublej./<015><012>/==> skolxko hotite wzqtx naemnikow (naemnik - 100 rub) ? /
L55162:	.ASCIZ	/zakl`~en   m i r n y j   d o g o w o r  !!!/
L55236:	.ASCII	<015><012>/           n a ~ a t y   w o e n n y e   d e j s t i q ./
	.ASCII	<015><012>/           -------------------------------------------/
	.ASCIZ	<015><012>/           w wernyh korol` wojskah: /<000>
L55470:	.ASCIZ	/ soldat /<015><012>/           u wa{ego protiwnika    : /<000>
L55550:	.ASCIZ	/ soldat/
L55560:	.ASCIZ	/---> weroqtno wa{a armiq pobedit ..../
L55626:	.ASCIZ	/---> |ksperty proro~at poravenie ..../
L55674:	.ASCIZ	/i z m e n a ! ! !/
L55716:	.ASCIZ	/ naemnikow pere{li na storonu wraga !/
L55764:	.ASCIZ	/ /<015><012>/       p  o  b  e  d  a . zahwa~eno :/<000>
L56036:	.ASCIZ	<015><012>/       p o r a v e n i e . utra~eno :/
L56106:	.ASCIZ	"==> wstre~aete nowyj god ? (0/1) "
L56150:	.ASCIZ	"==> ustraiwaete nowogodnij bal ? (0/1) "
L56220:	.ASCIZ	/==> w kazne/
L56234:	.ASCIZ	/ tys./
L56242:	.ASCIZ	/ rub. skolxko na rovdestwo ? /
L56300:	.ASCIZ	<015><012>/      -   w a {   s r o k   i s t e k   -/
L56354:	.ASCII	/ /<015><012>/ c e n n o s t i     k o l - w o       b a l l y /
	.ASCIZ	<015><012>/ -----------------------------------------------/<015><012>/  srok   ( let  )/
L56546:	.ASCIZ	<015><012>/  kapital( tys. )/
L56572:	.ASCIZ	<015><012>/  zoloto (  kg  )/
L56616:	.ASCIZ	/ /<015><012>/  zemlq  (  ga  )/<000>
L56644:	.ASCIZ	/  /<015><012>/  zerno  ( tonn )/
L56672:	.ASCIZ	/   /<015><012>/  rabo~ie( ~el. )/<000>
L56722:	.ASCIZ	/    /<015><012>/  gwardiq( sol. )/
L56752:	.ASCIZ	/     /<015><012>/  hramy  ( {tuk )/<000>
L57004:	.ASCIZ	/ /<015><012>/  umerlo rabo~ih:/<000>
L57032:	.ASCIZ	/ /<015><012>/  gnew naroda   :/<000>
L57060:	.ASCIZ	<015><012>/  ---------------------------------------------- /<015><012>/  itogo:/
L57156:	.ASCIZ	/ ballow./<000>
; Конец основного .PAS модуля
;------------------------------------------------------------------------------
; Начало 2-го .PAS модуля
;
; Функция, два слова на стеке
; Параметры:	A:integer
;		var B:real
; Результат:	real
L57170:	JSR	R0, L76342		; SVREG
; IF A <> 0
L57174:	TST	000016(SP)
L57200:	BNE	L57206
L57202:	JMP	L57214
; THEN
L57206:	MOV	000016(SP), @000014(SP)
; END IF
L57214:	MOV	@000014(SP), -(SP)
L57220:	MOV	#000005, -(SP)
L57224:	CALL	L76240			; DOMUL
L57230:	MOV	(SP)+, @000014(SP)
; DO - начало цикла
; IF
L57234:	CMP	@000014(SP), #040000
L57242:	BGE	L57250
L57244:	JMP	L57256
; THEN
L57250:	ADD	#140000, @000014(SP)
; END IF; IF
L57256:	CMP	@000014(SP), #020000
L57264:	BGE	L57272
L57266:	JMP	L57300
; THEN
L57272:	ADD	#160000, @000014(SP)
; END IF; IF
L57300:	CMP	@000014(SP), #010000
L57306:	BGE	L57314
L57310:	JMP	L57322
; THEN
L57314:	ADD	#170000, @000014(SP)
; END IF
; WHILE ?? > 4096
L57322:	CMP	@000014(SP), #010000	; 4096.
L57330:	BGT	L57336
L57332:	JMP	L57342			; выходим из цикла
L57336:	JMP	L57234			; продолжение цикла
; VAR22 := ?? / 4096
L57342:	MOV	@000014(SP), -(SP)
L57346:	CALL	L75640			; $FLOAT
L57352:	MOV	#010000, -(SP)		; 4096.
L57356:	CALL	L75640			; $FLOAT
L57362:	FDIV	SP
L57364:	MOV	(SP)+, 000022(SP)
L57370:	MOV	(SP)+, 000022(SP)
;
L57374:	JSR	R0, 076372			; UNREG
L57400:	MOV	(SP), 000004(SP)
L57404:	ADD	#000004, SP
L57410:	RETURN
;
; Процедура ESC161, без параметров
L57412:	CALL	L76410			; STKCHK
L57416:	MOV	#000033, -(SP)
L57422:	CLR	-(SP)
L57424:	CALL	L74500			; WRCH
L57430:	MOV	#000161, -(SP)
L57434:	CLR	-(SP)
L57436:	CALL	L74500			; WRCH
L57442:	RETURN
;
; Процедура ESCJ, без параметров
L57444:	CALL	L76410			; STKCHK
L57450:	MOV	#000033, -(SP)		; ESC
L57454:	CLR	-(SP)
L57456:	CALL	L74500			; WRCH
L57462:	MOV	#000112, -(SP)		; 'J'
L57466:	CLR	-(SP)
L57470:	CALL	L74500			; WRCH
L57474:	RETURN
;
; Процедура CURSORTO: Установить позицию курсора
; Параметры: R, C
L57476:	CMP	-(SP), -(SP)
L57500:	CALL	L76410			; STKCHK
L57504:	MOV	000010(SP), R0
L57510:	ADD	#000040, R0		; ' '
L57514:	MOV	R0, (SP)
L57516:	MOV	000006(SP), R0
L57522:	ADD	#000040, R0		; ' '
L57526:	MOV	R0, 000002(SP)
L57532:	MOV	#000033, -(SP)		; ESC
L57536:	CLR	-(SP)
L57540:	CALL	L74500			; WRCH
L57544:	MOV	#000131, -(SP)		; 'Y'
L57550:	CLR	-(SP)
L57552:	CALL	L74500			; WRCH
L57556:	CLR	-(SP)
L57560:	MOVB	000002(SP), (SP)
L57564:	CLR	-(SP)
L57566:	CALL	L74500			; WRCH
L57572:	CLR	-(SP)
L57574:	MOVB	000004(SP), (SP)
L57600:	CLR	-(SP)
L57602:	CALL	L74500			; WRCH
L57606:	MOV	000004(SP), 000010(SP)
L57614:	ADD	#000010, SP
L57620:	RETURN
; Конец 2-го .PAS модуля
;------------------------------------------------------------------------------
; Начало 3-го .PAS модуля
L57622:	JMP	L57476		; Установить позицию курсора
L57626:	JMP	L57444		; ESCJ
;
; Процедура
L57632:	CALL	L76410			; STKCHK
L57636:	MOV	SP, R4
L57640:	CLR	-(SP)			; 0
L57642:	CLR	-(SP)			; 0
L57644:	CALL	L57622			; Установить позицию курсора
L57650:	MOV	SP, R4
L57652:	CALL	L57626			; ESCJ
L57656:	RETURN
;
; Процедура, 3 слова на стеке
; Разделение числа C на тысячи A и остаток B.
; Параметры:	var A:integer
;		var B:integer
;		var C:real
L57660:	CALL	L76410			; STKCHK
; IF C > 32000000.0
L57664:	MOV	000002(SP), R0
L57670:	MOV	000002(R0), -(SP)	; C
L57674:	MOV	(R0), -(SP)		;
L57676:	MOV	#022000, -(SP)		; 3.2e+007 float const
L57702:	MOV	#046364, -(SP)
L57706:	CALL	L76446			; FLCOMP
L57712:	BGT	L57720
L57714:	JMP	L57744
; THEN C:= 32000000.0
L57720:	MOV	#022000, -(SP)		; 3.2e+007 float const
L57724:	MOV	#046364, -(SP)		;
L57730:	MOV	(SP)+, @000004(SP)
L57734:	MOV	000004(SP), R0
L57740:	MOV	(SP)+, 000002(R0)
; END IF
; A := TRUNC(C / 1000.0)
L57744:	MOV	000002(SP), R0
L57750:	MOV	000002(R0), -(SP)
L57754:	MOV	(R0), -(SP)
L57756:	CLR	-(SP)			; 1000.0 float const
L57760:	MOV	#042572, -(SP)		;
L57764:	FDIV	SP
L57766:	CALL	L76012			; TRUNC
L57772:	MOV	(SP)+, @000006(SP)
; B := TRUNC(C - A * 1000.0)
L57776:	MOV	000002(SP), R0
L60002:	MOV	000002(R0), -(SP)
L60006:	MOV	(R0), -(SP)
L60010:	MOV	@000012(SP), -(SP)
L60014:	CALL	L75640			; $FLOAT
L60020:	CLR	-(SP)			; 1000.0 float const
L60022:	MOV	#042572, -(SP)		;
L60026:	FMUL	SP
L60030:	FSUB	SP
L60032:	CALL	L76012			; TRUNC
L60036:	MOV	(SP)+, @000004(SP)
L60042:	MOV	(SP), 000006(SP)
L60046:	ADD	#000006, SP
L60052:	RETURN
; Конец 3-го .PAS модуля
;------------------------------------------------------------------------------
; Начало 4-го .PAS модуля
L60054:	JMP	L57660
;
; Процедура
; Параметры:	???
L60060:	SUB	#000016, SP		; 7 слов на локальные переменные
L60064:	CALL	L76410			; STKCHK
L60070:	MOV	SP, R4
;
L60072:	MOV	SP, R0
L60074:	MOV	R0, -(SP)
L60076:	MOV	SP, R0
L60100:	ADD	#000004, R0
L60104:	MOV	R0, -(SP)
L60106:	MOV	SP, R0
L60110:	ADD	#000050, R0
L60114:	MOV	R0, -(SP)
L60116:	CALL	L60054			; L57660
;
L60122:	MOV	000042(SP), -(SP)
L60126:	MOV	000042(SP), -(SP)
L60132:	CLR	-(SP)
L60134:	MOV	#043772, -(SP)
L60140:	CALL	L76446			; FLCOMP
L60144:	BGT	L60152
L60146:	JMP	L60170
L60152:	CLR	-(SP)
L60154:	MOV	#043772, -(SP)
L60160:	MOV	(SP)+, 000042(SP)
L60164:	MOV	(SP)+, 000042(SP)
L60170:	MOV	000042(SP), -(SP)
L60174:	MOV	000042(SP), -(SP)
L60200:	CALL	L76012			; TRUNC
L60204:	MOV	(SP)+, 000004(SP)
L60210:	MOV	000036(SP), -(SP)
L60214:	MOV	000036(SP), -(SP)
L60220:	CLR	-(SP)
L60222:	MOV	#043772, -(SP)
L60226:	CALL	L76446			; FLCOMP
L60232:	BGT	L60240
L60234:	JMP	L60256
L60240:	CLR	-(SP)
L60242:	MOV	#043772, -(SP)
L60246:	MOV	(SP)+, 000036(SP)
L60252:	MOV	(SP)+, 000036(SP)
L60256:	MOV	000036(SP), -(SP)
L60262:	MOV	000036(SP), -(SP)
L60266:	CALL	L76012			; TRUNC
L60272:	MOV	(SP)+, 000006(SP)
L60276:	MOV	000032(SP), -(SP)
L60302:	MOV	000032(SP), -(SP)
L60306:	CLR	-(SP)
L60310:	MOV	#043772, -(SP)
L60314:	CALL	L76446			; FLCOMP
L60320:	BGT	L60326
L60322:	JMP	L60344
L60326:	CLR	-(SP)
L60330:	MOV	#043772, -(SP)
L60334:	MOV	(SP)+, 000032(SP)
L60340:	MOV	(SP)+, 000032(SP)
L60344:	MOV	000032(SP), -(SP)
L60350:	MOV	000032(SP), -(SP)
L60354:	CALL	L76012			; TRUNC
L60360:	MOV	(SP)+, 000010(SP)
L60364:	MOV	000026(SP), -(SP)
L60370:	MOV	000026(SP), -(SP)
L60374:	CLR	-(SP)
L60376:	MOV	#043772, -(SP)
L60402:	CALL	L76446			; FLCOMP
L60406:	BGT	L60414
L60410:	JMP	L60432
L60414:	CLR	-(SP)
L60416:	MOV	#043772, -(SP)
L60422:	MOV	(SP)+, 000026(SP)
L60426:	MOV	(SP)+, 000026(SP)
L60432:	MOV	000026(SP), -(SP)
L60436:	MOV	000026(SP), -(SP)
L60442:	CALL	L76012			; TRUNC
L60446:	MOV	(SP)+, 000012(SP)
L60452:	MOV	000022(SP), -(SP)
L60456:	MOV	000022(SP), -(SP)
L60462:	CLR	-(SP)
L60464:	MOV	#043772, -(SP)
L60470:	CALL	L76446			; FLCOMP
L60474:	BGT	L60502
L60476:	JMP	L60520
L60502:	CLR	-(SP)
L60504:	MOV	#043772, -(SP)
L60510:	MOV	(SP)+, 000022(SP)
L60514:	MOV	(SP)+, 000022(SP)
;
L60520:	MOV	000022(SP), -(SP)
L60524:	MOV	000022(SP), -(SP)
L60530:	CALL	L76012			; TRUNC
L60534:	MOV	(SP)+, 000014(SP)
;
L60540:	MOV	#L61026, -(SP)		; " капитал:"
L60544:	MOV	#000036, -(SP)		;
L60550:	CLR	-(SP)			;
L60552:	CALL	L75120			; WRSTG
L60556:	MOV	(SP), -(SP)
L60560:	CLR	-(SP)
L60562:	CALL	L74562			; WRNM
L60566:	MOV	#061066, -(SP)
L60572:	MOV	#000005, -(SP)
L60576:	CLR	-(SP)
L60600:	CALL	L75120			; WRSTG
L60604:	MOV	000002(SP), -(SP)
L60610:	CLR	-(SP)
L60612:	CALL	L74562			; WRNM
L60616:	MOV	#061074, -(SP)
L60622:	MOV	#000162, -(SP)
L60626:	CLR	-(SP)
L60630:	CALL	L75120			; WRSTG
L60634:	MOV	000004(SP), -(SP)
L60640:	CLR	-(SP)
L60642:	CALL	L74562			; WRNM
L60646:	MOV	#061260, -(SP)
L60652:	MOV	#000045, -(SP)
L60656:	CLR	-(SP)
L60660:	CALL	L75120			; WRSTG
L60664:	MOV	000006(SP), -(SP)
L60670:	CLR	-(SP)
L60672:	CALL	L74562			; WRNM
L60676:	MOV	#061326, -(SP)
L60702:	MOV	#000045, -(SP)
L60706:	CLR	-(SP)
L60710:	CALL	L75120			; WRSTG
L60714:	MOV	000010(SP), -(SP)
L60720:	CLR	-(SP)
L60722:	CALL	L74562			; WRNM
L60726:	MOV	#061374, -(SP)
L60732:	MOV	#000045, -(SP)
L60736:	CLR	-(SP)
L60740:	CALL	L75120			; WRSTG
L60744:	MOV	000012(SP), -(SP)
L60750:	CLR	-(SP)
L60752:	CALL	L74562			; WRNM
L60756:	MOV	#061442, -(SP)
L60762:	MOV	#000045, -(SP)
L60766:	CLR	-(SP)
L60770:	CALL	L75120			; WRSTG
L60774:	MOV	000014(SP), -(SP)
L61000:	CLR	-(SP)
L61002:	CALL	L74562			; WRNM
L61006:	CALL	L74452			; WRLN
L61012:	MOV	000016(SP), 000046(SP)
L61020:	ADD	#000046, SP
L61024:	RETURN
;
L61026:	.ASCIZ	<015><012>/             k a p i t a l :/<000>
L61066:	.ASCIZ	/ tys./
L61074:	.ASCII	/ rub./<015><012>/             ---------------------------------------------------------/
	.ASCIZ	<015><012>/             z o l o t o   (  kg  )/<000>
L61260:	.ASCIZ	<015><012>/             z e m l q     (  ga  )/
L61326:	.ASCIZ	<015><012>/             z e r n o     ( tonn )/
L61374:	.ASCIZ	<015><012>/             r a b o ~ i e ( ~el. )/
L61442:	.ASCIZ	<015><012>/             g w a r d i q ( sol. )/
;
L61510:	MOV	(R4), R4
L61512:	MOV	(R4), R4
L61514:	MOV	(R4), R4
L61516:	MOV	(R4), R4
L61520:	MOV	(R4), R4
L61522:	MOV	(R4), R4
L61524:	MOV	(R4), R4
L61526:	MOV	(R4), R4
; Конец 4-го .PAS модуля
;------------------------------------------------------------------------------
; Начало 5-го .PAS модуля
;
; Процедура
L61530:	CMP	-(SP), -(SP)
L61532:	MOV	R4, -(SP)
L61534:	CALL	L76410			; STKCHK
L61540:	MOV	000014(SP), R0
L61544:	MOV	000002(R0), -(SP)
L61550:	MOV	(R0), -(SP)
L61552:	CLR	-(SP)
L61554:	MOV	#143772, -(SP)
L61560:	FADD	SP
L61562:	MOV	(SP)+, 000004(SP)
L61566:	MOV	(SP)+, 000004(SP)
L61572:	MOV	000004(SP), -(SP)
L61576:	MOV	000004(SP), -(SP)
L61602:	CLR	-(SP)
L61604:	CLR	-(SP)
L61606:	CALL	L76446			; FLCOMP
L61612:	BGT	L61620
L61614:	JMP	L61742
L61620:	MOV	(SP), R0
L61622:	MOV	(SP), R1
L61624:	MOV	000056(R1), R1
L61630:	MOV	000002(R1), -(SP)
L61634:	MOV	(R1), -(SP)
L61636:	MOV	000010(SP), -(SP)
L61642:	MOV	000010(SP), -(SP)
L61646:	MOV	@000022(SP), -(SP)
L61652:	CALL	L75640			; $FLOAT
L61656:	FMUL	SP
L61660:	FADD	SP
L61662:	MOV	(SP)+, @000056(R0)
L61666:	MOV	000056(R0), R0
L61672:	MOV	(SP)+, 000002(R0)
L61676:	MOV	000014(SP), R0
L61702:	MOV	000002(R0), -(SP)
L61706:	MOV	(R0), -(SP)
L61710:	MOV	000010(SP), -(SP)
L61714:	MOV	000010(SP), -(SP)
L61720:	FSUB	SP
L61722:	MOV	(SP)+, @000016(SP)
L61726:	MOV	000016(SP), R0
L61732:	MOV	(SP)+, 000002(R0)
L61736:	JMP	L61540
L61742:	MOV	000014(SP), R0
L61746:	MOV	000002(R0), -(SP)
L61752:	MOV	(R0), -(SP)
L61754:	CALL	L76012			; TRUNC
L61760:	MOV	(SP)+, @000010(SP)
L61764:	MOV	000006(SP), 000014(SP)
L61772:	ADD	#000014, SP
L61776:	RETURN
;
L62000:	JMP	L57632
L62004:	JMP	L57660
;
; Процедура - вывод статистики, 18? слов на стеке
L62010:	SUB	#000012, SP
L62014:	CALL	L76410			; STKCHK
L62020:	MOV	SP, R4
L62022:	MOV	000054(SP), -(SP)
L62026:	MOV	SP, R0
L62030:	ADD	#000044, R0
L62034:	MOV	R0, -(SP)
L62036:	MOV	SP, R0
L62040:	ADD	#000004, R0
L62044:	MOV	R0, -(SP)
L62046:	CALL	L61530
L62052:	MOV	SP, R4
L62054:	MOV	000052(SP), -(SP)
L62060:	MOV	SP, R0
L62062:	ADD	#000042, R0
L62066:	MOV	R0, -(SP)
L62070:	MOV	SP, R0
L62072:	ADD	#000006, R0
L62076:	MOV	R0, -(SP)
L62100:	CALL	L61530
L62104:	MOV	SP, R4
L62106:	MOV	000050(SP), -(SP)
L62112:	MOV	SP, R0
L62114:	ADD	#000040, R0
L62120:	MOV	R0, -(SP)
L62122:	MOV	SP, R0
L62124:	ADD	#000010, R0
L62130:	MOV	R0, -(SP)
L62132:	CALL	L61530
L62136:	MOV	SP, R4
L62140:	MOV	000046(SP), -(SP)
L62144:	MOV	SP, R0
L62146:	ADD	#000036, R0
L62152:	MOV	R0, -(SP)
L62154:	MOV	SP, R0
L62156:	ADD	#000012, R0
L62162:	MOV	R0, -(SP)
L62164:	CALL	L61530
L62170:	MOV	SP, R4
L62172:	MOV	000044(SP), -(SP)
L62176:	MOV	SP, R0
L62200:	ADD	#000034, R0
L62204:	MOV	R0, -(SP)
L62206:	MOV	SP, R0
L62210:	ADD	#000014, R0
L62214:	MOV	R0, -(SP)
L62216:	CALL	L61530
L62222:	MOV	SP, R4
L62224:	CALL	L62000
L62230:	MOV	000016(SP), -(SP)
L62234:	CLR	-(SP)
L62236:	CALL	L74562			; WRNM
L62242:	MOV	#063264, -(SP)
L62246:	MOV	#000033, -(SP)
L62252:	CLR	-(SP)
L62254:	CALL	L75120			; WRSTG
L62260:	MOV	000014(SP), -(SP)
L62264:	CLR	-(SP)
L62266:	CALL	L74562			; WRNM
L62272:	MOV	#063320, -(SP)
L62276:	MOV	#000021, -(SP)
L62302:	CLR	-(SP)
L62304:	CALL	L75120			; WRSTG
L62310:	CALL	L74452			; WRLN
L62314:	MOV	#063342, -(SP)
L62320:	MOV	#000522, -(SP)
L62324:	CLR	-(SP)
L62326:	CALL	L75120			; WRSTG
L62332:	MOV	(SP), -(SP)
L62334:	CLR	-(SP)
L62336:	CALL	L74562			; WRNM
L62342:	MOV	#064066, -(SP)
L62346:	MOV	#000003, -(SP)
L62352:	CLR	-(SP)
L62354:	CALL	L75120			; WRSTG
L62360:	MOV	000042(SP), -(SP)
L62364:	CLR	-(SP)
L62366:	CALL	L74562			; WRNM
L62372:	MOV	#064072, -(SP)
L62376:	MOV	#000003, -(SP)
L62402:	CLR	-(SP)
L62404:	CALL	L75120			; WRSTG
L62410:	MOV	000030(SP), -(SP)
L62414:	CLR	-(SP)
L62416:	CALL	L74562			; WRNM
L62422:	MOV	#064076, -(SP)
L62426:	MOV	#000040, -(SP)
L62432:	CLR	-(SP)
L62434:	CALL	L75120			; WRSTG
L62440:	MOV	000002(SP), -(SP)
L62444:	CLR	-(SP)
L62446:	CALL	L74562			; WRNM
L62452:	MOV	#064140, -(SP)
L62456:	MOV	#000003, -(SP)
L62462:	CLR	-(SP)
L62464:	CALL	L75120			; WRSTG
L62470:	MOV	000040(SP), -(SP)
L62474:	CLR	-(SP)
L62476:	CALL	L74562			; WRNM
L62502:	MOV	#064144, -(SP)
L62506:	MOV	#000003, -(SP)
L62512:	CLR	-(SP)
L62514:	CALL	L75120			; WRSTG
L62520:	MOV	000026(SP), -(SP)
L62524:	CLR	-(SP)
L62526:	CALL	L74562			; WRNM
L62532:	MOV	#064150, -(SP)
L62536:	MOV	#000040, -(SP)
L62542:	CLR	-(SP)
L62544:	CALL	L75120			; WRSTG
L62550:	MOV	000004(SP), -(SP)
L62554:	CLR	-(SP)
L62556:	CALL	L74562			; WRNM
L62562:	MOV	#064212, -(SP)
L62566:	MOV	#000003, -(SP)
L62572:	CLR	-(SP)
L62574:	CALL	L75120			; WRSTG
L62600:	MOV	000036(SP), -(SP)
L62604:	CLR	-(SP)
L62606:	CALL	L74562			; WRNM
L62612:	MOV	#064216, -(SP)
L62616:	MOV	#000003, -(SP)
L62622:	CLR	-(SP)
L62624:	CALL	L75120			; WRSTG
L62630:	MOV	000024(SP), -(SP)
L62634:	CLR	-(SP)
L62636:	CALL	L74562			; WRNM
L62642:	MOV	#064222, -(SP)
L62646:	MOV	#000040, -(SP)
L62652:	CLR	-(SP)
L62654:	CALL	L75120			; WRSTG
L62660:	MOV	000006(SP), -(SP)
L62664:	CLR	-(SP)
L62666:	CALL	L74562			; WRNM
L62672:	MOV	#064264, -(SP)
L62676:	MOV	#000003, -(SP)
L62702:	CLR	-(SP)
L62704:	CALL	L75120			; WRSTG
L62710:	MOV	000034(SP), -(SP)
L62714:	CLR	-(SP)
L62716:	CALL	L74562			; WRNM
L62722:	MOV	#064270, -(SP)
L62726:	MOV	#000003, -(SP)
L62732:	CLR	-(SP)
L62734:	CALL	L75120			; WRSTG
L62740:	MOV	000022(SP), -(SP)
L62744:	CLR	-(SP)
L62746:	CALL	L74562			; WRNM
L62752:	MOV	#064274, -(SP)
L62756:	MOV	#000040, -(SP)
L62762:	CLR	-(SP)
L62764:	CALL	L75120			; WRSTG
L62770:	MOV	000010(SP), -(SP)
L62774:	CLR	-(SP)
L62776:	CALL	L74562			; WRNM
L63002:	MOV	#064336, -(SP)
L63006:	MOV	#000003, -(SP)
L63012:	CLR	-(SP)
L63014:	CALL	L75120			; WRSTG
L63020:	MOV	000032(SP), -(SP)
L63024:	CLR	-(SP)
L63026:	CALL	L74562			; WRNM
L63032:	MOV	#064342, -(SP)
L63036:	MOV	#000003, -(SP)
L63042:	CLR	-(SP)
L63044:	CALL	L75120			; WRSTG
L63050:	MOV	000020(SP), -(SP)
L63054:	CLR	-(SP)
L63056:	CALL	L74562			; WRNM
L63062:	MOV	#064346, -(SP)
L63066:	MOV	#000117, -(SP)
L63072:	CLR	-(SP)
L63074:	CALL	L75120			; WRSTG
L63100:	CALL	L74452			; WRLN
L63104:	MOV	#000040, -(SP)
L63110:	CLR	-(SP)
L63112:	CALL	L74500			; WRCH
L63116:	CALL	L74452			; WRLN
L63122:	MOV	SP, R4
L63124:	MOV	SP, R0
L63126:	MOV	R0, -(SP)
L63130:	MOV	SP, R0
L63132:	ADD	#000004, R0
L63136:	MOV	R0, -(SP)
L63140:	MOV	000062(SP), -(SP)
L63144:	CALL	L62004
L63150:	MOV	#064466, -(SP)
L63154:	MOV	#000033, -(SP)
L63160:	CLR	-(SP)
L63162:	CALL	L75120			; WRSTG
L63166:	MOV	(SP), -(SP)
L63170:	CLR	-(SP)
L63172:	CALL	L74562			; WRNM
L63176:	MOV	#064522, -(SP)
L63202:	MOV	#000007, -(SP)
L63206:	CLR	-(SP)
L63210:	CALL	L75120			; WRSTG
L63214:	MOV	000002(SP), -(SP)
L63220:	CLR	-(SP)
L63222:	CALL	L74562			; WRNM
L63226:	MOV	#064532, -(SP)
L63232:	MOV	#000010, -(SP)
L63236:	CLR	-(SP)
L63240:	CALL	L75120			; WRSTG
L63244:	CALL	L74452			; WRLN
L63250:	MOV	000012(SP), 000056(SP)
L63256:	ADD	#000056, SP
L63262:	RETURN
;
L63264:	.ASCIZ	/ god.                      /
L63320:	.ASCIZ	/   god prawleniq./
L63342:	.ASCII	/ /<015><012>/    w  w a { e m  g o s u d a r s t w e  n a  t e k u } i j  m o m e n t :/
	.ASCII	<015><012>/---------------------------------------------------------------------------/
	.ASCII	<015><012>/!  n a i m e n o w a n i e !  koli~estwo  !   stoimostx   !  kurs  birvi  !/
	.ASCII	<015><012>/---------------------------------------------------------------------------/
	.ASCIZ	<015><012>/!  z o l o t o   (  kg   ) !/<000>
L64066:	.ASCIZ	/ ! /
L64072:	.ASCIZ	/ ! /
L64076:	.ASCIZ	/ !/<015><012>/!  z e m l q     (  ga   ) !/<000>
L64140:	.ASCIZ	/ ! /
L64144:	.ASCIZ	/ ! /
L64150:	.ASCIZ	/ !/<015><012>/!  z e r n o     ( tonn  ) !/<000>
L64212:	.ASCIZ	/ ! /
L64216:	.ASCIZ	/ ! /
L64222:	.ASCIZ	/ !/<015><012>/!  r a b o ~ i e ( ~elow ) !/<000>
L64264:	.ASCIZ	/ ! /
L64270:	.ASCIZ	/ ! /
L64274:	.ASCIZ	/ !/<015><012>/!  g w a r d i q ( soldat) !/<000>
L64336:	.ASCIZ	/ ! /
L64342:	.ASCIZ	/ ! /
L64346:	.ASCIZ	/ !/<015><012>/---------------------------------------------------------------------------/
L64466:	.ASCIZ	/w nastoq}ee wremq w kazne -/
L64522:	.ASCIZ	/ tysq~ /
L64532:	.ASCIZ	/ rublej./<000>
;
L64544:	MOV	(R4), R4
L64546:	MOV	(R4), R4
L64550:	MOV	(R4), R4
L64552:	MOV	(R4), R4
L64554:	MOV	(R4), R4
L64556:	MOV	(R4), R4
L64560:	MOV	(R4), R4
L64562:	MOV	(R4), R4
;
; Процедура, без параметров
L64564:	MOV	R4, -(SP)
L64566:	CALL	L76410			; STKCHK
L64572:	MOV	(SP), R0
L64574:	CMP	000056(R0), #177777
L64602:	BEQ	L64610
L64604:	CLR	R0
L64606:	BR	L64614
L64610:	MOV	#000001, R0
L64614:	MOV	(SP), R1
L64616:	MOV	(SP), R2
L64620:	MOV	000110(R2), R2
L64624:	CMP	000102(R1), 000024(R2)
L64632:	BLT	L64640
L64634:	CLR	R1
L64636:	BR	L64644
L64640:	MOV	#000001, R1
L64644:	BISB	R0, R1
L64646:	BNE	L64654
L64650:	JMP	L65050
; FOR
L64654:	MOV	(SP), R0
L64656:	ADD	#000002, R0
L64662:	MOV	R0, -(SP)
L64664:	MOV	#000001, -(SP)		; FROM 1
L64670:	MOV	#000014, -(SP)		; TO 12.
L64674:	MOV	000002(SP), @000004(SP)
L64702:	CMP	@000004(SP), (SP)
L64706:	BLE	L64714
L64710:	JMP	L65036
L64714:	MOV	000006(SP), R0
L64720:	MOV	000006(SP), R1
L64724:	MOV	000002(R1), R1
L64730:	CMP	R1, #000001
L64734:	BLT	L64744
L64736:	CMP	R1, #000014
L64742:	BLE	L64750
L64744:	CALL	L76440			; $B125
L64750:	ASL	R1
L64752:	ADD	R0, R1
L64754:	MOV	000006(SP), R0
L64760:	MOV	000110(R0), R0
L64764:	MOV	000006(SP), R2
L64770:	MOV	000002(R2), R2
L64774:	CMP	R2, #000001
L65000:	BLT	L65010
L65002:	CMP	R2, #000014
L65006:	BLE	L65014
L65010:	CALL	L76440			; $B125
L65014:	ASL	R2
L65016:	ADD	R0, R2
L65020:	MOV	177776(R2), 000054(R1)
L65026:	INC	@000004(SP)
L65032:	JMP	L64702
L65036:	ADD	#000006, SP
;
L65042:	MOV	(SP), R0
L65044:	MOV	#000001, (R0)
L65050:	MOV	(SP), R0
L65052:	MOV	(SP), R1
L65054:	ADD	#000056, R1
L65060:	MOV	000026(R0), R0
L65064:	MOV	#000014, R2
L65070:	MOV	(R1)+, (R0)+
L65072:	DEC	R2
L65074:	BNE	L65070
L65076:	MOV	(SP), R0
L65100:	ADD	#000026, R0
L65104:	MOV	R0, 070044		; FILE
L65110:	MOV	#000030, R0
L65114:	CALL	L72624			; PUTGET
; FOR
L65120:	MOV	(SP), R0
L65122:	ADD	#000002, R0
L65126:	MOV	R0, -(SP)
L65130:	MOV	#000001, -(SP)		; FROM 1
L65134:	MOV	#000012, -(SP)		; TO 10.
L65140:	MOV	000002(SP), @000004(SP)
L65146:	CMP	@000004(SP), (SP)
L65152:	BLE	L65160
L65154:	JMP	L65274
L65160:	MOV	000006(SP), R0
L65164:	MOV	000006(SP), R1
L65170:	MOV	000002(R1), R1
L65174:	CMP	R1, #000001
L65200:	BLT	L65210
L65202:	CMP	R1, #000012
L65206:	BLE	L65214
L65210:	CALL	L76440			; $B125
L65214:	ADD	R0, R1
L65216:	MOV	000006(SP), R0
L65222:	MOV	000006(SP), R2
L65226:	MOV	000002(R2), R2
L65232:	CMP	R2, #000001
L65236:	BLT	L65246
L65240:	CMP	R2, #000014
L65244:	BLE	L65252
L65246:	CALL	L76440			; $B125
L65252:	ASL	R2
L65254:	ADD	R0, R2
L65256:	MOVB	000054(R2), 000043(R1)
L65264:	INC	@000004(SP)
L65270:	JMP	L65146
L65274:	ADD	#000006, SP		; завершение FOR
;
L65300:	MOV	(SP), R0
L65302:	ADD	#000044, R0
L65306:	MOV	R0, -(SP)
L65310:	MOV	#000012, -(SP)
L65314:	CLR	-(SP)
L65316:	CALL	L75120			; WRSTG
L65322:	MOV	#L65436, -(SP)		; " :"
L65326:	MOV	#000002, -(SP)
L65332:	CLR	-(SP)
L65334:	CALL	L75120			; WRSTG
L65340:	MOV	(SP), R0
L65342:	MOV	000102(R0), -(SP)
L65346:	CLR	-(SP)
L65350:	CALL	L74562			; WRNM
L65354:	MOV	#L65442, -(SP)		; " ballow za"
L65360:	MOV	#000012, -(SP)
L65364:	CLR	-(SP)
L65366:	CALL	L75120			; WRSTG
L65372:	MOV	(SP), R0
L65374:	MOV	000104(R0), -(SP)
L65400:	CLR	-(SP)
L65402:	CALL	L74562			; WRNM
L65406:	MOV	#L65456, -(SP)		; " let."
L65412:	MOV	#000005, -(SP)
L65416:	CLR	-(SP)
L65420:	CALL	L75120			; WRSTG
L65424:	CALL	L74452			; WRLN
L65430:	ADD	#000002, SP
L65434:	RETURN
;
L65436:	.ASCIZ	/ :/<000>
L65442:	.ASCIZ	/ ballow za/<000>
L65456:	.ASCIZ	/ let./
;
L65464:	MOV	(R4), R4
L65466:	MOV	(R4), R4
L65470:	MOV	(R4), R4
L65472:	MOV	(R4), R4
L65474:	MOV	(R4), R4
L65476:	MOV	(R4), R4
L65500:	MOV	(R4), R4
L65502:	MOV	(R4), R4
;
L65504:	MOV	R4, -(SP)
L65506:	CALL	L76410			; STKCHK
L65512:	MOV	(SP), R0
L65514:	CMP	(R0), #000001
L65520:	BEQ	L65526
L65522:	JMP	L65746
L65526:	MOV	(SP), R0
L65530:	MOV	(SP), R1
L65532:	MOV	000010(R1), R1
L65536:	ADD	#000056, R0
L65542:	MOV	#000014, R2
L65546:	MOV	(R1)+, (R0)+
L65550:	DEC	R2
L65552:	BNE	L65546
; FOR
L65554:	MOV	(SP), R0
L65556:	ADD	#000002, R0
L65562:	MOV	R0, -(SP)
L65564:	MOV	#000001, -(SP)
L65570:	MOV	#000014, -(SP)
L65574:	MOV	000002(SP), @000004(SP)
L65602:	CMP	@000004(SP), (SP)
L65606:	BLE	L65614
L65610:	JMP	L65736
L65614:	MOV	000006(SP), R0
L65620:	MOV	000110(R0), R0
L65624:	MOV	000006(SP), R1
L65630:	MOV	000002(R1), R1
L65634:	CMP	R1, #000001
L65640:	BLT	L65650
L65642:	CMP	R1, #000014
L65646:	BLE	L65654
L65650:	CALL	L76440			; $B125
L65654:	ASL	R1
L65656:	ADD	R0, R1
L65660:	MOV	000006(SP), R0
L65664:	MOV	000006(SP), R2
L65670:	MOV	000002(R2), R2
L65674:	CMP	R2, #000001
L65700:	BLT	L65710
L65702:	CMP	R2, #000014
L65706:	BLE	L65714
L65710:	CALL	L76440			; $B125
L65714:	ASL	R2
L65716:	ADD	R0, R2
L65720:	MOV	000054(R2), 177776(R1)
L65726:	INC	@000004(SP)
L65732:	JMP	L65602
L65736:	ADD	#000006, SP
L65742:	MOV	(SP), R0
L65744:	CLR	(R0)
L65746:	ADD	#000002, SP
L65752:	RETURN
;
; Процедура - работа с KING.DAT, одно слово на стеке
; Параметр: базовый адрес блока переменных
L65754:	SUB	#000106, SP
L65760:	CALL	L76410			; STKCHK
L65764:	MOV	SP, R0
L65766:	ADD	#000010, R0
L65772:	MOV	R0, 070044		; FILE
L65776:	MOV	#000030, -(SP)
L66002:	MOV	#067454, -(SP)		; "KING"
L66006:	MOV	#000004, -(SP)
L66012:	MOV	#067462, -(SP)		; "DAT"
L66016:	MOV	#000003, -(SP)
L66022:	MOV	SP, R0
L66024:	ADD	#000016, R0
L66030:	MOV	R0, -(SP)
L66032:	MOV	#000001, R0
L66036:	CALL	L71334			; OPEN
L66042:	CLR	000006(SP)
L66046:	MOV	SP, R0
L66050:	ADD	#000026, R0
L66054:	MOV	R0, 070044		; FILE
L66060:	MOV	#000030, -(SP)
L66064:	MOV	#067466, -(SP)		; "KING"
L66070:	MOV	#000004, -(SP)
L66074:	MOV	#067474, -(SP)		; "DAT"
L66100:	MOV	#000003, -(SP)
L66104:	MOV	SP, R0
L66106:	ADD	#000020, R0
L66112:	MOV	R0, -(SP)
L66114:	MOV	#000002, R0
L66120:	CALL	L71334			; OPEN
L66124:	CMP	000004(SP), #177777
L66132:	BEQ	L66140
L66134:	JMP	L66416
; FOR
L66140:	MOV	SP, R0
L66142:	ADD	#000002, R0
L66146:	MOV	R0, -(SP)
L66150:	MOV	#000001, -(SP)
L66154:	MOV	#000014, -(SP)
L66160:	MOV	000002(SP), @000004(SP)
L66166:	CMP	@000004(SP), (SP)
L66172:	BLE	L66200
L66174:	JMP	L66246
L66200:	MOV	000010(SP), R0
L66204:	CMP	R0, #000001
L66210:	BLT	L66220
L66212:	CMP	R0, #000014
L66216:	BLE	L66224
L66220:	CALL	L76440			; $B125
L66224:	ASL	R0
L66226:	ADD	SP, R0
L66230:	MOV	#177777, 000062(R0)
L66236:	INC	@000004(SP)
L66242:	JMP	L66166
L66246:	ADD	#000006, SP		; завершение FOR
; FOR
L66252:	MOV	SP, R0
L66254:	ADD	#000002, R0
L66260:	MOV	R0, -(SP)
L66262:	MOV	#000001, -(SP)
L66266:	MOV	#000003, -(SP)
L66272:	MOV	000002(SP), @000004(SP)
L66300:	CMP	@000004(SP), (SP)
L66304:	BLE	L66312
L66306:	JMP	L66370
L66312:	MOV	SP, R0
L66314:	ADD	#000064, R0
L66320:	MOV	000034(SP), R1
L66324:	MOV	#000014, R2
L66330:	MOV	(R0)+, (R1)+
L66332:	DEC	R2
L66334:	BNE	L66330
L66336:	MOV	SP, R0
L66340:	ADD	#000034, R0
L66344:	MOV	R0, 070044		; FILE
L66350:	MOV	#000030, R0
L66354:	CALL	L72624			; PUTGET
L66360:	INC	@000004(SP)
L66364:	JMP	L66300
L66370:	ADD	#000006, SP
;
L66374:	MOV	SP, R0
L66376:	ADD	#000026, R0
L66402:	MOV	R0, 070044		; FILE
L66406:	CALL	L72504			; CLOSE
L66412:	JMP	L65764
L66416:	CLR	(SP)
L66420:	MOV	#067500, -(SP)
L66424:	MOV	#000230, -(SP)
L66430:	CLR	-(SP)
L66432:	CALL	L75120			; WRSTG
L66436:	CALL	L74452			; WRLN
L66442:	MOV	000010(SP), R0
L66446:	MOV	SP, R1
L66450:	ADD	#000056, R1
L66454:	MOV	#000014, R2
L66460:	MOV	(R0)+, (R1)+
L66462:	DEC	R2
L66464:	BNE	L66460
L66466:	MOV	000056(SP), 000004(SP)
L66474:	MOV	#067732, -(SP)		; " rekord ustanowil "
L66500:	MOV	#000022, -(SP)
L66504:	CLR	-(SP)
L66506:	CALL	L75120			; WRSTG
L66512:	MOV	SP, R4
L66514:	CALL	L64564
L66520:	CMP	000004(SP), #177777
L66526:	BEQ	L66534
L66530:	JMP	L66770
L66534:	MOV	SP, R0
L66536:	ADD	#000002, R0
L66542:	MOV	R0, -(SP)
L66544:	MOV	#000001, -(SP)
L66550:	MOV	#000014, -(SP)
L66554:	MOV	000002(SP), @000004(SP)
L66562:	CMP	@000004(SP), (SP)
L66566:	BLE	L66574
L66570:	JMP	L66642
L66574:	MOV	000010(SP), R0
L66600:	CMP	R0, #000001
L66604:	BLT	L66614
L66606:	CMP	R0, #000014
L66612:	BLE	L66620
L66614:	CALL	L76440			; $B125
L66620:	ASL	R0
L66622:	ADD	SP, R0
L66624:	MOV	#177777, 000062(R0)
L66632:	INC	@000004(SP)
L66636:	JMP	L66562
L66642:	ADD	#000006, SP
L66646:	MOV	SP, R0
L66650:	ADD	#000056, R0
L66654:	MOV	000026(SP), R1
L66660:	MOV	#000014, R2
L66664:	MOV	(R0)+, (R1)+
L66666:	DEC	R2
L66670:	BNE	L66664
L66672:	MOV	SP, R0
L66674:	ADD	#000026, R0
L66700:	MOV	R0, 070044		; FILE
L66704:	MOV	#000030, R0
L66710:	CALL	L72624			; PUTGET
L66714:	MOV	SP, R0
L66716:	ADD	#000056, R0
L66722:	MOV	000026(SP), R1
L66726:	MOV	#000014, R2
L66732:	MOV	(R0)+, (R1)+
L66734:	DEC	R2
L66736:	BNE	L66732
L66740:	MOV	SP, R0
L66742:	ADD	#000026, R0
L66746:	MOV	R0, 070044		; FILE
L66752:	MOV	#000030, R0
L66756:	CALL	L72624			; PUTGET
L66762:	CLR	R4
L66764:	JMP	L67402
L66770:	MOV	SP, R4
L66772:	CALL	L65504
L66776:	MOV	SP, R0
L67000:	ADD	#000010, R0
L67004:	MOV	R0, 070044		; FILE
L67010:	MOV	#000030, R0
L67014:	CALL	L72624			; PUTGET
L67020:	MOV	000010(SP), R0
L67024:	MOV	SP, R1
L67026:	ADD	#000056, R1
L67032:	MOV	#000014, R2
L67036:	MOV	(R0)+, (R1)+
L67040:	DEC	R2
L67042:	BNE	L67036
L67044:	MOV	000056(SP), 000004(SP)
L67052:	MOV	#067756, -(SP)
L67056:	MOV	#000022, -(SP)
L67062:	CLR	-(SP)
L67064:	CALL	L75120			; WRSTG
L67070:	MOV	SP, R4
L67072:	CALL	L64564
L67076:	CMP	000004(SP), #177777
L67104:	BEQ	L67112
L67106:	JMP	L67300
L67112:	MOV	SP, R0
L67114:	ADD	#000002, R0
L67120:	MOV	R0, -(SP)
L67122:	MOV	#000001, -(SP)
L67126:	MOV	#000014, -(SP)
L67132:	MOV	000002(SP), @000004(SP)
L67140:	CMP	@000004(SP), (SP)
L67144:	BLE	L67152
L67146:	JMP	L67220
L67152:	MOV	000010(SP), R0
L67156:	CMP	R0, #000001
L67162:	BLT	L67172
L67164:	CMP	R0, #000014
L67170:	BLE	L67176
L67172:	CALL	L76440			; $B125
L67176:	ASL	R0
L67200:	ADD	SP, R0
L67202:	MOV	#177777, 000062(R0)
L67210:	INC	@000004(SP)
L67214:	JMP	L67140
L67220:	ADD	#000006, SP
L67224:	MOV	SP, R0
L67226:	ADD	#000056, R0
L67232:	MOV	000026(SP), R1
L67236:	MOV	#000014, R2
L67242:	MOV	(R0)+, (R1)+
L67244:	DEC	R2
L67246:	BNE	L67242
L67250:	MOV	SP, R0
L67252:	ADD	#000026, R0
L67256:	MOV	R0, 070044		; FILE
L67262:	MOV	#000030, R0
L67266:	CALL	L72624			; PUTGET
L67272:	CLR	R4
L67274:	JMP	L67402
L67300:	MOV	SP, R4
L67302:	CALL	L65504
L67306:	MOV	SP, R0
L67310:	ADD	#000010, R0
L67314:	MOV	R0, 070044		; FILE
L67320:	MOV	#000030, R0
L67324:	CALL	L72624			; PUTGET
L67330:	MOV	000010(SP), R0
L67334:	MOV	SP, R1
L67336:	ADD	#000056, R1
L67342:	MOV	#000014, R2
L67346:	MOV	(R0)+, (R1)+
L67350:	DEC	R2
L67352:	BNE	L67346
L67354:	MOV	#070002, -(SP)
L67360:	MOV	#000022, -(SP)
L67364:	CLR	-(SP)
L67366:	CALL	L75120			; WRSTG
L67372:	MOV	SP, R4
L67374:	CALL	L64564
L67400:	BR	L67404
L67402:	ADD	R4, SP
L67404:	MOV	SP, R0
L67406:	ADD	#000010, R0
L67412:	MOV	R0, 070044		; FILE
L67416:	CALL	L72504			; CLOSE
L67422:	MOV	SP, R0
L67424:	ADD	#000026, R0
L67430:	MOV	R0, 070044		; FILE
L67434:	CALL	L72504			; CLOSE
L67440:	MOV	000106(SP), 000110(SP)
L67446:	ADD	#000110, SP
L67452:	RETURN
;
L67454:	.ASCIZ	/KING/<000>
L67462:	.ASCIZ	/DAT/
L67466:	.ASCIZ	/KING/<000>
L67474:	.ASCIZ	/DAT/
L67500:	.ASCII	<015><012>/ w rezulxtate analiza rezulxtatow, dostignutyh prawitelqmi   | j f o r i i/
	.ASCIZ	<015><012>/ -------------------------------------------------------------------------/<000>
L67732:	.ASCIZ	/ rekord ustanowil /<000>
L67756:	.ASCIZ	/ wtoroj rezulxtat /<000>
L70002:	.ASCIZ	/ tretij rezulxtat /<000>
; Конец 5-го .PAS модуля
;------------------------------------------------------------------------------
; Начало модулей Паскаля
;
; Модуль SUPMON данные
$END::
L70026:	EMT	350			; .EXIT
L70030:	.WORD	000000
$DEFLE::
L70032:	.WORD	000003
$DEFEX::
L70034:	.WORD	B.10
B.10:
L70036:	.ASCIZ	"DAT"
CH0OPT::
CH0PTR::
$TTY::
L70042:	.WORD	060012
FILE::
L70044:	.WORD	000000
SETR0::
L70046:	.WORD	000000
$KORE::
L70050:	.WORD	0			; $KORE
CHNMAP::
L70052:	.WORD	100000
$FREE::
L70054:	.WORD	0
$RESR6::
L70056:	BNE	L70060
$RESR5::
L70060:	BVS	070122
$SAV10::
L70062:	.WORD	000010
RTAREA::
L70064:	.WORD	000000			; Блок для EMT 375
L70066:	.WORD	000000
L70070:	.WORD	000000, 000000, 000000, 000000, 000000, 000000, 000000, 000000
	.WORD	000000, 000000, 000000, 000000, 000000, 000000
CRLF::
L70124:	.ASCIZ	<015><012>		; CR LF
L70127:	.ASCIZ	/ - FROM PC /
L70143:	.ASCIZ	/TRAP TO 4/
L70155:	.ASCIZ	/BAD SUPPORT PACKAGE/<015><012>
BADDEV::.ASCIZ	/NOT A VALID DEVICE/
NOTOPN::.ASCIZ	/I/<057>/O CHANNEL NOT OPEN/
EOFERR::.ASCIZ	/END OF FILE ON DEVICE/
VERERR::.ASCIZ	/SUPPORT CONDITIONALS ERROR/
RESRVD::.ASCIZ	/RESERVED INSTRUCTION TRAP/
OVRFLO::.ASCIZ	/INTEGER ERROR/
EXPOVR::.ASCIZ	/EXP OVERFLOW/
LOGNEG::.ASCIZ	/LOG OF NEGATIVE/
SQRNEG::.ASCIZ	/SQRT OF NEGATIVE/
DIVZER::.ASCIZ	/DEVIDE BY ZERO/
MISSNG::.ASCIZ	/MISSING SPECIAL FEATURE/
COROVR::.ASCIZ	/NOT ENOUGH AVAILABLE MEMORY/
NEWOF0::.ASCIZ	/NEW OF LENGTH 0/
SETBIG::.ASCIZ	/BAD SET EXPRESSION/
FATLIO::.ASCIZ	/FATAL I/<057>/O ERROR/
ARRERR::.ASCIZ	/ARRAY BOUNDS ERROR/
TOOMNY::.ASCIZ	/TOO MANY FILES OPEN/
	.EVEN
;
; Модуль SUPMON
; $START - адрес старта; стек на 001000
START::
L70720:	MOV	070060, R5		; (070060) = 102420 -> R5
L70724:	MOV	R5, 070050		; -> $KORE
L70730:	CLR	070054			; $FREE
L70734:	MOV	#177776, R0
L70740:	EMT	354			; .SETTOP
L70742:	MOV	R0, SP			; Ставим стек по SETTOP
L70744:	MOV	R0, 070056		; И запоминаем адрес начальный адрес SP
L70750:	CMP	#000073, #000073	; очевидно, всегда равно
L70756:	BEQ	L70772			; и тут всегда переход
L70760:	MOV	#070155, R0		; адрес строки "BAD SUPPORT PACKAGE"
L70764:	CALL	L71016			; вывод строки R0
L70770:	EMT	350			; .EXIT
L70772:	MOV	#070064, R0		; адрес буфера для EMT 375
L70776:	MOV	#001400, (R0)		; code = 3, chan = 0
L71002:	MOV	#071110, 000002(R0)
L71010:	EMT	375			; .PURGE #0
L71012:	JMP	L01150			; $BEGIN
;
; Подпрограмма TYPER: Вывод строки символов R0
TYPER::
L71016:	MOV	R1, -(SP)
L71020:	MOV	R0, R1
L71022:	BR	L71030
L71024:	EMT	341			; .TTYOUT
L71026:	BLO	071024
L71030:	MOVB	(R1)+, R0
L71032:	BNE	L71024
L71034:	MOV	(SP)+, R1
L71036:	RETURN
;
SAVREG::
L71040:	MOV	R4, -(SP)
L71042:	MOV	R3, -(SP)
L71044:	MOV	R2, -(SP)
L71046:	MOV	R1, -(SP)
L71050:	MOV	R0, -(SP)
L71052:	MOV	000012(SP), -(SP)
L71056:	MOV	R5, 000014(SP)
L71062:	RETURN
;
RESREG::
L71064:	MOV	000014(SP), R5
L71070:	MOV	(SP)+, 000012(SP)
L71074:	MOV	(SP)+, R0
L71076:	MOV	(SP)+, R1
L71100:	MOV	(SP)+, R2
L71102:	MOV	(SP)+, R3
L71104:	MOV	(SP)+, R4
L71106:	RETURN
L71110:	BLO	071154
L71112:	MOV	#070143, R0
L71116:	CALL	L71016			; TYPER
L71122:	MOV	#070127, R0
L71126:	CALL	L71016			; TYPER
L71132:	MOV	(SP), R0
L71134:	CALL	L71244			; C.324
L71140:	MOV	#070124, R0		; CRLF
L71144:	CALL	L71016			; TYPER
L71150:	JMP	L70026			; $END
L71154:	MOV	R0, -(SP)
L71156:	MOV	#070104, R0
L71162:	MOV	#001400, (R0)
L71166:	MOV	#071110, 000002(R0)
L71174:	EMT	375
L71176:	MOV	(SP)+, R0
L71200:	JMP	L76524
RTERR::
L71204:	MOV	(R5), R0
L71206:	CALL	L71016			; TYPER
L71212:	MOV	#070127, R0
L71216:	CALL	L71016			; TYPER
L71222:	MOV	R5, R0
L71224:	CALL	L71244			; C.324
L71230:	MOV	#070124, R0		; CRLF
L71234:	CALL	L71016			; TYPER
L71240:	JMP	L70026			; $END
; C.324
L71244:	MOV	R0, -(SP)
L71246:	MOV	R1, -(SP)
L71250:	MOV	R0, R1
L71252:	MOV	#000030, R0
L71256:	ROL	R1
L71260:	ROL	R0
L71262:	EMT	341
L71264:	BLO	071262
L71266:	BIS	#000001, R1
L71272:	MOV	#000006, R0
L71276:	CLC
L71300:	ROL	R1
L71302:	ROL	R0
L71304:	ROL	R1
L71306:	ROL	R0
L71310:	ROL	R1
L71312:	ROL	R0
L71314:	EMT	341
L71316:	BLO	071314
L71320:	CMP	R1, #100000
L71324:	BNE	L71272
L71326:	MOV	(SP)+, R1
L71330:	MOV	(SP)+, R0
L71332:	RETURN
;
; Модуль SUPOPN
;
OPEN::
$B64::
L71334:	CALL	L71040			; SAVREG
L71340:	CLR	R3
L71342:	MOV	#000001, R4
L71346:	CLC
L71350:	MOV	070052, R2
L71354:	INC	R3
L71356:	ROL	R4
L71360:	BPL	071370
L71362:	JSR	R5, L71204		; RTERR
L71366:	MUL	@030402(R3), SP
L71372:	BNE	L71354
L71374:	BIS	R4, 070052
L71400:	SWAB	R0
L71402:	BIS	R3, R0
L71404:	MOV	070044, R1		; FILE
L71410:	MOV	R0, 000002(R1)
L71414:	MOV	R0, 070064
L71420:	MOV	#070100, R0
L71424:	MOV	000022(SP), R2
L71430:	MOV	000020(SP), R3
L71434:	BNE	L71446
L71436:	MOV	070032, R3
L71442:	MOV	070034, R2
L71446:	ADD	R2, R3
L71450:	CALL	L72216
L71454:	MOV	000026(SP), R2
L71460:	MOV	000024(SP), R3
L71464:	ADD	R2, R3
L71466:	ADD	#003400, 000002(R1)
L71474:	MOV	#070072, R0
L71500:	MOV	R0, 070066
L71504:	CALL	L72216
L71510:	CMP	R2, R3
L71512:	BHIS	071522
L71514:	CMPB	(R2), #000072
L71520:	BEQ	L71540
L71522:	MOV	(R0)+, (R0)
L71524:	MOV	177774(R0), -(R0)
L71530:	MOV	#015270, -(R0)
L71534:	CMP	(R0)+, (R0)+
L71536:	BR	L71546
L71540:	TSTB	(R2)+
L71542:	CALL	L72216
L71546:	TST	(R0)+
L71550:	CMP	R2, R3
L71552:	BHIS	071566
L71554:	CMPB	(R2)+, #000056
L71560:	BNE	L71566
L71562:	CALL	L72216
L71566:	MOV	SP, R2
L71570:	MOV	000016(R2), R5
L71574:	MOV	(R5), 070070
L71600:	MOV	#001000, SP
L71604:	EMT	346
L71606:	MOV	#070072, R0
L71612:	MOV	070050, -(SP)
L71616:	EMT	343
L71620:	BHIS	071646
L71622:	TST	R5
L71624:	BNE	L71754
L71626:	JSR	R5, L71204		; RTERR
L71632:	MUL	R3, R2		; BADDEV
L71634:	TST	R5
L71636:	BNE	L71754
L71640:	JSR	R5, L71204		; RTERR
L71644:	ASH	(SP), R4
L71646:	MOV	R0, 070050
L71652:	TST	070074
L71656:	BNE	L71722
L71660:	TST	R5
L71662:	BEQ	L71674
L71664:	CMP	070070, #100000
L71672:	BEQ	L71722
L71674:	SUB	#000010, SP
L71700:	MOV	SP, R3
L71702:	MOV	#070072, R0
L71706:	MOV	R3, -(SP)
L71710:	EMT	342
L71712:	TST	(SP)
L71714:	BMI	071634
L71716:	ADD	#000010, SP
L71722:	MOV	#070064, R0
L71726:	TST	R5
L71730:	BNE	L71750
L71732:	CLR	000004(R0)
L71736:	EMT	375
L71740:	BHIS	072012
L71742:	JSR	R5, L71204		; RTERR
L71746:	ASH	@-(R2), R3
L71750:	EMT	375
L71752:	BHIS	072006
L71754:	EMT	347
L71756:	MOV	#177777, (R5)
L71762:	BIC	R4, 070052
L71766:	MOV	R2, SP
L71770:	CALL	L71064			; RESREG
L71774:	MOV	(SP)+, 000012(SP)
L72000:	ADD	#000012, SP
L72004:	RETURN
L72006:	EMT	347
L72010:	MOV	R0, (R5)
L72012:	EMT	347
L72014:	MOV	R2, SP
L72016:	MOV	000030(R2), R4
L72022:	ADD	#000777, R4
L72026:	BIC	#000777, R4
L72032:	BNE	L72040
L72034:	MOV	#001000, R4
L72040:	MOV	R4, -(SP)
L72042:	CALL	102166
L72046:	MOV	(SP)+, 000006(R1)
L72052:	CLR	000004(R1)
L72056:	ROR	R4
L72060:	MOV	R4, 000010(R1)
L72064:	CLR	000012(R1)
L72070:	CALL	L71064			; RESREG
L72074:	MOV	(SP), 000014(SP)
L72100:	ADD	#000014, SP
REOPEN::
$B66::
L72104:	MOV	R0, -(SP)
L72106:	MOV	R1, -(SP)
L72110:	MOV	070044, R1		; FILE
L72114:	DEC	000004(R1)
L72120:	CLR	000014(R1)
L72124:	CLR	000012(R1)
L72130:	CLR	000004(R1)
L72134:	CMPB	000003(R1), #000010
L72142:	BNE	L72204
L72144:	MOV	R1, R0
L72146:	TST	(R0)+
L72150:	EMT	375
L72152:	BHIS	072172
L72154:	TSTB	000052
L72160:	BEQ	L72166
L72162:	CALL	101054
L72166:	MOV	#060000, R0
L72172:	ASL	R0
L72174:	MOV	R0, 000014(R1)
L72200:	INC	000004(R1)
L72204:	MOV	000006(R1), (R1)+
L72210:	MOV	(SP)+, R1
L72212:	MOV	(SP)+, R0
L72214:	RETURN
L72216:	MOV	R5, -(SP)
L72220:	MOV	R4, -(SP)
L72222:	MOV	#022000, -(SP)
L72226:	CLR	R4
L72230:	CMP	R2, R3
L72232:	BHIS	072310
L72234:	MOVB	(R2)+, R5
L72236:	CMPB	R5, #000040
L72242:	BEQ	L72230
L72244:	DEC	R2
L72246:	SUB	#000072, R5
L72252:	ADD	#000012, R5
L72256:	BHIS	072272
L72260:	ADD	#000036, R5
L72264:	BR	L72306
L72266:	SUB	#000020, R5
L72272:	SUB	#000020, R5
L72276:	BLE	072310
L72300:	CMP	R5, #000032
L72304:	BHI	072266
L72306:	CMPB	(R2)+, #005005
L72312:	ASL	R4
L72314:	ASL	R4
L72316:	ASL	R4
L72320:	ADD	R4, R5
L72322:	ASL	R4
L72324:	ASL	R4
L72326:	ADD	R5, R4
L72330:	ASL	(SP)
L72332:	BHIS	072230
L72334:	MOV	R4, (R0)+
L72336:	TST	(SP)
L72340:	BNE	L72226
L72342:	CMP	-(R0), (SP)+
L72344:	MOV	(SP)+, R4
L72346:	MOV	(SP)+, R5
L72350:	RETURN
L72352:	.ASCIZ	"No room on device or file not found"
L72416:	ADD	@026556(R5), (SP)
L72422:	ADD	-(R5), -(SP)
L72424:	ADD	(R5)+, @-(R4)
L72426:	DIV	-(R0), R4
L72430:	DIV	061565(R4), R1
L72434:	ASH	062562(R4), R5
L72440:	CMP	R1, -(R4)
L72442:	ADD	(R5), -(R1)
L72444:	ADD	(R5)+, -(R3)
L72446:	DIV	072040(R3), R5
L72452:	CMP	R1, @-(PC)
L72454:	ADD	-(R5), -(SP)
L72456:	ADD	(R5)+, @-(R4)
L72460:	DIV	-(R0), R4
L72462:	DIV	061565(R4), R1
L72466:	ASH	062562(R4), R5
L72472:	CMP	R1, -(R4)
L72474:	ADD	(R5)+, -(R4)
L72476:	ADD	-(R5), 062543(SP)
L72502:	HALT
;
; Модуль SUPCLO
;
CLOSE::
$B68::
L72504:	CALL	102056
L72510:	MOV	R1, -(SP)
L72512:	MOV	R2, -(SP)
L72514:	MOV	R3, -(SP)
L72516:	MOV	070044, R3		; FILE
L72522:	CLR	000012(R3)
L72526:	MOVB	#000006, 000003(R3)
L72534:	MOV	000002(R3), R0
L72540:	MOV	SP, R2
L72542:	MOV	#001000, SP
L72546:	EMT	374
L72550:	MOV	R2, SP
L72552:	MOVB	000002(R3), R1
L72556:	CLR	R2
L72560:	SEC
L72562:	ROL	R2
L72564:	BMI	072576
L72566:	DEC	R1
L72570:	BPL	072562
L72572:	BIC	R2, 070052
L72576:	MOV	000006(R3), -(SP)
L72602:	MOV	000010(R3), R0
L72606:	ASL	R0
L72610:	CALL	102316
L72614:	MOV	(SP)+, R3
L72616:	MOV	(SP)+, R2
L72620:	MOV	(SP)+, R1
L72622:	RETURN
;
; Модуль SUPGET
;
PUTGET::
$B60::
L72624:	JSR	R5, 100772
L72630:	IOT
L72632:	BIC	#040000, (R4)
L72636:	BPL	072646
L72640:	JSR	R5, L71204		; RTERR
L72644:	.WORD	070253		; "END OF FILE ON DEVICE"
L72646:	MOV	R0, -(SP)
L72650:	MOV	R1, -(SP)
L72652:	MOV	000006(R5), R1
L72656:	CMPB	000003(R5), #000011
L72664:	BEQ	L72674
L72666:	ADD	000014(R5), R1
L72672:	BR	L72704
L72674:	ADD	000010(R5), R1
L72700:	ADD	000010(R5), R1
L72704:	ADD	R0, (R5)
L72706:	SUB	R0, R1
L72710:	CMP	(R5), R1
L72712:	BLOS	072752
L72714:	CLR	000012(R5)
L72720:	MOV	R5, R0
L72722:	TST	(R0)+
L72724:	EMT	375
L72726:	BHIS	072734
L72730:	BIS	#060000, R0
L72734:	ASL	R0
L72736:	MOV	R0, 000014(R5)
L72742:	MOV	000006(R5), (R5)
L72746:	INC	000004(R5)
L72752:	MOV	(SP)+, R1
L72754:	MOV	(SP)+, R0
L72756:	RETURN
;
; Модуль SUPRLN
; Процедура
RDLN::
$B16::
L72760:	MOV	#070042, 070044		; -> FILE
RDLNFL::
$B18::
L72766:	JSR	R5, 100772
L72772:	.WORD	4
L72774:	BIT	#140000, (R4)
L73000:	BMI	073034
L73002:	BNE	L73014
L73004:	CALL	101252
L73010:	BEQ	L73004
L73012:	BR	L73030
L73014:	CALL	101252
L73020:	BNE	L73030
L73022:	CALL	101122
L73026:	RETURN
L73030:	CALL	101574
L73034:	RETURN
;
; Модуль SUPRNM
; Процедура
RDNM::
$B4::
L73036:	MOV	#070042, 070044		; -> FILE
RDNMFL::
$B6::
L73044:	MOV	(SP), -(SP)
L73046:	JSR	R5, 100772
L73052:	.WORD	000004
L73054:	MOV	R1, -(SP)
L73056:	MOV	R2, -(SP)
L73060:	MOV	R3, -(SP)
L73062:	CLR	R2
L73064:	CLR	R1
L73066:	CLR	R3
L73070:	BR	L73074
L73072:	MOV	(PC), R2
L73074:	CALL	101252
L73100:	BMI	073150
L73102:	BIC	#177600, R0
L73106:	CMP	R0, #000040		; ' '
L73112:	BLOS	073074
L73114:	CMP	R0, #000053		; '+'
L73120:	BEQ	L73074
L73122:	CMP	R0, #000054		; ','
L73126:	BEQ	L73074
L73130:	CMP	R0, #000055		; '-'
L73134:	BEQ	L73072
L73136:	SUB	#000072, R0
L73142:	ADD	#000012, R0
L73146:	BLO	073204
L73150:	COM	R3
L73152:	BR	L73214
L73154:	SUB	#000072, R0
L73160:	ADD	#000012, R0
L73164:	BHIS	073214
L73166:	ASL	R1
L73170:	MOV	R1, -(SP)
L73172:	ASL	R1
L73174:	ASL	R1
L73176:	ADD	(SP)+, R1
L73200:	BHIS	073204
L73202:	MOV	(PC), R3
L73204:	ADD	R0, R1
L73206:	CALL	101252
L73212:	BEQ	L73154
L73214:	CALL	101122
L73220:	TST	R2
L73222:	BEQ	L73226
L73224:	NEG	R1
L73226:	TST	R3
L73230:	BEQ	L73242
L73232:	MOV	#073256, R0
L73236:	CALL	L71016			; TYPER
L73242:	MOV	R1, 000022(SP)
L73246:	MOV	(SP)+, R3
L73250:	MOV	(SP)+, R2
L73252:	MOV	(SP)+, R1
L73254:	RETURN
; SUPRNM data
L73256:	.ASCIZ	/Bad integer/
;
; Модуль SUPRRL
;
RDRL::
$B8::
L73272:	MOV	#070042, 070044		; -> FILE
RDRLFL::
$B10::
L73300:	CALL	100770
L73304:	MOV	(SP), -(SP)
L73306:	MOV	(SP), -(SP)
L73310:	CALL	L71040
L73314:	CLR	-(SP)
L73316:	CLR	-(SP)
L73320:	MOV	#177777, R5
L73324:	CLR	R4
L73326:	COM	R5
L73330:	CALL	101202
L73334:	BMI	073402
L73336:	CMP	R0, #000040		; ' '
L73342:	BLOS	073330
L73344:	CMP	R0, #000054		; ','
L73350:	BEQ	L73330
L73352:	CMP	R0, #000053		; '+'
L73356:	BEQ	L73330
L73360:	CMP	R0, #000055		; '-'
L73364:	BEQ	L73326
L73366:	CMP	R0, #000056		; '.'
L73372:	BEQ	L73500
L73374:	CALL	101110
L73400:	BLO	073460
L73402:	MOV	#074246, R0
L73406:	CALL	L71016			; TYPER
L73412:	CLR	000002(SP)
L73416:	CLR	(SP)
L73420:	BR	L73674
L73422:	CALL	101202
L73426:	BMI	073674
L73430:	CMP	R0, #000056
L73434:	BEQ	L73500
L73436:	CMP	R0, #000105
L73442:	BEQ	L73564
L73444:	CMP	R0, #000145
L73450:	BEQ	L73564
L73452:	CALL	101110
L73456:	BHIS	073674
L73460:	INC	R4
L73462:	BIT	#177400, (SP)
L73466:	BNE	L73476
L73470:	DEC	R4
L73472:	JSR	R1, 074110
L73476:	BR	L73422
L73500:	CALL	101202
L73504:	BMI	073674
L73506:	CALL	101110
L73512:	BHIS	073674
L73514:	BR	L73546
L73516:	CALL	101202
L73522:	BMI	073674
L73524:	CMP	R0, #000105
L73530:	BEQ	L73564
L73532:	CMP	R0, #000145
L73536:	BEQ	L73564
L73540:	CALL	101110
L73544:	BHIS	073674
L73546:	BIT	#177400, (SP)
L73552:	BNE	L73562
L73554:	DEC	R4
L73556:	JSR	R1, 074110
L73562:	BR	L73516
L73564:	CLR	R3
L73566:	CLR	R1
L73570:	CALL	101202
L73574:	BMI	073402
L73576:	CMP	R0, #000053
L73602:	BEQ	L73614
L73604:	CMP	R0, #000055
L73610:	BNE	L73622
L73612:	COM	R3
L73614:	CALL	101202
L73620:	BMI	073402
L73622:	CALL	101110
L73626:	BHIS	073402
L73630:	BR	L73660
L73632:	CALL	101202
L73636:	BMI	073664
L73640:	CALL	101110
L73644:	BHIS	073664
L73646:	ASL	R1
L73650:	MOV	R1, -(SP)
L73652:	ASL	R1
L73654:	ASL	R1
L73656:	ADD	(SP)+, R1
L73660:	ADD	R0, R1
L73662:	BR	L73632
L73664:	TST	R3
L73666:	BEQ	L73672
L73670:	NEG	R1
L73672:	ADD	R1, R4
L73674:	CALL	101164
L73700:	TST	000002(SP)
L73704:	BNE	L73712
L73706:	TST	(SP)
L73710:	BEQ	L74016
L73712:	MOV	#000030, R1
L73716:	MOV	(SP)+, R2
L73720:	MOV	(SP)+, R3
L73722:	BIT	#177400, R2
L73726:	BEQ	L73754
L73730:	ASR	R2
L73732:	ROR	R3
L73734:	INC	R1
L73736:	BIT	#177400, R2
L73742:	BNE	L73730
L73744:	BR	L73762
L73746:	ASL	R3
L73750:	ROL	R2
L73752:	DEC	R1
L73754:	BIT	#000200, R2
L73760:	BEQ	L73746
L73762:	ASL	R2
L73764:	BIC	#177400, R2
L73770:	ADD	#000200, R1
L73774:	SWAB	R1
L73776:	CLRB	R1
L74000:	BIS	R1, R2
L74002:	ROR	R2
L74004:	BIC	#077777, R5
L74010:	BIS	R5, R2
L74012:	MOV	R3, -(SP)
L74014:	MOV	R2, -(SP)
L74016:	MOV	#074166, R5
L74022:	TST	R4
L74024:	BEQ	L74070
L74026:	BPL	074036
L74030:	MOV	#074216, R5
L74034:	NEG	R4
L74036:	MOV	#000006, R3
L74042:	ROR	R4
L74044:	BHIS	074060
L74046:	MOV	000002(R5), -(SP)
L74052:	MOV	(R5), -(SP)
L74054:	CALL	L76774			; FASTMU
L74060:	ADD	#000004, R5
L74064:	DEC	R3
L74066:	BNE	L74042
L74070:	MOV	(SP)+, 000020(SP)
L74074:	MOV	(SP)+, 000020(SP)
L74100:	CALL	L71064			; RESREG
L74104:	JMP	101046
L74110:	TST	(SP)+
L74112:	ASL	000002(SP)
L74116:	ROL	(SP)
L74120:	MOV	000002(SP), -(SP)
L74124:	MOV	000002(SP), -(SP)
L74130:	ASL	000002(SP)
L74134:	ROL	(SP)
L74136:	ASL	000002(SP)
L74142:	ROL	(SP)
L74144:	ADD	(SP)+, 000002(SP)
L74150:	ADD	(SP)+, 000002(SP)
L74154:	ADC	(SP)
L74156:	ADD	R0, 000002(SP)
L74162:	ADC	(SP)
L74164:	JMP	(R1)
; Модуль SUPRRL данные
L74166:	.ASCIZ	" B"<000>
L74172:	BIC	(PC), (R0)
L74174:	HALT
L74176:	BIC	@(R4)+, @(R4)+
L74200:	BIC	R0, R0
L74202:	BIC	136040(SP), @055416(SP)
L74210:	MOV	@-(PC), (R2)
L74212:	ASH	@(R5)+, SP
L74214:	BICB	(SP)+, @-(SP)
L74216:	BIT	@146315(R3), (R4)
L74222:	BIT	153412(R4), -(R3)
L74226:	BIT	-(PC), (R1)+
L74230:	BITB	@(R4)+, #031453
L74234:	BICB	022746(R1), 007067
L74242:	ADC	(PC)
L74244:	BITB	R4, @#060502
L74250:	CMP	R1, -(R4)
L74252:	ADD	020164(R1), -(SP)
L74256:	ADD	@072560(R1), @-(R1)
L74262:	.WORD	000164
;
; Модуль SUPRST
;
RDSTG::
$B12::
L74264:	MOV	#070042, 070044		; -> FILE
RDSTGF::
$B14::
L74272:	JSR	R5, 100772
L74276:	.WORD	000010
L74300:	MOV	R1, -(SP)
L74302:	MOV	R2, -(SP)
L74304:	MOV	R3, -(SP)
L74306:	CLR	R3
L74310:	MOV	000022(SP), R1
L74314:	MOV	000024(SP), R2
L74320:	CALL	L74422
L74324:	BNE	L74352
L74326:	BIT	#140000, (R4)
L74332:	BNE	L74340
L74334:	MOV	(PC), R3
L74336:	BR	L74320
L74340:	TST	(R4)
L74342:	BMI	074366
L74344:	TST	R3
L74346:	BEQ	L74320
L74350:	BR	L74366
L74352:	MOVB	R0, (R2)+
L74354:	DEC	R1
L74356:	BEQ	L74400
L74360:	CALL	L74422
L74364:	BNE	L74352
L74366:	MOVB	#000040, (R2)+
L74372:	DEC	R1
L74374:	BNE	L74366
L74376:	BR	L74406
L74400:	CALL	L74422
L74404:	BNE	L74400
L74406:	CALL	101122
L74412:	MOV	(SP)+, R3
L74414:	MOV	(SP)+, R2
L74416:	MOV	(SP)+, R1
L74420:	RETURN
L74422:	CALL	101252
L74426:	BMI	074446
L74430:	CMP	R0, #000040
L74434:	BLE	L74446
L74436:	CMP	R0, #000054
L74442:	BEQ	L74446
L74444:	RETURN
L74446:	SEZ
L74450:	RETURN
;
; Модуль SUPWLN
; Подпрограмма: Перевод строки возврат каретки
WRLN::
$B36::
L74452:	MOV	#070042, 070044		; -> FILE
WRLNFL::
$B38::
L74460:	MOV	#070124, -(SP)		; CRLF
L74464:	MOV	#000002, -(SP)
L74470:	CLR	-(SP)
L74472:	CALL	L75126
L74476:	RETURN
;
; Модуль SUPWCH
; Процедура $B20: вывод символа, два слова на стеке
WRCH::
$B20::
L74500:	MOV	#070042, 070044		; -> FILE
WRCHFL::
$B22::
L74506:	JSR	R5, 100772
L74512:	.WORD	000010
L74514:	MOV	R1, -(SP)
L74516:	MOV	000016(SP), R1
L74522:	DEC	R1
L74524:	BLE	L74542
L74526:	MOV	#000040, R0
L74532:	CALL	101732		; PUTCHR
L74536:	DEC	R1
L74540:	BNE	L74532
L74542:	MOV	000020(SP), R0
L74546:	CALL	101732		; PUTCHR
L74552:	CALL	102054
L74556:	MOV	(SP)+, R1
L74560:	RETURN
;
; Модуль SUPWNM
; Процедура вывода числа, два слова на стеке
WRNM::
L74562:	MOV	#070042, 070044		; -> FILE
WRNMFL::
$B26::
L74570:	CALL	100770
L74574:	CALL	L71040			; SAVREG
L74600:	CLR	R3
L74602:	MOV	000020(SP), R1
L74606:	MOV	000016(SP), R5
L74612:	BNE	L74620
L74614:	MOV	#000015, R5
L74620:	BPL	074640
L74622:	ADD	#000007, R5
L74626:	NEG	R5
L74630:	INC	R3
L74632:	MOV	#075066, R4
L74636:	BR	L74664
L74640:	SUB	#000005, R5
L74644:	CMP	R1, #100000
L74650:	BLO	074660
L74652:	DEC	R5
L74654:	COM	R3
L74656:	NEG	R1
L74660:	MOV	#075102, R4
L74664:	CLR	R2
L74666:	TST	R5
L74670:	BLE	L74706
L74672:	MOV	#000040, R0
L74676:	CALL	101776		; PUTCHF
L74702:	DEC	R5
L74704:	BNE	L74676
L74706:	TST	(R4)+
L74710:	BEQ	L74726
L74712:	CLR	R0
L74714:	ROL	R1
L74716:	ROL	R0
L74720:	ROR	R1
L74722:	TST	R0
L74724:	BR	L74752
L74726:	CMP	(R4), #000001
L74732:	BNE	L74736
L74734:	INC	R2
L74736:	CLR	R0
L74740:	INC	R0
L74742:	SUB	(R4), R1
L74744:	BPL	074740
L74746:	ADD	(R4)+, R1
L74750:	DEC	R0
L74752:	BNE	L74772
L74754:	TST	R2
L74756:	BNE	L74772
L74760:	INC	R5
L74762:	BLE	L75026
L74764:	MOV	#000040, R0
L74770:	BR	L75022
L74772:	INC	R2
L74774:	ADD	#000060, R0
L75000:	TST	R3
L75002:	BGE	075022
L75004:	CLR	R3
L75006:	MOV	R0, -(SP)
L75010:	MOV	#000055, R0
L75014:	CALL	101776		; PUTCHF
L75020:	MOV	(SP)+, R0
L75022:	CALL	101776		; PUTCHF
L75026:	TST	(R4)
L75030:	BNE	L74726
L75032:	TST	R3
L75034:	BLE	L75046
L75036:	MOV	#000102, R0
L75042:	CALL	101776		; PUTCHF
L75046:	CALL	102054
L75052:	CALL	L71064			; RESREG
L75056:	MOV	(SP)+, (SP)
L75060:	MOV	(SP)+, (SP)
L75062:	JMP	101046
L75066:	.WORD	177777, 010000, 001000
L75074:	.WORD	000100, 000010, 000001
L75102:	.WORD	0, 10000., 1000., 100., 10., 1, 0
;
; Модуль SUPWST
; Процедура: Вывод строки, 3 слова на стеке
WRSTG::
$B32::
L75120:	MOV	#070042, 070044		; -> FILE
WRSTGF::
$B34::
L75126:	JSR	R5, 100772
L75132:	.WORD	12
L75134:	MOV	R1, -(SP)
L75136:	MOV	R2, -(SP)
L75140:	MOV	000020(SP), R1
L75144:	MOV	000022(SP), R2
L75150:	SUB	R2, R1
L75152:	BLE	L75170
L75154:	MOV	#000040, R0
L75160:	CALL	101732		; PUTCHR
L75164:	DEC	R1
L75166:	BNE	L75160
L75170:	MOV	000024(SP), R1
L75174:	TST	R2
L75176:	BEQ	L75212
L75200:	MOVB	(R1)+, R0
L75202:	CALL	101732		; PUTCHR
L75206:	DEC	R2
L75210:	BNE	L75200
L75212:	CALL	102054
L75216:	MOV	(SP)+, R2
L75220:	MOV	(SP)+, R1
L75222:	RETURN
;
; Модуль SUPSIN
;
COS::
$B94::
L75224:	BIC	#100000, 000002(SP)
L75232:	CLR	-(SP)
L75234:	INC	(SP)
L75236:	BR	L75242
;
SIN::
$B92::
L75240:	CLR	-(SP)
L75242:	CALL	L71040			; SAVREG
L75246:	CLR	-(SP)
L75250:	MOV	000022(SP), R4
L75254:	MOV	000024(SP), R5
L75260:	ASL	R4
L75262:	ROR	(SP)
L75264:	ROR	R4
L75266:	CMP	R4, #043600
L75272:	BLT	L75302
L75274:	CLR	R2
L75276:	CLR	R3
L75300:	BR	L75614
L75302:	MOV	#007732, R3
L75306:	MOV	#040311, R2
L75312:	CALL	L77130			; $FDIV
L75316:	MOV	R3, -(SP)
L75320:	MOV	R2, -(SP)
L75322:	CALL	L76012			; TRUNC
L75326:	ADD	000020(SP), (SP)
L75332:	BIT	#000001, (SP)
L75336:	BEQ	L75342
L75340:	INC	(SP)
L75342:	BIT	#000002, (SP)
L75346:	BEQ	L75356
L75350:	ADD	#100000, 000002(SP)
L75356:	SUB	000020(SP), (SP)
L75362:	CALL	L75640			; $FLOAT
L75366:	MOV	R2, R4
L75370:	MOV	R3, R5
L75372:	MOV	(SP)+, R2
L75374:	MOV	(SP)+, R3
L75376:	CALL	L77144
L75402:	CMP	R2, #035200
L75406:	BHIS	075430
L75410:	CMP	R2, #142600
L75414:	BLOS	075430
L75416:	MOV	#007732, R5
L75422:	MOV	#040311, R4
L75426:	BR	L75604
L75430:	MOV	R3, -(SP)
L75432:	MOV	R2, -(SP)
L75434:	MOV	R2, R4
L75436:	MOV	R3, R5
L75440:	CALL	L77122			; $FMUL
L75444:	MOV	R3, -(SP)
L75446:	MOV	R2, -(SP)
L75450:	MOV	#153672, R5
L75454:	MOV	#035036, R4
L75460:	CALL	L77122			; $FMUL
L75464:	MOV	#023143, R5
L75470:	MOV	#136231, R4
L75474:	CALL	L77136			; $FADD
L75500:	MOV	(SP), R4
L75502:	MOV	000002(SP), R5
L75506:	CALL	L77122			; $FMUL
L75512:	MOV	#032130, R5
L75516:	MOV	#037243, R4
L75522:	CALL	L77136			; $FADD
L75526:	MOV	(SP), R4
L75530:	MOV	000002(SP), R5
L75534:	CALL	L77122			; $FMUL
L75540:	MOV	#056741, R5
L75544:	MOV	#140045, R4
L75550:	CALL	L77136			; $FADD
L75554:	MOV	(SP)+, R4
L75556:	MOV	(SP)+, R5
L75560:	CALL	L77122			; $FMUL
L75564:	MOV	#007732, R5
L75570:	MOV	#040311, R4
L75574:	CALL	L77136			; $FADD
L75600:	MOV	(SP)+, R4
L75602:	MOV	(SP)+, R5
L75604:	CALL	L77122			; $FMUL
L75610:	TST	R2
L75612:	BNE	L75616
L75614:	CLR	(SP)
L75616:	ADD	(SP)+, R2
L75620:	MOV	R2, 000020(SP)
L75624:	MOV	R3, 000022(SP)
L75630:	CALL	L71064			; RESREG
L75634:	TST	(SP)+
L75636:	RETURN
;
; Модуль SUPFLO
$B88::
$FLOAT::
L75640:	MOV	(SP), -(SP)
L75642:	MOV	R0, -(SP)
L75644:	CLR	R0
L75646:	CLR	4(SP)
L75652:	TST	6(SP)
L75656:	BGT	L75700
L75660:	NEG	6(SP)
L75664:	BGT	L75674
L75666:	CLR	6(SP)
L75672:	BR	L75742
L75674:	BIS	#100000, R0
L75700:	BIS	#46000, R0
L75704:	ASL	6(SP)
L75710:	ROL	04(SP)
L75714:	SUB	#200, R0
L75720:	BIT	#200, 4(SP)
L75726:	BEQ	L75704
L75730:	BIC	#200, 4(SP)
L75736:	BIS	R0, 4(SP)
L75742:	MOV	(SP)+, R0
L75744:	RETURN
;
; Модуль SUPFIX
ROUND::
$B108::
L75746:	MOV	#000000, -(SP)
L75752:	MOV	#040000, -(SP)
L75756:	MOV	000010(SP), -(SP)
L75762:	MOV	000010(SP), -(SP)
L75766:	BPL	075776
L75770:	BIS	#100000, 000004(SP)
L75776:	CALL	L76760
L76002:	MOV	(SP)+, 000004(SP)
L76006:	MOV	(SP)+, 000004(SP)
$B86::
$TRUNC::
L76012:	MOV	R0, -(SP)
L76014:	MOV	R1, -(SP)
L76016:	MOV	R2, -(SP)
L76020:	MOV	000010(SP), R0
L76024:	BEQ	L76140
L76026:	MOV	R0, R1
L76030:	MOV	000012(SP), R2
L76034:	BIC	#177600, R1
L76040:	BIS	#000200, R1
L76044:	ASL	R0
L76046:	SWAB	R0
L76050:	BIC	#177400, R0
L76054:	SUB	#000200, R0
L76060:	BLE	L76140
L76062:	SUB	#000030, R0
L76066:	CMP	R0, #177770
L76072:	BLT	076102
L76074:	JSR	R5, L71204		; RTERR
L76100:	MUL	006201(SP), R3		; "INTEGER ERROR"
L76104:	ROR	R2
L76106:	INC	R0
L76110:	BNE	076102
L76112:	TST	000010(SP)
L76116:	BPL	076122
L76120:	NEG	R2
L76122:	MOV	R2, 000012(SP)
L76126:	MOV	(SP)+, R2
L76130:	MOV	(SP)+, R1
L76132:	MOV	(SP)+, R0
L76134:	MOV	(SP)+, (SP)
L76136:	RETURN
L76140:	CLR	R2
L76142:	BR	L76122
;
; Модуль SUPINT
;
L76144:	MOV	R0, -(SP)
L76146:	MOV	R1, -(SP)
L76150:	CLR	R0
L76152:	MOV	000012(SP), R1
L76156:	BPL	076162
L76160:	DEC	R0
L76162:	JMP	@000004(SP)
UNSMUL::
$B116::
L76166:	CALL	L76144
L76172:	CLR	R0
L76174:	CALL	100526
L76200:	BR	L76310
UNSDIV::
$B118::
L76202:	CALL	L76144
L76206:	CLR	R0
L76210:	CALL	100630
L76214:	BLO	076334
L76216:	MOV	R0, R1
L76220:	BR	L76310
UNSMOD::
$B120::
L76222:	CALL	L76144
L76226:	CLR	R0
L76230:	CALL	100630
L76234:	BLO	076334
L76236:	BR	L76310
DOMUL::
$B78::
L76240:	CALL	L76144
L76244:	CALL	100526
L76250:	BLO	076326
L76252:	BR	L76310
DODIV::
$B80::
L76254:	CALL	L76144
L76260:	CALL	100630
L76264:	BLO	076334
L76266:	BVS	076334
L76270:	MOV	R0, R1
L76272:	BR	L76310
DOMOD::
$B82::
L76274:	CALL	L76144
L76300:	CALL	100630
L76304:	BLO	076334
L76306:	BVS	076326
L76310:	MOV	R1, 000012(SP)
L76314:	MOV	(SP)+, R1
L76316:	MOV	(SP)+, R0
L76320:	TST	(SP)+
L76322:	MOV	(SP)+, (SP)
L76324:	RETURN
L76326:	JSR	R5, L71204		; RTERR
L76332:	.WORD	070366
L76334:	JSR	R5, L71204		; RTERR
L76340:	.WORD	070462
;
; Модуль SUPREG
; Процедура с вызовом по R0: сохранение регистров
SVREG::
$B74::
L76342:	MOV	070044, -(SP)
L76346:	MOV	R1, -(SP)
L76350:	MOV	R2, -(SP)
L76352:	MOV	R3, -(SP)
L76354:	MOV	SP, R1
L76356:	SUB	#000030, R1
L76362:	CMP	R1, 070050
L76366:	BLOS	076426
L76370:	MOV	R0, PC
;
; Подпрограмма с вызововм по R0
UNREG::
$B76::
L76372:	TST	(SP)+
L76374:	MOV	(SP)+, R3
L76376:	MOV	(SP)+, R2
L76400:	MOV	(SP)+, R1
L76402:	MOV	(SP)+, 070044
L76406:	RTS	R0
STKCHK::
$B127::
L76410:	MOV	SP, R1
L76412:	SUB	#000030, R1
L76416:	CMP	R1, 070050
L76422:	BLOS	076426
L76424:	RETURN
L76426:	CLR	070050
L76432:	JSR	R5, L71204		; RTERR
L76436:	MUL	@(R1)+, R5
;
$B125::
$$B125::
L76440:	JSR	R5, L71204		; RTERR
L76444:	MUL	@-(R0), SP
;
; Модуль SUPCMP
;
FLCOMP::
$B84::
L76446:	CMP	000006(SP), 000002(SP)
L76454:	BLO	076510
L76456:	BHI	076476
L76460:	CMP	000010(SP), 000004(SP)
L76466:	BLO	076510
L76470:	BHI	076476
L76472:	CLR	000006(SP)
L76476:	MOV	(SP)+, 000006(SP)
L76502:	CMP	(SP)+, (SP)+
L76504:	TST	(SP)+
L76506:	RETURN
L76510:	NEG	000002(SP)
L76514:	MOV	000002(SP), 000006(SP)
L76522:	BR	L76476
;
; Модуль SUPSIM
;
SUPSIM::
L76524:	CALL	L71040			; SAVREG
L76530:	MOV	000014(SP), R0
L76534:	MOV	-(R0), R0
L76536:	CMP	R0, #075037
L76542:	BHI	076552
L76544:	CMP	R0, #075000
L76550:	BHIS	076560
L76552:	JSR	R5, L71204		; RTERR
L76556:	MUL	@(R4)+, R3
L76560:	BIC	#177747, R0
L76564:	ASR	R0
L76566:	ASR	R0
L76570:	MOV	SP, R1
L76572:	ADD	#000020, R1
L76576:	MOV	(R1)+, R2
L76600:	MOV	(R1)+, R3
L76602:	MOV	(R1)+, R4
L76604:	MOV	(R1)+, R5
L76606:	BIC	#000017, 000016(SP)
L76614:	CALL	@100760(R0)
L76620:	MOV	R2, 000024(SP)
L76624:	MOV	R3, 000026(SP)
L76630:	MOV	000014(SP), R1
L76634:	MOV	(R1)+, R0
L76636:	CMP	R0, #075037
L76642:	BHI	076710
L76644:	CMP	R0, #075000
L76650:	BLO	076710
L76652:	MOV	R1, 000014(SP)
L76656:	MOV	SP, R1
L76660:	MOV	SP, R2
L76662:	ADD	#000020, R1
L76666:	ADD	#000024, R2
L76672:	MOV	#000010, R3
L76676:	MOV	-(R1), -(R2)
L76700:	DEC	R3
L76702:	BNE	L76676
L76704:	CMP	(SP)+, (SP)+
L76706:	BR	L76560
L76710:	CALL	L71064			; RESREG
L76714:	MOV	(SP)+, 000002(SP)
L76720:	MOV	(SP)+, 000002(SP)
L76724:	BIS	#000004, 000002(SP)
L76732:	TST	000004(SP)
L76736:	BEQ	L76756
L76740:	BPL	076750
L76742:	BIS	#000010, 000002(SP)
L76750:	BIC	#000004, 000002(SP)
L76756:	RTI
;
FASTAD::
$B123::
L76760:	CALL	L77010			; B.264
L76764:	SOB	SP, 076626
FASTSU::
$B121::
L76766:	CALL	L77010			; B.264
L76772:	SOB	SP, 076644
FASTMU::
$B119::
L76774:	CALL	L77010			; B.264
L77000:	SOB	R2, 076752
FASTDI::
$B117::
L77002:	CALL	L77010			; B.264
L77006:	SOB	R4, 076670
; B.264:
L77010:	MOV	R5, -(SP)
L77012:	MOV	R4, -(SP)
L77014:	MOV	R3, -(SP)
L77016:	MOV	R2, -(SP)
L77020:	MOV	R1, -(SP)
L77022:	MOV	R0, -(SP)
L77024:	MOV	@000014(SP), R0
L77030:	MOV	SP, R1
L77032:	ADD	#000030, R1
L77036:	MOV	-(R1), R5
L77040:	MOV	-(R1), R4
L77042:	MOV	-(R1), R3
L77044:	MOV	-(R1), R2
L77046:	MOV	-(R1), -(R1)
L77050:	CLR	000002(R1)
L77054:	CALL	(R0)
L77056:	MOV	SP, R1
L77060:	ADD	#000030, R1
L77064:	MOV	R3, -(R1)
L77066:	MOV	R2, -(R1)
L77070:	MOV	177772(R1), -(R1)
L77074:	MOV	177772(R1), -(R1)
L77100:	MOV	(SP)+, R0
L77102:	MOV	(SP)+, R1
L77104:	MOV	(SP)+, R2
L77106:	MOV	(SP)+, R3
L77110:	MOV	(SP)+, R4
L77112:	MOV	(SP)+, R5
L77114:	ADD	#000004, SP
L77120:	RTI
;
$FMUL::
L77122:	JSR	R0, 077152
L77126:	SOB	R2, 077100
$FDIV::
L77130:	JSR	R0, 077152
L77134:	SOB	R4, 077016
$FADD::
L77136:	JSR	R0, 077152
L77142:	SOB	SP, 077004
$FSUB::
L77144:	JSR	R0, 077152
L77150:	SOB	SP, 077022
;
L77152:	MOV	R1, -(SP)
L77154:	MOV	R4, -(SP)
L77156:	MOV	R5, -(SP)
L77160:	CALL	@(R0)+
L77162:	MOV	(SP)+, R5
L77164:	MOV	(SP)+, R4
L77166:	MOV	(SP)+, R1
L77170:	MOV	(SP)+, R0
L77172:	RETURN
L77174:	JSR	R5, L71204		; RTERR
L77200:	SOB	R2, 077176
L77202:	.ASCIZ	/FIS error/
;
L77214:	MOV	R2, R0
L77216:	BEQ	L77442
L77220:	CLR	-(SP)
L77222:	ROL	R0
L77224:	ROR	(SP)
L77226:	CLRB	R0
L77230:	MOV	R4, R1
L77232:	BEQ	L77440
L77234:	CLR	-(SP)
L77236:	ROL	R1
L77240:	ROR	(SP)
L77242:	CLRB	R1
L77244:	ADD	(SP)+, (SP)
L77246:	ADD	R1, R0
L77250:	BLO	077254
L77252:	COMB	R0
L77254:	SWAB	R0
L77256:	MOV	R0, -(SP)
L77260:	BIC	#177400, R2
L77264:	BIS	#000200, R2
L77270:	BIC	#177400, R4
L77274:	BIS	#000200, R4
L77300:	MOV	R3, -(SP)
L77302:	SWAB	R4
L77304:	SWAB	R5
L77306:	BISB	R5, R4
L77310:	CLRB	R5
L77312:	MOV	R4, -(SP)
L77314:	MOV	R2, R0
L77316:	CLR	R1
L77320:	CLR	R4
L77322:	CLR	R3
L77324:	CLR	R2
L77326:	TST	R0
L77330:	BNE	L77372
L77332:	SWAB	000002(SP)
L77336:	BEQ	L77426
L77340:	BISB	000002(SP), R0
L77344:	CLRB	000002(SP)
L77350:	CLRB	R1
L77352:	BISB	R5, R1
L77354:	SWAB	R1
L77356:	CLRB	R5
L77360:	BISB	(SP), R5
L77362:	SWAB	R5
L77364:	CLRB	(SP)
L77366:	SWAB	(SP)
L77370:	BR	L77326
L77372:	ROR	(SP)
L77374:	ROR	R5
L77376:	ROR	R1
L77400:	ASL	000002(SP)
L77404:	ROLB	R0
L77406:	BHIS	077326
L77410:	ADD	R1, R4
L77412:	ADC	R3
L77414:	ADC	R2
L77416:	ADD	R5, R3
L77420:	ADC	R2
L77422:	ADD	(SP), R2
L77424:	BR	L77326
L77426:	CMP	(SP)+, (SP)+
L77430:	CLR	R4
L77432:	CALL	100250
L77436:	RETURN
L77440:	TST	(SP)+
L77442:	CLR	R2
L77444:	CLR	R3
L77446:	RETURN
L77450:	MOV	R2, R1
L77452:	BEQ	L77634
L77454:	CLR	-(SP)
L77456:	ROL	R1
L77460:	ROR	(SP)
L77462:	CLRB	R1
L77464:	MOV	R4, R0
L77466:	BEQ	L77644
L77470:	CLR	-(SP)
L77472:	ROL	R0
L77474:	ROR	(SP)
L77476:	CLRB	R0
L77500:	ADD	(SP)+, (SP)
L77502:	SUB	R1, R0
L77504:	BHIS	077510
L77506:	COMB	R0
L77510:	SWAB	R0
L77512:	MOV	R0, -(SP)
L77514:	BIC	#177400, R2
L77520:	BIS	#000200, R2
L77524:	BIC	#177400, R4
L77530:	BIS	#000200, R4
L77534:	ADD	#000010, (SP)
L77540:	MOV	#000031, -(SP)
L77544:	MOV	R2, R0
L77546:	MOV	R3, R1
L77550:	CLR	R2
L77552:	CLR	R3
L77554:	CMP	R0, R4
L77556:	BLO	077566
L77560:	BHI	077576
L77562:	CMP	R1, R5
L77564:	BHI	077576
L77566:	SUB	R1, R5
L77570:	SBC	R4
L77572:	SUB	R0, R4
L77574:	SEC
L77576:	ROL	R3
L77600:	ROL	R2
L77602:	DEC	(SP)
L77604:	BEQ	L77622
L77606:	ASL	R5
L77610:	ROL	R4
L77612:	BIT	#177600, R4
L77616:	BEQ	L77576
L77620:	BR	L77554
L77622:	TST	(SP)+
L77624:	CLR	R4
L77626:	CALL	100250
L77632:	RETURN
L77634:	JSR	R0, 077174
L77640:	.WORD	000013
L77642:	CLR	-(SP)
L77644:	TST	(SP)+
L77646:	CLR	R2
L77650:	CLR	R3
L77652:	RETURN
L77654:	ADD	#100000, R2
L77660:	CLR	-(SP)
L77662:	MOV	#000010, -(SP)
L77666:	MOV	R2, R0
L77670:	BEQ	100230
L77672:	ASL	R0
L77674:	CLRB	R0
L77676:	SWAB	R0
L77700:	MOV	R4, R1
L77702:	BEQ	100234
L77704:	ASL	R1
L77706:	CLRB	R1
L77710:	SWAB	R1
L77712:	SUB	R1, R0
L77714:	BMI	077730
L77716:	CMP	R0, #000030
L77722:	BGT	100234
L77724:	ADD	R0, R1
L77726:	BR	L77736
L77730:	CMP	R0, #177750
L77734:	BLT	100230
L77736:	SUB	#000200, R1
L77742:	ADD	R1, (SP)
L77744:	BIC	#077600, R4
L77750:	BIS	#000200, R4
L77754:	BPL	077770
L77756:	NEG	R5
L77760:	ADC	R4
L77762:	NEG	R4
L77764:	BIS	#100000, R4
L77770:	BIC	#077600, R2
L77774:	BIS	#000200, R2
M00000:	BPL	100014
M00002:	NEG	R3
M00004:	ADC	R2
M00006:	NEG	R2
M00010:	BIS	#100000, R2
M00014:	TST	R0
M00016:	BMI	100076
M00020:	BEQ	100156
M00022:	CLR	R1
M00024:	CMP	R0, #000010
M00030:	BLT	100062
M00032:	CLRB	R1
M00034:	BISB	R5, R1
M00036:	SWAB	R1
M00040:	CLRB	R5
M00042:	BISB	R4, R5
M00044:	SWAB	R5
M00046:	SWAB	R4
M00050:	MOVB	R4, R4
M00052:	SUB	#000010, R0
M00056:	BGT	100024
M00060:	BR	100162
M00062:	ASR	R4
M00064:	ROR	R5
M00066:	ROR	R1
M00070:	DEC	R0
M00072:	BNE	100062
M00074:	BR	100162
M00076:	MOV	R0, R1
M00100:	CLR	R0
M00102:	NEG	R1
M00104:	CMP	R1, #000010
M00110:	BLT	100142
M00112:	CLRB	R0
M00114:	BISB	R3, R0
M00116:	SWAB	R0
M00120:	CLRB	R3
M00122:	BISB	R2, R3
M00124:	SWAB	R3
M00126:	SWAB	R2
M00130:	MOVB	R2, R2
M00132:	SUB	#000010, R1
M00136:	BGT	100104
M00140:	BEQ	100162
M00142:	ASR	R2
M00144:	ROR	R3
M00146:	ROR	R0
M00150:	DEC	R1
M00152:	BNE	100142
M00154:	BR	100162
M00156:	CLR	R1
M00160:	CLR	R0
M00162:	ADD	R1, R0
M00164:	ADC	R3
M00166:	ADC	R2
M00170:	ADD	R5, R3
M00172:	ADC	R2
M00174:	ADD	R4, R2
M00176:	BPL	100220
M00200:	NEG	R0
M00202:	ADC	R3
M00204:	ADC	R2
M00206:	NEG	R3
M00210:	ADC	R2
M00212:	NEG	R2
M00214:	COM	000002(SP)
M00220:	MOV	R0, R4
M00222:	CALL	100250
M00226:	RETURN
M00230:	MOV	R4, R2
M00232:	MOV	R5, R3
M00234:	CMP	(SP)+, (SP)+
M00236:	CMP	R2, #100000
M00242:	BNE	100246
M00244:	CLR	R2
M00246:	RETURN
M00250:	MOV	000004(SP), R0
M00254:	MOV	(SP)+, 000002(SP)
M00260:	MOV	(SP)+, R1
M00262:	SUB	#000010, R1
M00266:	MOV	R2, R5
M00270:	BIS	R3, R5
M00272:	BIS	R4, R5
M00274:	BEQ	100524
M00276:	BIT	#177400, R2
M00302:	BEQ	100354
M00304:	BPL	100332
M00306:	MOV	R3, R4
M00310:	CLRB	R3
M00312:	BISB	R2, R3
M00314:	CLRB	R2
M00316:	SWAB	R4
M00320:	SWAB	R3
M00322:	SWAB	R2
M00324:	ADD	#000010, R1
M00330:	BR	100420
M00332:	CLC
M00334:	ROR	R2
M00336:	ROR	R3
M00340:	ROR	R4
M00342:	INC	R1
M00344:	BIT	#177400, R2
M00350:	BNE	100304
M00352:	BR	100420
M00354:	TST	R2
M00356:	BNE	100414
M00360:	SWAB	R3
M00362:	BISB	R3, R2
M00364:	CLRB	R3
M00366:	SWAB	R4
M00370:	BISB	R4, R3
M00372:	CLRB	R4
M00374:	SUB	#000010, R1
M00400:	BR	100354
M00402:	CLC
M00404:	ROL	R4
M00406:	ROL	R3
M00410:	ROL	R2
M00412:	DEC	R1
M00414:	TSTB	R2
M00416:	BPL	100402
M00420:	ADD	#100000, R4
M00424:	ADC	R3
M00426:	ADC	R2
M00430:	BIT	#000400, R2
M00434:	BNE	100332
M00436:	CMP	R1, #177600
M00442:	BGT	100454
M00444:	JSR	R0, 077174
M00450:	.WORD	000012
M00452:	BR	100524
M00454:	CMP	R1, #000200
M00460:	BLT	100472
M00462:	JSR	R0, 077174
M00466:	.WORD	000002
M00470:	BR	100524
M00472:	ADD	#000200, R1
M00476:	BIC	#177400, R1
M00502:	ASL	R2
M00504:	BIC	#177400, R2
M00510:	SWAB	R1
M00512:	BIS	R1, R2
M00514:	ROR	R2
M00516:	BIC	#077777, R0
M00522:	BIS	R0, R2
M00524:	RETURN
;
MULSIM::
M00526:	MOV	R4, -(SP)
M00530:	MOV	R3, -(SP)
M00532:	MOV	R2, -(SP)
M00534:	MOV	000020(SP), R4
M00540:	BEQ	100622
M00542:	MOV	R1, R3
M00544:	BEQ	100624
M00546:	CLR	R2
M00550:	CLR	R1
M00552:	CLR	R0
M00554:	ROR	R4
M00556:	BHIS	100566
M00560:	ADD	R3, R1
M00562:	ADC	R0
M00564:	ADD	R2, R0
M00566:	ASL	R3
M00570:	ROR	R2
M00572:	TST	R4
M00574:	BNE	100554
M00576:	MOV	(SP)+, R2
M00600:	MOV	(SP)+, R3
M00602:	MOV	(SP)+, R4
M00604:	INC	R0
M00606:	CMP	R0, #000001
M00612:	BLOS	100620
M00614:	SEC
M00616:	CLC
M00620:	RETURN
M00622:	CLR	R1
M00624:	CLR	R0
M00626:	BR	100576
;
DIVSIM::
M00630:	MOV	R4, -(SP)
M00632:	MOV	R2, -(SP)
M00634:	MOV	000016(SP), R4
M00640:	BNE	100646
M00642:	SEC
M00644:	BR	100752
M00646:	MOV	R0, -(SP)
M00650:	MOV	R0, -(SP)
M00652:	BPL	100664
M00654:	NEG	R1
M00656:	CLR	R0
M00660:	BIC	#077777, (SP)
M00664:	ADD	R4, (SP)
M00666:	TST	R4
M00670:	BPL	100674
M00672:	NEG	R4
M00674:	MOV	R4, R2
M00676:	CMP	R2, R1
M00700:	BHI	100726
M00702:	ASL	R2
M00704:	BLO	100726
M00706:	CMP	R2, R1
M00710:	BLOS	100702
M00712:	BR	100726
M00714:	ASL	R0
M00716:	CMP	R2, R1
M00720:	BHI	100726
M00722:	SUB	R2, R1
M00724:	INC	R0
M00726:	ROR	R2
M00730:	CMP	R2, R4
M00732:	BHIS	100714
M00734:	TST	(SP)+
M00736:	BPL	100742
M00740:	NEG	R0
M00742:	TST	(SP)+
M00744:	BPL	100750
M00746:	NEG	R1
M00750:	CLC
M00752:	MOV	(SP)+, R2
M00754:	MOV	(SP)+, R4
M00756:	RETURN
;
; Модуль SUPSIM данные
M00760:	SOB	SP, 100622
M00762:	SOB	SP, 100634
M00764:	SOB	R2, 100736
M00766:	SOB	R4, 100650
;
; Модуль SUPIO
;
CHKOPN::
M00770:	RETURN
;
SETIO::
M00772:	MOV	(R5)+, -(SP)
M00774:	ADD	SP, (SP)
M00776:	MOV	R4, -(SP)
M01000:	MOV	R0, -(SP)
M01002:	MOV	R5, -(SP)
M01004:	MOV	@#070044, R5
M01010:	MOV	R5, R4
M01012:	CMP	R5, #070042
M01016:	BEQ	101024
M01020:	ADD	#000014, R4
M01024:	CALL	@(SP)+
M01026:	MOV	(SP)+, R0
M01030:	MOV	(SP)+, R4
M01032:	MOV	000002(SP), R5
M01036:	MOV	000004(SP), @000000(SP)
M01044:	MOV	(SP), SP
KLUDGE::
M01046:	RETURN
;
CHKRW::
M01050:	BLO	101054
M01052:	RETURN
CHKRWE::
M01054:	CMPB	@#000052, #000001
M01062:	BLO	101074
M01064:	BHI	101102
M01066:	JSR	R5, L71204		; RTERR
M01072:	MUL	@(R0)+, SP
M01074:	JSR	R5, L71204		; RTERR
M01100:	MUL	(SP)+, R2
M01102:	JSR	R5, L71204		; RTERR
M01106:	MUL	@-(R3), R2
;
; Модуль SUPIOI
;
ISITNM::
M01110:	SUB	#000072, R0
M01114:	ADD	#000012, R0
M01120:	RETURN
;
BACKUP::
M01122:	CMPB	R5, #070042
M01126:	BNE	101146
M01130:	TSTB	(R5)
M01132:	BEQ	101162
M01134:	BIS	#020000, (R5)
M01140:	BIC	#010000, (R5)
M01144:	RETURN
M01146:	TSTB	000012(R5)
M01152:	BEQ	101162
M01154:	BIS	#020000, 000012(R5)
M01162:	RETURN
BACKUF::
M01164:	MOV	R5, -(SP)
M01166:	MOV	070044, R5
M01172:	CALL	101122
M01176:	MOV	(SP)+, R5
M01200:	RETURN
GETCHF::
M01202:	CLR	-(SP)
M01204:	MOV	R5, -(SP)
M01206:	MOV	R4, -(SP)
M01210:	MOV	070044, R5
M01214:	MOV	R5, R4
M01216:	CMP	R5, #070042
M01222:	BEQ	101230
M01224:	ADD	#000014, R4
M01230:	CALL	101252
M01234:	MOV	(R4), 000004(SP)
M01240:	MOV	(SP)+, R4
M01242:	MOV	(SP)+, R5
M01244:	BIT	#140000, (SP)+
M01250:	RETURN
;
GETCHR::
M01252:	BIC	#040000, (R4)
M01256:	CMP	R5, #070042
M01262:	BEQ	101362
M01264:	TST	(R4)
M01266:	BPL	101276
M01270:	JSR	R5, L71204		; RTERR
M01274:	MUL	@-(R3), R2
M01276:	BIT	#020000, 000012(R5)
M01304:	BEQ	101320
M01306:	MOVB	000012(R5), R0
M01312:	CLR	000012(R5)
M01316:	BR	101426
M01320:	MOVB	@000000(R5), R0
M01324:	INC	(R5)
M01326:	MOV	000014(R5), -(SP)
M01332:	ADD	000006(R5), (SP)
M01336:	CMP	(R5), (SP)+
M01340:	BLO	101426
M01342:	CALL	101644
M01346:	BHIS	101426
M01350:	BIS	#140000, (R4)
M01354:	MOV	#000040, R0
M01360:	BR	101566
M01362:	BIT	#010000, @#000044
M01370:	BEQ	101402
M01372:	EMT	340			; .TTYIN
M01374:	BHIS	101564
M01376:	CLR	R0
M01400:	BR	101564
M01402:	BIT	#120000, (R5)
M01406:	BMI	101534
M01410:	BEQ	101422
M01412:	MOVB	(R5), R0
M01414:	BIC	#020377, (R4)
M01420:	BR	101426
M01422:	EMT	340			; .TTYIN
M01424:	BLO	101422
M01426:	TST	R0
M01430:	BEQ	101252
M01432:	CMPB	R0, #000015
M01436:	BEQ	101252
M01440:	CMPB	R0, #000012
M01444:	BEQ	101454
M01446:	CMPB	R0, #000033			; ESC
M01452:	BNE	101544
M01454:	CMP	R5, #070042
M01460:	BNE	101516
M01462:	BIT	#010000, (R5)
M01466:	BEQ	101502
M01470:	BIC	#010000, (R5)
M01474:	BIS	#020000, (R5)
M01500:	BR	101506
M01502:	BIS	#050000, (R5)
M01506:	MOVB	R0, (R5)
M01510:	MOV	#000040, R0			; ' '
M01514:	BR	101566
M01516:	MOV	R0, 000012(R5)
M01522:	MOV	#000040, R0			; ' '
M01526:	BIS	#040000, (R4)
M01532:	BR	101566
M01534:	MOV	#000040, R0			; ' '
M01540:	BIS	#140000, (R4)
M01544:	BIC	#010000, (R4)
M01550:	CMP	R5, #070042
M01554:	BEQ	101564
M01556:	MOV	R0, 000012(R5)
M01562:	BR	101566
M01564:	MOVB	R0, (R5)
M01566:	BIT	#140000, (R4)
M01572:	RETURN
;
LOOKER::
M01574:	CMP	R5, #070042
M01600:	BEQ	101614
M01602:	CALL	101252
M01606:	CALL	101122
M01612:	RETURN
M01614:	BIT	#010000, @#000044
M01622:	BNE	101642
M01624:	BIT	#040000, (R5)
M01630:	BEQ	101602
M01632:	BIC	#040000, (R5)
M01636:	BIS	#010000, (R5)
M01642:	RETURN
;
FILLBF::
M01644:	CLR	000012(R5)
M01650:	MOV	R0, -(SP)
M01652:	MOV	R5, R0
M01654:	TST	(R0)+
M01656:	EMT	375
M01660:	BHIS	101674
M01662:	TSTB	@#000052
M01666:	BEQ	101720
M01670:	CALL	101054
M01674:	ASL	R0
M01676:	BIC	#037777, (R4)
M01702:	BIS	R0, (R4)
M01704:	MOV	000006(R5), (R5)
M01710:	INC	000004(R5)
M01714:	CLC
M01716:	BR	101726
M01720:	BIC	#037777, (R4)
M01724:	SEC
M01726:	MOV	(SP)+, R0
M01730:	RETURN
;
; Модуль SUPIOO
; Процедура вывода символа
PUTCHR::
M01732:	CMP	R5, #070042
M01736:	BNE	101746
M01740:	EMT	341		; .TTYOUT
M01742:	BLO	101740
M01744:	RETURN
M01746:	MOVB	R0, @000000(R5)
M01752:	INC	(R5)
M01754:	MOV	000006(R5), -(SP)
M01760:	ADD	#001000, (SP)
M01764:	CMP	(SP)+, (R5)
M01766:	BHI	101774
M01770:	CALL	102014
M01774:	RETURN
;
; Процедура вывода символа
PUTCHF::
M01776:	MOV	R5, -(SP)
M02000:	MOV	070044, R5
M02004:	CALL	101732		; PUTCHR
M02010:	MOV	(SP)+, R5
M02012:	RETURN
;
DUMPBF::
FORCER::
M02014:	CMP	R5, #070042
M02020:	BEQ	102054
M02022:	CLR	000012(R5)
M02026:	MOV	R0, -(SP)
M02030:	MOV	R5, R0
M02032:	TST	(R0)+
M02034:	EMT	375
M02036:	CALL	101050
M02042:	MOV	(SP)+, R0
M02044:	MOV	000006(R5), (R5)
M02050:	INC	000004(R5)
FORCE::
FORCEF::
M02054:	RETURN
;
; Модуль SUPBRK
;
BREAK::
$B62::
M02056:	MOV	R3, -(SP)
M02060:	MOV	070044, R3
M02064:	CMPB	000003(R3), #000011
M02072:	BNE	102162
M02074:	MOV	000006(R3), -(SP)
M02100:	CMP	(SP), (R3)
M02102:	BEQ	102160
M02104:	BIC	#140000, 000014(R3)
M02112:	ADD	000010(R3), (SP)
M02116:	ADD	000010(R3), (SP)
M02122:	MOV	(R3), R0
M02124:	CLRB	(R0)+
M02126:	CMP	R0, (SP)
M02130:	BLO	102124
M02132:	MOV	070044, R0
M02136:	CLR	000012(R0)
M02142:	MOV	000006(R0), (R0)+
M02146:	EMT	375
M02150:	CALL	101050
M02154:	INC	000004(R3)
M02160:	TST	(SP)+
M02162:	MOV	(SP)+, R3
M02164:	RETURN
;
; Модуль SUPNEW
;
$B70::
$NEW::
M02166:	MOV	R0, -(SP)
M02170:	MOV	R1, -(SP)
M02172:	MOV	000006(SP), R0
M02176:	CMP	R0, #000002
M02202:	BLE	102240
M02204:	TST	070054
M02210:	BEQ	102240
M02212:	MOV	#070054, R1
M02216:	BR	102230
M02220:	CMP	000002(R1), R0
M02224:	BEQ	102276
M02226:	TST	(SP)+
M02230:	MOV	R1, -(SP)
M02232:	MOV	(R1), R1
M02234:	BNE	102220
M02236:	TST	(SP)+
M02240:	MOV	070050, R1
M02244:	ADD	R0, 070050
M02250:	CMP	070050, SP
M02254:	BHIS	102302
M02256:	MOV	R1, 000006(SP)
M02262:	CLRB	(R1)+
M02264:	DEC	R0
M02266:	BNE	102262
M02270:	MOV	(SP)+, R1
M02272:	MOV	(SP)+, R0
M02274:	RETURN
M02276:	MOV	(R1), @(SP)+
M02300:	BR	102256
M02302:	JSR	R5, L71204		; RTERR
M02306:	.WORD	070531			; "NOT ENOUGH AVAILABLE MEMORY"
M02310:	JSR	R5, L71204		; RTERR
M02314:	.WORD	070565
;
; Модуль SUPDIS
;
$B72::
$DISPO::
M02316:	MOV	R1, -(SP)
M02320:	CMP	R0, #000002
M02324:	BLE	102412
M02326:	MOV	000004(SP), R1
M02332:	BEQ	102412
M02334:	MOV	R0, 000002(R1)
M02340:	MOV	#070054, R0
M02344:	MOV	(R0), (R1)
M02346:	MOV	R1, (R0)
M02350:	TST	(R0)
M02352:	BEQ	102412
M02354:	MOV	(R0), R1
M02356:	ADD	000002(R1), R1
M02362:	CMP	R1, 070050
M02366:	BNE	102406
M02370:	MOV	(R0), 070050
M02374:	MOV	@000000(R0), (R0)
M02400:	MOV	#070054, R0
M02404:	BR	102350
M02406:	MOV	(R0), R0
M02410:	BR	102350
M02412:	MOV	(SP)+, R1
M02414:	MOV	(SP)+, (SP)
M02416:	RETURN
;
;------------------------------------------------------------------------------
;
; R5 = 102420 - базовый адрес для переменных
M102420:	.WORD
;
;		.BYTE	000030(R5)	; array[10] of char - Ваш псевдоним
;		.WORD	000042(R5)
;		.WORD	000044(R5)
;		.WORD	000046(R5)
;		.WORD	000050(R5)
;		.WORD	000052(R5)
;		.WORD	000054(R5)
;		.WORD	000056(R5)
;		.WORD	000060(R5)
;		.WORD	000062(R5)
;		.WORD	000064(R5)
;		.WORD	000066(R5)
;		.WORD	000070(R5)
;		.WORD	000072(R5)
;		.WORD	000074(R5)
;		.WORD	000076(R5)
;
;		.WORD	000102(R5)
;		.WORD	000104(R5)
;		.WORD	000106(R5)
;
;		.WORD	000124(R5)
;		.WORD	000126(R5)
;		.WORD	000130(R5)
;		.WORD	000132(R5)
;		.WORD	000134(R5)
;		.WORD	000136(R5)
;		.WORD	000140(R5)
;		.WORD	000142(R5)
;		.WORD	000144(R5)
;		.WORD	000146(R5)
;		.WORD	000150(R5)
;		.WORD	000152(R5)
;		.WORD	000154(R5)
;		.WORD	000156(R5)
;		.WORD	000160(R5)
;		.WORD	000162(R5)
;		.WORD	000164(R5)
;		.WORD	000166(R5)
;		.WORD	000170(R5)
;		.WORD	000172(R5)	; Год правления
;		.WORD	000174(R5)	; Номер года правления
;		.WORD	000176(R5)	; Сколько лет будем править
;		.WORD	000200(R5)
;		.WORD	000202(R5)
;		.WORD	000204(R5)
;		.WORD	000206(R5)
;		.WORD	000210(R5)
;		.WORD	000212(R5)
;		.WORD	000214(R5)
;		.WORD	000216(R5)
;
;		.WORD	000224(R5)	; real
;
;		.WORD	000236(R5)	; real
;		.WORD	000240(R5)
;		.WORD	000242(R5)	; real
;		.WORD	000244(R5)
;		.WORD	000246(R5)	; real
;		.WORD	000250(R5)
;		.WORD	000252(R5)	; real
;		.WORD	000254(R5)
;		.WORD	000256(R5)	; real
;		.WORD	000260(R5)
;		.WORD	000262(R5)	; real
;		.WORD	000264(R5)
;
;		.WORD	000316(R5)	; real
;		.WORD	000320(R5)
;		.WORD	000322(R5)	; real
;		.WORD	000324(R5)
;		.WORD	000326(R5)	; real
;		.WORD	000330(R5)
;		.WORD	000332(R5)	; real
;		.WORD	000334(R5)
;		.WORD	000336(R5)	; real
;		.WORD	000340(R5)
;		.WORD	000342(R5)	; real
;		.WORD	000344(R5)
;		.WORD	000346(R5)	; real
;		.WORD	000350(R5)
;		.WORD	000352(R5)	; real
;		.WORD	000354(R5)
;		.WORD	000356(R5)	; real
;		.WORD	000360(R5)
;		.WORD	000362(R5)	; real
;		.WORD	000364(R5)
;		.WORD	000366(R5)	; real
;		.WORD	000370(R5)
;		.WORD	000372(R5)	; real
;		.WORD	000374(R5)
;		.WORD	000376(R5)	; real
;		.WORD	000400(R5)
;
;------------------------------------------------------------------------------
	.END	START
