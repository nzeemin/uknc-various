	.TITLE	PCX
	.MCALL	.CSISP, .LOOKU, .READW, .CLOSE, .PRINT, .EXIT

START:	MOV	#2060$, @#34	; Вектор прерывания команды TRAP
1006$:	BIS	#100, @#177560	; Разрешить прерывание от клавиатуры
	MOV	SP, 2036$	; Сохранить SP
	.CSISP	#4262$, #2022$	; Ввод имени файла
	MOV	2036$, SP	; Восстановить SP
	CLR	@#177560	; Запретить прерывание от клавиатуры
	TST	L4322$		; Имя файла было введено ?
	BNE	1062$		; Да
	.PRINT	#1752$		; Вывод версии программы
	BR	1006$		; На начало
1062$:	CALL	1110$		; Чтение и вывод картинки на экран
1066$:	TSTB	@#177560	; Клавиша нажата ?
	BPL	1066$		; Нет
	TSTB	@#177562	; Считать код клавиши
	TRAP	0		; Освободить ресурсы в ПП
	CALL	2332$		; Освободить память в ПП
	BR	1006$		; На начало
; П/п файла файла, анализа заголовка, чтения и вывода на экран
1110$:	.LOOKU	#2002$, #0, #L4320$	; Открыть файл
	BCC	1136$		; Ошибок нет
	JMP	1622$		; На обработку ошибки открытия
1136$:	MOV	R0, 2036$	; Сохранить размер файла в блоках
	MOV	#14, @#177566	; Очистить экран
	CLR	R0
	SOB	R0, .		; Пауза
	CALL	2166$		; Загрузить и запустить программу в ПП
	MOV	#4262$, R4	; Адрес буфера для чтения
	.READW	#2002$, #0, R4, #100, #0 ; Прочесть заголовок файла (128 байт)
	BCC	1226$		; Ошибок при чтении нет
	JMP	1604$		; На обработку ошибки чтения
1226$:	CMPB	@R4, #10.	; Код изготовителя равен 10 ?
	BNE	1372$		; Нет - неверный формат
	MOVB	3(R4), 2050$	; Кол-во бит на точку в плане
	MOV	8.(R4), R1	; R1 = X2
	SUB	4(R4), R1	; R1 = X2 - X1
	INC	R1		; R1 = X2 - X1 + 1 (ширина)
	MOV	R1, 2040$	; Сохранить размер по горизонтали
	MOV	10.(R4), R1	; R1 = Y2
	SUB	6(R4), R1	; R1 = Y2 - Y1
	INC	R1		; R1 = Y2 - Y1 + 1 (высота)
	MOV	R1, 2042$	; Сохранить размер по вертикали
	MOVB	65.(R4), R1
	MOV	R1, 2046$	; Количество планов
	MOVB	#1, R1		; Необходим переворот байта
	CMPB	64.(R4), #70.	; Номер видеорежима равен 70 ?
	BNE	1324$		; Нет
	CLR	R1		; Переворота байта не надо
1324$:	MOV	R1, 2054$	; Сохранить режим переворота байта
	MOV	102(R4), 2044$	; Кол-во байт на строку
	CMPB	2050$, #1	; Число бит на точку в слое равно одному ?
	BNE	1372$		; Нет - неверный формат
	CMP	2044$, #80.	; Кол-во байт на строку больше 80 ?
	BHI	1372$		; Да - неверный формат
	CALL	1410$		; Прочесть файл и вывести на экран
	.CLOSE	#0		; Закрыть файл
	RETURN
1372$:	TRAP	0		; Освободить ресурсы в ПП
	CALL	2332$		; Освободить память в ПП
	MOV	#1720$, R0	; Вывод о неверном формате
	JMP	1632$
; П/п чтения файла и вывода на экран
1410$:	CLR	2056$		; Номер начального блока для чтения = 0
	MOV	#1, 2034$	; Вывод картинки не закончен
	CALL	1470$		; Прочесть очередную порцию данных
	CMP	2042$, #288.	; В файле больше 288 строк?
	BLOS	1444$		; Нет
	MOV	#288., 2042$	; Ограничить вывод 288-ю строками
1444$:	TRAP	1		; Начальный вывод (с учетом заголовка)
	BR	1452$
1450$:	TRAP	2		; Дальнейший вывод на экран
1452$:	TST	2034$		; Вывод картинки закончен ?
	BEQ	1466$		; Да - выходим из п/п
	CALL	1470$		; Прочесть очередную порцию данных
	BR	1450$		; Выводим далее
1466$:	RETURN
; П/п чтения данных из файла
1470$:	MOV	#28., R5	; Читаем по 28 блоков
	CMP	R5, 2036$	; Осталось меньше 28 блоков ?
	BLE	1506$		; Нет
	MOV	2036$, R5	; Читаем остаток
1506$:	SUB	R5, 2036$	; Вычесть число читаемых блоков из остатка
	MOV	R5, 1602$	; Сохраним число читаемых блоков
	ASH	#8., R5		; Преобразуем в кол-во слов
	.READW	#2002$, #0, #4262$, R5, 2056$ ; Чтение из файла
	BCC	1572$		; Ошибок при чтении нет
	TST	(SP)+		; Коррекция стека
	TST	(SP)+
	JMP	1604$		; На обработку ошибки чтения
1572$:	ADD	1602$, 2056$	; Номер блока для чтения плюс кол-во считанных блоков
	RETURN
1602$:	.BLKW	1		; Кол-во считанных блоков
; Обработка ошибки чтения
1604$:	TRAP	0		; Освободить ресурсы в ПП
	CALL	2332$		; Освободить память в ПП
	MOV	#1662$, R0	; Адрес надписи об ошибке чтения
	JMP	1632$		; На вывод ошибки
; Обработка ошибки открытия файла
1622$:	MOV	#1677$, R0	; Адрес надписи об отсутствии файла
	JMP	1632$		; На вывод ошибки
; Вывод ошибок
1632$:	MOV	R0, -(SP)	; Сохранить адрес надписи
	.PRINT	#1654$		; Вывод "?PCX-"
	.PRINT	(SP)+		; Вывод ошибки
	TST	(SP)+		; Коррекция стека
	JMP	1006$		; На начало программы

1654$:	.ASCII	/?PCX-/<200>
1662$:	.ASCIZ	/F-Read error/
1677$:	.ASCIZ	/F-File not found/
1720$:	.ASCIZ	/F-Invalid PCX file format/
1752$:	.ASCIZ	/PCX files viewer V02.00/
	.EVEN

2002$:	.BLKW	10		; Область для запросов .LOOKU, .READW
2022$:	.RAD50	/PCXPCXPCXPCX/	; Расширение по умолчанию для .CSIGEN
	.BLKW	1
2034$:	.BLKW	1	; Флаг идет вывод картинки !=0, вывод закончен = 0
2036$:	.BLKW	1	; Сохранение SP, сколько осталось прочесть блоков
2040$:	.BLKW	1	; Размер по горизонтали
2042$:	.BLKW	1	; Размер по вертикали
2044$:	.BLKW	1	; Кол-во байт на строку
2046$:	.BLKW	1	; Кол-во планов
2050$:	.BLKB	1	; Кол-во бит на точку в плане
	.EVEN
2052$:	.BLKW	1	; NOT USED
2054$:	.BLKW	1	; Нужен переворот байта = 1
2056$:	.BLKW	1	; Номер начального блока для чтения файла
; П/п обработки прерывания команды TRAP
2060$:	MOV	R0, -(SP)	; Сохранить R0
	MOV	2(SP), R0	; Прочесть адрес после команды TRAP
	MOV	-(R0), R0	; Прочесть код команды TRAP
	BIC	#177400, R0	; Оставить младший байт
2074$:	TST	2370$		; Программа в ПП еще работает ?
	BEQ	2074$		; Да
	CLR	2370$		; Очистка флага завершения работы программы в ПП
2106$:	TSTB	@#176664	; Канал К1 готов для передачи ?
	BPL	2106$		; Нет
	MOVB	R0, @#176666	; Передать мл.байт TRAP по каналу К1
	CLR	2370$		; Очистка флага завершения работы программы в ПП
2124$:	TST	2370$		; Программа в ПП еще работает ?
	BEQ	2124$		; Да
	MOV	(SP)+, R0	; Восстановить R0
	RTI			; Выйти из прерывания
; П/п передачи по каналу К2 адреса блока
2136$:	MOV	#2410$, R1	; Адрес блока с завершающими байтами
	MOV	#5, R3		; Счетчик цикла
	BR	2154$
2150$:	MOVB	(R1)+, @#176676	; Передать очередной байт
2154$:	TSTB	@#176674	; Канал К2 готов к передаче ?
	BPL	2154$		; Нет
	SOB	R3, 2150$
	RETURN
; П/п загрузки и запуска программы в ПП
2166$:	MOVB	#14, @#177566	; Очистить экран
	MOVB	#1, 2377$	; Код запрос памяти в ОЗУ ПП
	MOV	#<4262$-2450$>/2, 2404$	; Размер программы в словах
	CALL	2136$		; Запросить блок памяти в ОЗУ ПП
	TSTB	2376$		; Нормальное завершение
	BEQ	2232$		; Да
	.PRINT	#2414$		; Не хватает памяти в ОЗУ ПП
	.EXIT			; Выход в RT-11
2232$:	MOV	2402$, 2372$	; Сохранить адрес блока в ОЗУ ПП
	MOV	2404$, 2374$	; Сохранить размер блока
	MOVB	#20, 2377$	; Код запроса на передачу из ОЗУ ЦП в ОЗУ ПП
	MOV	2372$, 2402$	; Адрес в ОЗУ ПП
	MOV	#2450$, 2404$	; Адрес в ОЗУ ЦП
	MOV	2374$, 2406$	; Кол-во передаваемых слов
	CALL	2136$		; Перекачка программы в ОЗУ ПП
	MOVB	#30, 2377$	; Код запроса на запуск программы в ОЗУ ПП
	MOV	2372$, 2402$	; Адрес запуска
	CALL	2136$		; Запустить программу в ОЗУ ПП
2322$:	TST	2370$		; Программа в ПП завершила работу ?
	BEQ	2322$		; Нет
	RETURN
; П/п освобождения памяти в ОЗУ ПП
2332$:	MOVB	#2, 2377$	; Код запроса на освобождение блока памяти в ОЗУ ПП
	MOV	2372$, 2402$	; Адрес в ОЗУ ПП
	MOV	2374$, 2404$	; Размер блока
	CALL	2136$		; Освободить блок памяти
	MOVB	#14, @#177566	; Очистка экрана
	RETURN
2370$:	.WORD	0	; Флаг работы программы в ПП, 1 - завершила работу
2372$:	.BLKW	1	; Адрес блока памяти в ОЗУ ПП
2374$:	.BLKW	1	; Размер блока памяти в словах
; Блок для передачи запроса по каналу К2
2376$:	.BLKB	1	; Код ошибки
2377$:	.BLKB	1	; Код запроса
2400$:	.WORD	32	; Устройство - память ПП
2402$:	.BLKW	1
2404$:	.BLKW	1
2406$:	.BLKW	1
2410$:	.WORD	2376$, 401 ; Адрес блока для передачи плюс завершающие байты

2414$:	.ASCIZ	/?PCX-F-Insufficent memory/<15><12>
	.EVEN
; П/П ИСПОЛНЯЮЩИЕСЯ В ОЗУ ПП
; П/п начального старта
2450$:	MOV	@#330, 3370$	; Сохранить вектор приемника канала К1
	MOV	PC, R0
	ADD	#3172$-., R0	; Адрес новой п/п обработки прерываний канала К1
	MOV	R0, @#330	; Установить вектор приемника канала К1
	MOVB	#7, @#177066	; Разрешить прерывание всех приемников
	MOV	@#100, 3372$	; Сохранить вектор сетевого таймера
	MOV	PC, R0
	ADD	#3312$-., R0	; Адрес новой п/п обработки прерываний сетевого таймера
	MOV	R0, @#100	; Установить вектор прерывания сетевого таймера
	MOV	PC, R1
	ADD	#2562$-., R1	; Адреса п/п обработки запросов TRAP 0 - TRAP 2 с ЦП
	MOV	R1, R0
	SUB	#2562$, R1	; Разница между адресами ПП и ЦП
2532$:	ADD	R1, (R0)+	; Коррекция адресов вызова п/п в адрес в ОЗУ ПП
	TST	@R0		; Список завершен ?
	BNE	2532$		; Нет
	CALL	2572$		; Запрограммировать новую таблицу видеострок
	MOV	#2370$/2, @#177010 ; Адрес флага завершения в ОЗУ ЦП
	MOV	#1, @#177014	; Передать ЦП флаг о завершении работы программы в ПП
	RETURN
; Адреса п/п обработки запросов TRAP0 - TRAP 2 с ЦП
2562$:	.WORD	3120$, 3450$, 3374$, 0
; П/п программирования новой таблицы видеострок
2572$:	MOV	#26., @#22670	; Установить 26 текстовых строк на экране пользователя
	CLR	@#22752		; Запретить рулон
	MOV	#7, @#2372	; Регистр управления отображением
	MOV	#31020, @#2400	; Регистр управления цветом
	MOV	#73124, @#2402
	MOV	#100000, R0	; Начальный адрес видеоОЗУ
	MOV	#2410, R1	; Адрес таблицы видеострок
	MOV	#2414, R3	; Адрес следующего элемента таблицы видеострок
	JSR	R5, 2710$	; Запрограммировать 288 видеострок, длина 80 байт
	.WORD	288., 80.
	MOV	#177010, R0	; Регистр адреса
	MOV	#177024, R1	; Регистр октета точек
	MOV	#377, R2	; Заполнять все цветом точки
	MOV	#4, @#177016	; Цвет точки - зеленый
	MOV	#100000, @R0	; Начальный адрес видеоОЗУ
2700$:	MOVB	R2, @R1		; Заполнить зеленым цветом
	INC	@R0		; Перейти к следующему адресу видеоОЗУ
	BMI	2700$		; Цикл по всему видеоОЗУ 64 кБ
	RETURN
; П/п заполнения таблицы видеострок
2710$:	MOV	(R5)+, R2	; Кол-во видеострок
2712$:	MOV	R0, (R1)+	; Адрес видеоОЗУ
	MOV	R3, (R1)+	; Адрес следующего элемента таблицы видеострок
	ADD	@R5, R0		; Следующий адрес видеоОЗУ
	ADD	#4, R3		; Следующий адрес следующего элемента таблицы
	SOB	R2, 2712$	; Цикл по кол-ву видеострок
	TST	(R5)+
	RTS	R5
; П/п возврата таблицы видеострок
2732$:	MOV	#24., @#22670	; Установить 26 текстовых строк на экране пользователя
	MOV	#2, @#22752	; Разрешить рулон
	MOV	#27, @#2372	; Регистр управления отображением верхней строки
	MOV	#21000, @#2400	; Регистр управления цветом верхней строки
	MOV	#63104, @#2402
	MOV	#175700, R0	; Начальный адрес видеоОЗУ верхней строки
	MOV	#2410, R1	; Адрес таблицы видеострок верхней строки
	MOV	#2414, R3	; Адрес следующего элемента таблицы видеострок
	JSR	R5, 2710$	; Запрограммировать 10 видеострок, длина 40 байт
	.WORD	10., 40.
	ADD	#2, -2(R1)	; Следующий элемент - регистр управления отображением
	CLR	(R1)+		; Регистр управления отображением экрана пользователя
	MOV	#7, (R1)+
	MOV	#176520, (R1)+	; Адрес видеоОЗУ 11-й видеостроки верхней строки
	MOV	#2476, (R1)+	; Следующий элемент - регистр управления цветом
	MOV	#31020, (R1)+	; Регистр управления цветом экрана пользователя
	MOV	#73124, (R1)+
	MOV	#177460, (R1)+	; Адрес видеоОЗУ разделительной видеостроки
	MOV	#2500, (R1)+	; Следующий адрес - таблица видеострок экрана пользователя
	MOV	#100000, R0	; Начальный адрес видеоОЗУ экрана пользователя
	MOV	#2500, R1	; Адрес таблицы видеострок экрана пользователя
	MOV	#2504, R3	; Адрес следующего элемента таблицы видеострок
	JSR	R5, 2710$	; Запрограммировать 286 видеострок экрана пользователя
	.WORD	286., 80.
	MOV	#2500, -(R1)	; Коррекция таблицы видеострок
	MOV	#6742, @#4536
	RETURN
; П/п освобождения ресурсов (обработка запроса TRAP 0 с ЦП)
3120$:	MOV	#177010, R0	; Регистр адреса
	MOV	#177024, R1	; Регистр октета точек
	MOV	#100000, @R0	; Начальный адрес видеоОЗУ
	CLR	@#177016	; Очищать видеопамять
3140$:	MOV	#377, @R1	; Очистка
	INC	@R0		; Перейти к следующему адресу видеоОЗУ
	BMI	3140$		; Цикл по всему видеоОЗУ
	CALL	2732$		; Восстановление таблицы видеострок
	MOV	3370, @#330	; Восстановить вектор приемника канала К1
	MOV	3372, @#100	; Восстановить вектор сетевого таймера
	RETURN
; П/п обслуживания прерывания приемника канала К1
3172$:	MTPS	#340		; Запретить прерывания
	MOV	R0, -(SP)	; Сохранить регистры
	MOV	R1, -(SP)
	MOV	R2, -(SP)
	MOV	R3, -(SP)
	MOV	R4, -(SP)
	MOV	R5, -(SP)
	MOV	@#177010, -(SP)	; Сохранить РА
	MOV	@#177016, -(SP)	; Сохранить регистр цвета точки
	MOVB	@#177062, R1	; Прочесть код команды TRAP с ЦП
	ASL	R1
	MOV	PC, R2
	ADD	#2562-., R2
	ADD	R1, R2		; Рассчитать адрес п/п
	CALL	@0(R2)		; Вызов п/п
	MOV	#2370$/2, @#177010 ; Адрес флага завершения в ОЗУ ЦП
	MOV	#1, @#177014	; Передать ЦП флаг о завершении работы программы в ПП
	MOV	(SP)+, @#177016	; Восстановить регистр цвета точки
	MOV	(SP)+, @#177010	; Восстановить РА
	MOV	(SP)+, R5	; Восстановить регистры
	MOV	(SP)+, R4
	MOV	(SP)+, R3
	MOV	(SP)+, R2
	MOV	(SP)+, R1
	MOV	(SP)+, R0
	MTPS	#0		; Разрешить прерывания
	RTI
; П/п обслуживания прерывания сетевого таймера
3312$:	TST	@#7130		; Мотор дисковода работает ?
	BEQ	3340$		; Нет
	DEC	@#7130		; Уменьшить счетчик
	BNE	3340$		; Еще не ноль
	MOV	R0, -(SP)	; Сохранить R0
	MOV	@#7132, R0	; Адрес п/п останова мотора дисковода
	CALL	@R0		; Остановить мотор
	MOV	(SP)+, R0	; Восстановить R0
3340$:	TSTB	@#7227		; Есть автоповтор ?
	BEQ	3366$		; Нет
	DECB	@#7227		; Уменьшить счетчик автоповтора
	BNE	3366$		; Еще не ноль
	INC	@#7060		; Установить флаг вызова драйвера клавиатуры
	MOV	#1, @#7046	; Длительность звукового сигнала
3366$:	RTI
3370$:	.BLKW	1	; Сохраняемое значение вектора приемника канала К1
3372$:	.BLKW	1	; Сохраняемое значение вектора сетевого таймера
; П/п продолжения вывода на экран (обработка TRAP 2 с ЦП)
3374$:	MOV	#4262$/2, 4210$ ; Начальный адрес буфера картинки в ОЗУ ЦП
	MOV	#1, 4206$	; Читается младший байт из ОЗУ ЦП
	MOV	4212$, R0	; Восстановить регистры
	MOV	4214$, R1
	MOV	4216$, R2
	MOV	4220$, R3
	MOV	4222$, R4
	MOV	4224$, R5
	TST	4232$		; Был прочитан байт данных после счетчика
	BEQ	3606$		; Нет - на анализ байта
	BR	3632$		; Да - на цикл вывода
; П/п начального вывода на экран с учетом заголовка (обработка TRAP 1 с ЦП)
3450$:	MOV	#177010, R0	; Регистр адреса
	MOV	#177014, R1	; Регистр данных планов 1 и 2
	MOV	#2040$/2, @R0	; Адрес данных картинки в памяти ЦП
	MOV	PC, R2
	ADD	#4240$-., R2	; Адрес данных картинки в памяти ПП
	MOV	#7, R3		; Кол-во копируемых слов
3476$:	MOV	@R1, (R2)+	; Копирование данных из памяти ЦП в память ПП
	INC	@R0		; Перейти к следующему адресу в ЦП
	SOB	R3, 3476$
	MOV	#100000, 4236$	; Начальный адрес видеоОЗУ для вывода
	MOV	#L4462$/2, 4210$ ; Начальный адрес буфера картинки в ОЗУ ЦП плюс заголовок
	MOV	#1, 4206$	; Читается младший байт из ОЗУ ЦП
	MOV	4242$, R4	; Размер по вертикали (кол-во линий)
3532$:	CLR	4252$		; Номер плана * 2 (используется для выбора регистра данных)
	MOV	4236$, 4256$	; Сохранить адрес видеоОЗУ начала строки
	MOV	4246$, R1	; Кол-во планов
	MOV	4236$, 4260$
	ADD	4244$, 4260$	; Адрес видеоОЗУ начала следующей строки
	MOV	PC, R0
	ADD	#4166$-., R0	; Адрес массива адресов регистров данных планов
	ADD	4252$, R0	; Добавить к адресу номер плана * 2
	MOV	@R0, 4234$	; Текущий адрес регистра данных
3602$:	CALL	4044$		; Прочесть очередной байт из ОЗУ ЦП
3606$:	MOV	#1, R2		; Счетчик вывода байтов
	CMP	R0, #300	; Прочитанный байт это счетчик вывода ?
	BLOS	3632$		; Нет
	BIC	#300, R0	; Очистить старшие биты
	MOV	R0, R2		; R2 = счетчик вывода
	CALL	4052$		; Прочитать байт данных после счетчика
3632$:	MOV	4236$, @#177010	; Занести адрес в РА
	MOVB	R0, R3		; Байт данных в R3
	TST	4254$		; Надо переворачивать байт ?
	BEQ	3716$		; Нет
	MOV	R0, -(SP)	; Переворот байта, результат в R3
	CLR	R3
	.REPT	8.
	ROR	R0
	ROL	R3
	.ENDR
	MOV	(SP)+, R0
3716$:	MOVB	R3, @4234$	; Записать в видеоОЗУ
	INC	4236$		; Перейти к следующему адресу
	CMP	4236$, 4260$	; Строка закончилась ?
	BEQ	3742$		; Да
3736$:	SOB	R2, 3632$	; Цикл по счетчику байтов
	BR	3602$		; Дальше на вывод в той же строке
3742$:	MOV	4256$, 4236$	; Адрес начала видеостроки
	DEC	R1		; Уменьшить счетчик планов
	BEQ	4002$		; Вывод в строке завершен
	ADD	#2, 4252$	; Перейти к следующему плану
	MOV	PC, R3
	ADD	#4166$-., R3	; Адрес массива адресов регистров данных планов
	ADD	4252$, R3	; Добавить к адресу номер плана * 2
	MOV	@R3, 4234$	; Текущий адрес регистра данных
	BR	3736$		; На продолжение вывода
4002$:	ADD	#80., 4236$	; Переход к адресу в видеоОЗУ следующей строки
	DEC	R4		; Уменьшить счетчик линий
	BEQ	4020$		; Завершили вывод
	JMP	3532$		; На вывод новой строки
4020$:	MOV	#2034$/2, @#177010 ; Адрес в ОЗУ ЦП флага завершения вывода
	CLR	@#177014	; Вывод картинки завершен
	RETURN
4034$:	MOV	#2, 4232$
	BR	4060$
4044$:	CLR	4232$		; Чтение очередного байта для анализа
	BR	4060$
4052$:	MOV	#1, 4232$	; Читается байт данных после счетчика
4060$:	MOV	4210$, @#177010	; Адрес буфера с картинкой
	MOV	@#177014, R0	; Прочесть слово
	TST	4206$		; Читается младший байт ?
	BPL	4106$		; Да
	SWAB	R0		; Перевернуть байты
	INC	4210$		; Увеличить адрес буфера картинки
4106$:	NEG	4206$		; Поменять старший/младший байт
	BIC	#177400, R0	; Очистить старший байт
	CMP	4210$, #L40262$/2 ; Прочитан самый последний байт в буфере ?
	BHIS	4130$		; Да - на сохранение регистров и выход
	RETURN
4130$:	MOV	R0, 4212$	; Сохранить регистры
	MOV	R1, 4214$
	MOV	R2, 4216$
	MOV	R3, 4220$
	MOV	R4, 4222$
	MOV	R5, 4224$
	TST	(SP)+		; Коррекция стека для выхода в п/п канала К1
	RETURN			; Возврат в п/п канала К1
4164$:	.BLKW	1
; Адреса регистров данных планов, для планов с 3 по 7 запись идёт в ОЗУ с адресом 1000
4166$:	.WORD	177012, 177014, 177015
	.WORD	1000, 1000, 1000, 1000, 1000

4206$:	.BLKW	1	; Читать младший байт с ОЗУ ЦП = 1, старший = -1
4210$:	.BLKW	1	; Адрес ОЗУ ЦП для чтения буфера с картинкой
4212$:	.BLKW	1	; Сохранение R0
4214$:	.BLKW	1	; Сохранение R1
4216$:	.BLKW	1	; Сохранение R2
4220$:	.BLKW	1	; Сохранение R3
4222$:	.BLKW	1	; Сохранение R4
4224$:	.BLKW	1	; Сохранение R5

4226$:	.BLKW	2	; NOT USED

4232$:	.BLKW	1
4234$:	.BLKW	1	; Текущий адрес регистра данных для вывода
4236$:	.BLKW	1	; Адрес видеоОЗУ для вывода
4240$:	.BLKW	1	; Размер по горизонтали
4242$:	.BLKW	1	; Размер по вертикали
4244$:	.BLKW	1	; Кол-во байт на строку
4246$:	.BLKW	1	; Кол-во планов
4250$:	.BLKW	1	; Кол-во бит на точку в плане
4252$:	.BLKW	1	; Номер текущего плана * 2
4254$:	.BLKW	1	; Нужен переворот байта = 1  
4256$:	.BLKW	1	; Адрес видеоОЗУ начала текущей строки
4260$:	.BLKW	1	; Адрес видеоОЗУ начала следующей строки

4262$:	; Используется для списка файлов .CSIGEN и буфер для чтения картинки

L4320$ = 4262$ + 36	; Полное имя файла в R50
L4322$ = 4262$ + 40	; Имя файла

L4462$ = 4262$ + 200	; Данные после заголовка

L40262$ = 4262$ + 34000	; Конец буфера

	.END START
